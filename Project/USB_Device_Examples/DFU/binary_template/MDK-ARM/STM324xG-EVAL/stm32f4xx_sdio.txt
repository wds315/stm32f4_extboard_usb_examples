; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_sdio.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_sdio.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_sdio.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;721      */
;;;722    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;723    { 
;;;724      /* Check the parameters */
;;;725      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;726      
;;;727      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000002  4381              BICS     r1,r1,r0
000004  4801              LDR      r0,|L1.12|
000006  6001              STR      r1,[r0,#0]
;;;728    }
000008  4770              BX       lr
;;;729    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x422581b4

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;910      */
;;;911    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;912    { 
;;;913      /* Check the parameters */
;;;914      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;915       
;;;916      SDIO->ICR = SDIO_FLAG;
000002  6008              STR      r0,[r1,#0]
;;;917    }
000004  4770              BX       lr
;;;918    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40012c38

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;985      */
;;;986    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;987    { 
;;;988      /* Check the parameters */
;;;989      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;990       
;;;991      SDIO->ICR = SDIO_IT;
000002  6008              STR      r0,[r1,#0]
;;;992    }
000004  4770              BX       lr
;;;993    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40012c38

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;332      */
;;;333    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;334    {
;;;335      /* Check the parameters */
;;;336      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;337      
;;;338      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;339    }
000004  4770              BX       lr
;;;340    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x422580a0

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;433      */
;;;434    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;435    {
;;;436      /* SDIO_CmdInitStruct members default value */
;;;437      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
;;;438      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;439      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000004  6041              STR      r1,[r0,#4]
;;;440      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000006  6081              STR      r1,[r0,#8]
;;;441      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
000008  60c1              STR      r1,[r0,#0xc]
00000a  6101              STR      r1,[r0,#0x10]
;;;442    }
00000c  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;707      */
;;;708    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;709    { 
;;;710      /* Check the parameters */
;;;711      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;712      
;;;713      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;714    }
000004  4770              BX       lr
;;;715    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x422581b0

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;767      */
;;;768    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;769    {
;;;770      /* Check the parameters */
;;;771      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;772      
;;;773      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;774    }
000004  4770              BX       lr
;;;775    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4225858c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;501      */
;;;502    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504      uint32_t tmpreg = 0;
;;;505      
;;;506      /* Check the parameters */
;;;507      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;508      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;509      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;510      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;511      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;512    
;;;513    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;514      /* Set the SDIO Data TimeOut value */
;;;515      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  4a0a              LDR      r2,|L8.44|
000004  6801              LDR      r1,[r0,#0]
000006  6011              STR      r1,[r2,#0]
;;;516    
;;;517    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;518      /* Set the SDIO DataLength value */
;;;519      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000008  1d12              ADDS     r2,r2,#4
00000a  6841              LDR      r1,[r0,#4]
00000c  6011              STR      r1,[r2,#0]
;;;520    
;;;521    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;522      /* Get the SDIO DCTRL value */
;;;523      tmpreg = SDIO->DCTRL;
00000e  1d12              ADDS     r2,r2,#4
000010  6811              LDR      r1,[r2,#0]
;;;524      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;525      tmpreg &= DCTRL_CLEAR_MASK;
000012  f02103f7          BIC      r3,r1,#0xf7
000016  e9d01402          LDRD     r1,r4,[r0,#8]
;;;526      /* Set DEN bit according to SDIO_DPSM value */
;;;527      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;528      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;529      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;530      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
00001a  4321              ORRS     r1,r1,r4
00001c  e9d04004          LDRD     r4,r0,[r0,#0x10]
000020  4304              ORRS     r4,r4,r0
000022  4321              ORRS     r1,r1,r4
000024  4319              ORRS     r1,r1,r3
;;;531               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;532    
;;;533      /* Write to SDIO DCTRL */
;;;534      SDIO->DCTRL = tmpreg;
000026  6011              STR      r1,[r2,#0]
;;;535    }
000028  bd10              POP      {r4,pc}
;;;536    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x40012c24

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;542      */
;;;543    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;544    {
;;;545      /* SDIO_DataInitStruct members default value */
;;;546      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
;;;547      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
;;;548      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000008  6041              STR      r1,[r0,#4]
;;;549      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000a  6081              STR      r1,[r0,#8]
;;;550      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000c  60c1              STR      r1,[r0,#0xc]
;;;551      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
00000e  6101              STR      r1,[r0,#0x10]
000010  6141              STR      r1,[r0,#0x14]
;;;552    }
000012  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=1

                  SDIO_DeInit PROC
;;;264      */
;;;265    void SDIO_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;268      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;269    }
;;;270    
                          ENDP


                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;448      */
;;;449    uint8_t SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;450    {
;;;451      return (uint8_t)(SDIO->RESPCMD);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;452    }
000006  4770              BX       lr
;;;453    
                          ENDP

                  |L11.8|
                          DCD      0x40012c10

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;558      */
;;;559    uint32_t SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;560    { 
;;;561      return SDIO->DCOUNT;
000002  6800              LDR      r0,[r0,#0]
;;;562    }
000004  4770              BX       lr
;;;563    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40012c30

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;588      */
;;;589    uint32_t SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;590    { 
;;;591      return SDIO->FIFOCNT;
000002  6800              LDR      r0,[r0,#0]
;;;592    }
000004  4770              BX       lr
;;;593    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40012c48

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;873      */
;;;874    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000000  4a03              LDR      r2,|L14.16|
;;;875    { 
000002  4601              MOV      r1,r0
;;;876      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;877      
;;;878      /* Check the parameters */
;;;879      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;880      
;;;881      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L14.14|
;;;882      {
;;;883        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L14.14|
;;;884      }
;;;885      else
;;;886      {
;;;887        bitstatus = RESET;
;;;888      }
;;;889      return bitstatus;
;;;890    }
00000e  4770              BX       lr
;;;891    
                          ENDP

                  |L14.16|
                          DCD      0x40012c34

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;949      */
;;;950    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000000  4a03              LDR      r2,|L15.16|
;;;951    { 
000002  4601              MOV      r1,r0
;;;952      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;953      
;;;954      /* Check the parameters */
;;;955      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;956      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L15.14|
;;;957      {
;;;958        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L15.14|
;;;959      }
;;;960      else
;;;961      {
;;;962        bitstatus = RESET;
;;;963      }
;;;964      return bitstatus;
;;;965    }
00000e  4770              BX       lr
;;;966    
                          ENDP

                  |L15.16|
                          DCD      0x40012c34

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;365      */
;;;366    uint32_t SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;367    {
;;;368      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;369    }
000008  4770              BX       lr
;;;370    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40012c00

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;463      */
;;;464    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
000000  4901              LDR      r1,|L17.8|
;;;465    {
;;;466      __IO uint32_t tmp = 0;
;;;467    
;;;468      /* Check the parameters */
;;;469      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;470    
;;;471      tmp = SDIO_RESP_ADDR + SDIO_RESP;
;;;472      
;;;473      return (*(__IO uint32_t *) tmp); 
000002  5840              LDR      r0,[r0,r1]
;;;474    }
000004  4770              BX       lr
;;;475    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x40012c14

                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;825      */
;;;826    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L18.20|
;;;827    {
;;;828      /* Check the parameters */
;;;829      assert_param(IS_SDIO_IT(SDIO_IT));
;;;830      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;831      
;;;832      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;833      {
;;;834        /* Enable the SDIO interrupts */
;;;835        SDIO->MASK |= SDIO_IT;
;;;836      }
;;;837      else
;;;838      {
;;;839        /* Disable the SDIO interrupts */
;;;840        SDIO->MASK &= ~SDIO_IT;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L18.12|
000008  4301              ORRS     r1,r1,r0              ;835
00000a  e000              B        |L18.14|
                  |L18.12|
00000c  4381              BICS     r1,r1,r0
                  |L18.14|
00000e  6011              STR      r1,[r2,#0]            ;835
;;;841      } 
;;;842    }
000010  4770              BX       lr
;;;843    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x40012c3c

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;277      */
;;;278    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;279    {
;;;280      uint32_t tmpreg = 0;
;;;281        
;;;282      /* Check the parameters */
;;;283      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;284      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;285      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;286      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;287      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;288       
;;;289    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;290      /* Get the SDIO CLKCR value */
;;;291      tmpreg = SDIO->CLKCR;
000002  4b09              LDR      r3,|L19.40|
000004  681a              LDR      r2,[r3,#0]
;;;292      
;;;293      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;294      tmpreg &= CLKCR_CLEAR_MASK;
000006  f64761ff          MOV      r1,#0x7eff
00000a  438a              BICS     r2,r2,r1
;;;295      
;;;296      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;297      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;298      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;299      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;300      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;301      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;302      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
00000c  7d01              LDRB     r1,[r0,#0x14]
00000e  6884              LDR      r4,[r0,#8]
000010  68c5              LDR      r5,[r0,#0xc]
000012  4321              ORRS     r1,r1,r4
000014  6844              LDR      r4,[r0,#4]
000016  432c              ORRS     r4,r4,r5
000018  4321              ORRS     r1,r1,r4
00001a  6804              LDR      r4,[r0,#0]
00001c  6900              LDR      r0,[r0,#0x10]
00001e  4321              ORRS     r1,r1,r4
000020  4301              ORRS     r1,r1,r0
000022  4311              ORRS     r1,r1,r2
;;;303                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;304                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;305      
;;;306      /* Write to SDIO CLKCR */
;;;307      SDIO->CLKCR = tmpreg;
000024  6019              STR      r1,[r3,#0]
;;;308    }
000026  bd30              POP      {r4,r5,pc}
;;;309    
                          ENDP

                  |L19.40|
                          DCD      0x40012c04

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;568      */
;;;569    uint32_t SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;570    { 
;;;571      return SDIO->FIFO;
000002  6800              LDR      r0,[r0,#0]
;;;572    }
000004  4770              BX       lr
;;;573    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x40012c80

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;735      */
;;;736    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;737    { 
;;;738      /* Check the parameters */
;;;739      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;740      
;;;741      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;742    }
000004  4770              BX       lr
;;;743    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x422581b8

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;397      */
;;;398    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  b510              PUSH     {r4,lr}
;;;399    {
;;;400      uint32_t tmpreg = 0;
;;;401      
;;;402      /* Check the parameters */
;;;403      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;404      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;405      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;406      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;407      
;;;408    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;409      /* Set the SDIO Argument value */
;;;410      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  4a08              LDR      r2,|L22.36|
000004  6801              LDR      r1,[r0,#0]
000006  6011              STR      r1,[r2,#0]
;;;411      
;;;412    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;413      /* Get the SDIO CMD value */
;;;414      tmpreg = SDIO->CMD;
000008  1d12              ADDS     r2,r2,#4
00000a  6811              LDR      r1,[r2,#0]
;;;415      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;416      tmpreg &= CMD_CLEAR_MASK;
00000c  0acb              LSRS     r3,r1,#11
00000e  e9d01401          LDRD     r1,r4,[r0,#4]
;;;417      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;418      /* Set WAITRESP bits according to SDIO_Response value */
;;;419      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;420      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;421      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
000012  4321              ORRS     r1,r1,r4
000014  e9d04003          LDRD     r4,r0,[r0,#0xc]
000018  4304              ORRS     r4,r4,r0
00001a  02db              LSLS     r3,r3,#11             ;416
00001c  4321              ORRS     r1,r1,r4
00001e  4319              ORRS     r1,r1,r3
;;;422               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;423      
;;;424      /* Write to SDIO CMD */
;;;425      SDIO->CMD = tmpreg;
000020  6011              STR      r1,[r2,#0]
;;;426    }
000022  bd10              POP      {r4,pc}
;;;427    
                          ENDP

                  |L22.36|
                          DCD      0x40012c08

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;675      */
;;;676    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;677    { 
;;;678      /* Check the parameters */
;;;679      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;680      
;;;681      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;682    }
000004  4770              BX       lr
;;;683    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x422581ac

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;348      */
;;;349    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000000  4901              LDR      r1,|L24.8|
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;353      
;;;354      SDIO->POWER = SDIO_PowerState;
000002  6008              STR      r0,[r1,#0]
;;;355    }
000004  4770              BX       lr
;;;356    
                          ENDP

000006  0000              DCW      0x0000
                  |L24.8|
                          DCD      0x40012c00

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;661      */
;;;662    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;663    { 
;;;664      /* Check the parameters */
;;;665      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;666      
;;;667      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;668    }
000004  4770              BX       lr
;;;669    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x422585ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;647      */
;;;648    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;649    {
;;;650      /* Check the parameters */
;;;651      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;652      
;;;653      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;654    }
000004  4770              BX       lr
;;;655    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x422585a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;617      */
;;;618    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;619    { 
;;;620      /* Check the parameters */
;;;621      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;622      
;;;623      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;624    }
000004  4770              BX       lr
;;;625    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x422585a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;631      */
;;;632    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;633    { 
;;;634      /* Check the parameters */
;;;635      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;636      
;;;637      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000002  6008              STR      r0,[r1,#0]
;;;638    }
000004  4770              BX       lr
;;;639    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x422585a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;315      */
;;;316    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;317    {
;;;318      /* SDIO_InitStruct members default value */
;;;319      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7501              STRB     r1,[r0,#0x14]
;;;320      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;321      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000004  6001              STR      r1,[r0,#0]
;;;322      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000006  6041              STR      r1,[r0,#4]
;;;323      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000008  6081              STR      r1,[r0,#8]
;;;324      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
00000c  6101              STR      r1,[r0,#0x10]
;;;325    }
00000e  4770              BX       lr
;;;326    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;578      */
;;;579    void SDIO_WriteData(uint32_t Data)
000000  4901              LDR      r1,|L30.8|
;;;580    { 
;;;581      SDIO->FIFO = Data;
000002  6008              STR      r0,[r1,#0]
;;;582    }
000004  4770              BX       lr
;;;583    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x40012c80

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_sdio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_sdio_c_c8827541____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_sdio_c_c8827541____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_sdio_c_c8827541____REVSH|
#line 128
|__asm___16_stm32f4xx_sdio_c_c8827541____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
