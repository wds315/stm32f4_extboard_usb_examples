; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\lcd_log.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\lcd_log.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\lcd_log.crf ..\..\..\..\..\Utilities\STM32_EVAL\Common\lcd_log.c]
                          THUMB

                          AREA ||i.LCD_LOG_ClearTextZone||, CODE, READONLY, ALIGN=1

                  LCD_LOG_ClearTextZone PROC
;;;234    */
;;;235    void LCD_LOG_ClearTextZone(void)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
;;;237      uint8_t i=0;
000002  2400              MOVS     r4,#0
;;;238      sFONT *cFont = LCD_GetFont();
000004  f7fffffe          BL       LCD_GetFont
000008  4605              MOV      r5,r0
                  |L1.10|
;;;239      
;;;240      for (i= 0 ; i < YWINDOW_SIZE; i++)
;;;241      {
;;;242        LCD_ClearLine((i + YWINDOW_MIN) * cFont->Height);
00000a  1ce1              ADDS     r1,r4,#3
00000c  88e8              LDRH     r0,[r5,#6]
00000e  4348              MULS     r0,r1,r0
000010  b280              UXTH     r0,r0
000012  f7fffffe          BL       LCD_ClearLine
000016  1c64              ADDS     r4,r4,#1              ;240
000018  b2e4              UXTB     r4,r4                 ;240
00001a  2c09              CMP      r4,#9                 ;240
00001c  d3f5              BCC      |L1.10|
;;;243      }
;;;244      
;;;245      LCD_LOG_DeInit();
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      LCD_LOG_DeInit
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.LCD_LOG_DeInit||, CODE, READONLY, ALIGN=2

                  LCD_LOG_DeInit PROC
;;;140    */
;;;141    void LCD_LOG_DeInit(void)
000000  4808              LDR      r0,|L2.36|
;;;142    {
;;;143      LCD_LineColor = LCD_LOG_DEFAULT_COLOR;
000002  f64f71ff          MOV      r1,#0xffff
000006  8081              STRH     r1,[r0,#4]
;;;144      LCD_CacheBuffer_xptr = 0;
000008  2100              MOVS     r1,#0
00000a  80c1              STRH     r1,[r0,#6]
;;;145      LCD_CacheBuffer_yptr_top = 0;
00000c  8101              STRH     r1,[r0,#8]
;;;146      LCD_CacheBuffer_yptr_bottom = 0;
00000e  8141              STRH     r1,[r0,#0xa]
;;;147      
;;;148      LCD_CacheBuffer_yptr_top_bak = 0;
000010  8181              STRH     r1,[r0,#0xc]
;;;149      LCD_CacheBuffer_yptr_bottom_bak = 0;
000012  81c1              STRH     r1,[r0,#0xe]
;;;150      
;;;151      LCD_CacheBuffer_yptr_invert= ENABLE;
000014  2201              MOVS     r2,#1
000016  7002              STRB     r2,[r0,#0]
;;;152      LCD_ScrollActive = DISABLE;
000018  7041              STRB     r1,[r0,#1]
;;;153      LCD_Lock = DISABLE;
00001a  7081              STRB     r1,[r0,#2]
;;;154      LCD_Scrolled = DISABLE;
00001c  70c1              STRB     r1,[r0,#3]
;;;155      LCD_ScrollBackStep = 0;
00001e  8201              STRH     r1,[r0,#0x10]
;;;156    }
000020  4770              BX       lr
;;;157    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.data||

                          AREA ||i.LCD_LOG_Init||, CODE, READONLY, ALIGN=1

                  LCD_LOG_Init PROC
;;;127    
;;;128    void LCD_LOG_Init ( void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130      /* Deinit LCD cache */
;;;131      LCD_LOG_DeInit();
000002  f7fffffe          BL       LCD_LOG_DeInit
;;;132      /* Clear the LCD */
;;;133      LCD_Clear(Black);  
000006  e8bd4010          POP      {r4,lr}
00000a  2000              MOVS     r0,#0
00000c  f7ffbffe          B.W      LCD_Clear
;;;134    }
;;;135    
                          ENDP


                          AREA ||i.LCD_LOG_SetFooter||, CODE, READONLY, ALIGN=1

                  LCD_LOG_SetFooter PROC
;;;211    */
;;;212    void LCD_LOG_SetFooter(uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;213    {
000002  4605              MOV      r5,r0
000004  b08a              SUB      sp,sp,#0x28
;;;214      sFONT *cFont;
;;;215      uint8_t  tmp[40], i;
;;;216      LCD_SetBackColor(Blue);
000006  201f              MOVS     r0,#0x1f
000008  f7fffffe          BL       LCD_SetBackColor
;;;217      cFont = LCD_GetFont();
00000c  f7fffffe          BL       LCD_GetFont
000010  4604              MOV      r4,r0
;;;218      
;;;219      for (i= 0; i< (320/cFont->Width)-1 ; i++)
000012  2000              MOVS     r0,#0
000014  466a              MOV      r2,sp                 ;215
000016  f44f71a0          MOV      r1,#0x140
;;;220      {
;;;221        tmp[i] = ' ';
00001a  2320              MOVS     r3,#0x20
00001c  e002              B        |L4.36|
                  |L4.30|
00001e  5413              STRB     r3,[r2,r0]
000020  1c40              ADDS     r0,r0,#1              ;219
000022  b2c0              UXTB     r0,r0                 ;219
                  |L4.36|
000024  88a6              LDRH     r6,[r4,#4]            ;219
000026  fbb1f6f6          UDIV     r6,r1,r6              ;219
00002a  1e76              SUBS     r6,r6,#1              ;219
00002c  4286              CMP      r6,r0                 ;219
00002e  dcf6              BGT      |L4.30|
;;;222      }
;;;223      
;;;224      tmp[(320/cFont->Width)-1] = 0;
000030  88a0              LDRH     r0,[r4,#4]
000032  fbb1f0f0          UDIV     r0,r1,r0
000036  4410              ADD      r0,r0,r2
000038  2100              MOVS     r1,#0
00003a  f8001c01          STRB     r1,[r0,#-1]
;;;225      LCD_DisplayStringLine(LCD_PIXEL_HEIGHT - cFont->Height, tmp);
00003e  88e0              LDRH     r0,[r4,#6]
000040  4611              MOV      r1,r2
000042  f1c000f0          RSB      r0,r0,#0xf0
000046  b280              UXTH     r0,r0
000048  f7fffffe          BL       LCD_DisplayStringLine
;;;226      LCD_DisplayStringLine(LCD_PIXEL_HEIGHT - cFont->Height, Status);
00004c  88e0              LDRH     r0,[r4,#6]
00004e  4629              MOV      r1,r5
000050  f1c000f0          RSB      r0,r0,#0xf0
000054  b280              UXTH     r0,r0
000056  f7fffffe          BL       LCD_DisplayStringLine
;;;227      LCD_SetBackColor(Black);  
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       LCD_SetBackColor
;;;228    }
000060  b00a              ADD      sp,sp,#0x28
000062  bd70              POP      {r4-r6,pc}
;;;229    
                          ENDP


                          AREA ||i.LCD_LOG_SetHeader||, CODE, READONLY, ALIGN=2

                  LCD_LOG_SetHeader PROC
;;;162    */
;;;163    void LCD_LOG_SetHeader (uint8_t *Title)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  b088              SUB      sp,sp,#0x20
;;;165      sFONT *cFont;
;;;166      uint32_t size = 0 , idx; 
000004  2100              MOVS     r1,#0
;;;167      uint8_t  *ptr = Title;
000006  4603              MOV      r3,r0
;;;168      uint8_t  tmp[27];
;;;169      
;;;170      /* center the header */
;;;171      while (*ptr++) size ++ ;
000008  e000              B        |L5.12|
                  |L5.10|
00000a  1c49              ADDS     r1,r1,#1
                  |L5.12|
00000c  f8132b01          LDRB     r2,[r3],#1
000010  2a00              CMP      r2,#0
000012  d1fa              BNE      |L5.10|
;;;172    
;;;173      /* truncate extra text */
;;;174      if(size > 26)
000014  291a              CMP      r1,#0x1a
000016  d900              BLS      |L5.26|
;;;175      {
;;;176         size = 26;
000018  211a              MOVS     r1,#0x1a
                  |L5.26|
;;;177      }
;;;178      
;;;179      for (idx = 0 ; idx < 27 ; idx ++)
00001a  2200              MOVS     r2,#0
;;;180      { 
;;;181        tmp[idx] = ' '; 
00001c  2420              MOVS     r4,#0x20
00001e  466b              MOV      r3,sp                 ;168
                  |L5.32|
000020  549c              STRB     r4,[r3,r2]
000022  1c52              ADDS     r2,r2,#1              ;179
000024  2a1b              CMP      r2,#0x1b              ;179
000026  d3fb              BCC      |L5.32|
;;;182      }
;;;183    
;;;184      for (idx = 0 ; idx < size ; idx ++)
000028  2200              MOVS     r2,#0
;;;185      { 
;;;186        tmp[idx + (27 - size)/2] = Title[idx];
00002a  f1c1041b          RSB      r4,r1,#0x1b
00002e  e004              B        |L5.58|
                  |L5.48|
000030  5c85              LDRB     r5,[r0,r2]
000032  eb020654          ADD      r6,r2,r4,LSR #1
000036  1c52              ADDS     r2,r2,#1              ;184
000038  559d              STRB     r5,[r3,r6]
                  |L5.58|
00003a  428a              CMP      r2,r1                 ;184
00003c  d3f8              BCC      |L5.48|
;;;187      }
;;;188      
;;;189      /* Clear the LCD */
;;;190      LCD_Clear(Black);
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       LCD_Clear
;;;191        
;;;192      /* Set the LCD Font */
;;;193      LCD_SetFont (&Font12x12);
000044  4810              LDR      r0,|L5.136|
000046  f7fffffe          BL       LCD_SetFont
;;;194    
;;;195      cFont = LCD_GetFont();  
00004a  f7fffffe          BL       LCD_GetFont
00004e  4604              MOV      r4,r0
;;;196      /* Set the LCD Text Color */
;;;197      LCD_SetTextColor(White);
000050  f64f70ff          MOV      r0,#0xffff
000054  f7fffffe          BL       LCD_SetTextColor
;;;198      LCD_SetBackColor(Blue);
000058  201f              MOVS     r0,#0x1f
00005a  f7fffffe          BL       LCD_SetBackColor
;;;199      LCD_ClearLine(0);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       LCD_ClearLine
;;;200      LCD_DisplayStringLine(cFont->Height, tmp);
000064  88e0              LDRH     r0,[r4,#6]
000066  4669              MOV      r1,sp
000068  f7fffffe          BL       LCD_DisplayStringLine
;;;201      LCD_ClearLine(2 * cFont->Height);
00006c  88e0              LDRH     r0,[r4,#6]
00006e  0440              LSLS     r0,r0,#17
000070  0c00              LSRS     r0,r0,#16
000072  f7fffffe          BL       LCD_ClearLine
;;;202    
;;;203      LCD_SetBackColor(Black);
000076  2000              MOVS     r0,#0
000078  f7fffffe          BL       LCD_SetBackColor
;;;204      LCD_SetFont (&Font8x12);
00007c  4803              LDR      r0,|L5.140|
00007e  f7fffffe          BL       LCD_SetFont
;;;205    }
000082  b008              ADD      sp,sp,#0x20
000084  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP

000086  0000              DCW      0x0000
                  |L5.136|
                          DCD      Font12x12
                  |L5.140|
                          DCD      Font8x12

                          AREA ||i.LCD_LOG_UpdateDisplay||, CODE, READONLY, ALIGN=2

                  LCD_LOG_UpdateDisplay PROC
;;;329    */
;;;330    static void LCD_LOG_UpdateDisplay (void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;331    {
;;;332      uint8_t cnt = 0 ;
000004  2400              MOVS     r4,#0
;;;333      uint16_t length = 0 ;
;;;334      uint16_t ptr = 0, index = 0;
;;;335      
;;;336      sFONT *cFont = LCD_GetFont();
000006  f7fffffe          BL       LCD_GetFont
;;;337      
;;;338      if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
00000a  4f23              LDR      r7,|L6.152|
00000c  4605              MOV      r5,r0                 ;336
;;;339         (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
;;;340      {
;;;341        LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
00000e  4e23              LDR      r6,|L6.156|
000010  8978              LDRH     r0,[r7,#0xa]          ;338  ; LCD_CacheBuffer_yptr_bottom
000012  2808              CMP      r0,#8                 ;338
000014  d21a              BCS      |L6.76|
000016  8939              LDRH     r1,[r7,#8]            ;339  ; LCD_CacheBuffer_yptr_top
000018  4288              CMP      r0,r1                 ;339
00001a  d317              BCC      |L6.76|
00001c  eb000180          ADD      r1,r0,r0,LSL #2
000020  eb0100c0          ADD      r0,r1,r0,LSL #3
000024  eb060080          ADD      r0,r6,r0,LSL #2
000028  8e40              LDRH     r0,[r0,#0x32]
00002a  f7fffffe          BL       LCD_SetTextColor
;;;342        LCD_DisplayStringLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom) * cFont->Height,
00002e  8978              LDRH     r0,[r7,#0xa]  ; LCD_CacheBuffer_yptr_bottom
000030  88ea              LDRH     r2,[r5,#6]
000032  eb000180          ADD      r1,r0,r0,LSL #2
000036  eb0101c0          ADD      r1,r1,r0,LSL #3
00003a  eb060181          ADD      r1,r6,r1,LSL #2
00003e  e8bd47f0          POP      {r4-r10,lr}
000042  1cc0              ADDS     r0,r0,#3
000044  4342              MULS     r2,r0,r2
000046  b290              UXTH     r0,r2
000048  f7ffbffe          B.W      LCD_DisplayStringLine
                  |L6.76|
;;;343                               (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
;;;344      }
;;;345      else
;;;346      {
;;;347        
;;;348        if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
00004c  8939              LDRH     r1,[r7,#8]  ; LCD_CacheBuffer_yptr_top
00004e  4288              CMP      r0,r1
000050  d201              BCS      |L6.86|
;;;349        {
;;;350          /* Virtual length for rolling */
;;;351          length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
000052  3009              ADDS     r0,r0,#9
000054  b280              UXTH     r0,r0
                  |L6.86|
;;;352        }
;;;353        else
;;;354        {
;;;355          length = LCD_CacheBuffer_yptr_bottom;
;;;356        }
;;;357        
;;;358        ptr = length - YWINDOW_SIZE + 1;
000056  3808              SUBS     r0,r0,#8
000058  b287              UXTH     r7,r0
00005a  46b0              MOV      r8,r6                 ;341
;;;359        
;;;360        for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
;;;361        {
;;;362          
;;;363          index = (cnt + ptr )% LCD_CACHE_DEPTH ;
00005c  f04f0909          MOV      r9,#9
                  |L6.96|
000060  19e1              ADDS     r1,r4,r7
000062  fbb1f2f9          UDIV     r2,r1,r9
000066  fb091012          MLS      r0,r9,r2,r1
;;;364          
;;;365          LCD_SetTextColor(LCD_CacheBuffer[index].color);
00006a  eb000180          ADD      r1,r0,r0,LSL #2
00006e  eb0101c0          ADD      r1,r1,r0,LSL #3
000072  eb080681          ADD      r6,r8,r1,LSL #2
000076  8e70              LDRH     r0,[r6,#0x32]
000078  f7fffffe          BL       LCD_SetTextColor
;;;366          LCD_DisplayStringLine ((cnt + YWINDOW_MIN) * cFont->Height, 
00007c  88e8              LDRH     r0,[r5,#6]
00007e  1ce1              ADDS     r1,r4,#3
000080  4348              MULS     r0,r1,r0
000082  b280              UXTH     r0,r0
000084  4631              MOV      r1,r6
000086  f7fffffe          BL       LCD_DisplayStringLine
00008a  1c64              ADDS     r4,r4,#1              ;360
00008c  b2e4              UXTB     r4,r4                 ;360
00008e  2c09              CMP      r4,#9                 ;360
000090  d3e6              BCC      |L6.96|
;;;367                                 (uint8_t *)(LCD_CacheBuffer[index].line));
;;;368          
;;;369        }
;;;370      }
;;;371      
;;;372    }
000092  e8bd87f0          POP      {r4-r10,pc}
;;;373    
                          ENDP

000096  0000              DCW      0x0000
                  |L6.152|
                          DCD      ||.data||
                  |L6.156|
                          DCD      ||.bss||

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;253    */
;;;254    PUTCHAR_PROTOTYPE
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;255    {
000004  4604              MOV      r4,r0
;;;256      
;;;257      sFONT *cFont = LCD_GetFont();
000006  f7fffffe          BL       LCD_GetFont
;;;258      uint32_t idx;
;;;259      
;;;260      if(LCD_Lock == DISABLE)
00000a  4e37              LDR      r6,|L7.232|
00000c  4601              MOV      r1,r0                 ;257
00000e  78b0              LDRB     r0,[r6,#2]  ; LCD_Lock
000010  2800              CMP      r0,#0
000012  d166              BNE      |L7.226|
;;;261      {
;;;262        if((LCD_ScrollActive == ENABLE)||(LCD_ScrollActive == ENABLE))
000014  7870              LDRB     r0,[r6,#1]  ; LCD_ScrollActive
000016  f04f0800          MOV      r8,#0                 ;260
00001a  2801              CMP      r0,#1
00001c  d109              BNE      |L7.50|
;;;263        {
;;;264          LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
00001e  89f0              LDRH     r0,[r6,#0xe]  ; LCD_CacheBuffer_yptr_bottom_bak
000020  8170              STRH     r0,[r6,#0xa]
;;;265          LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
000022  89b0              LDRH     r0,[r6,#0xc]  ; LCD_CacheBuffer_yptr_top_bak
000024  8130              STRH     r0,[r6,#8]
;;;266          LCD_ScrollActive = DISABLE;
000026  f8868001          STRB     r8,[r6,#1]
;;;267          LCD_Scrolled = DISABLE;
00002a  f8868003          STRB     r8,[r6,#3]
;;;268          LCD_ScrollBackStep = 0;
00002e  f8a68010          STRH     r8,[r6,#0x10]
                  |L7.50|
;;;269          
;;;270        }
;;;271        
;;;272        if(( LCD_CacheBuffer_xptr < LCD_PIXEL_WIDTH /cFont->Width ) &&  ( ch != '\n'))
000032  888a              LDRH     r2,[r1,#4]
000034  f44f79a0          MOV      r9,#0x140
000038  fbb9f2f2          UDIV     r2,r9,r2
00003c  88f0              LDRH     r0,[r6,#6]  ; LCD_CacheBuffer_xptr
;;;273        {
;;;274          LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
00003e  f8dfc0ac          LDR      r12,|L7.236|
000042  b2e5              UXTB     r5,r4
000044  4282              CMP      r2,r0                 ;272
000046  d909              BLS      |L7.92|
000048  2c0a              CMP      r4,#0xa               ;272
00004a  d007              BEQ      |L7.92|
00004c  8971              LDRH     r1,[r6,#0xa]  ; LCD_CacheBuffer_yptr_bottom
00004e  eb010281          ADD      r2,r1,r1,LSL #2
000052  eb0201c1          ADD      r1,r2,r1,LSL #3
000056  eb0c0181          ADD      r1,r12,r1,LSL #2
00005a  e03f              B        |L7.220|
                  |L7.92|
;;;275        }   
;;;276        else 
;;;277        {
;;;278          if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
00005c  8932              LDRH     r2,[r6,#8]  ; LCD_CacheBuffer_yptr_top
00005e  8977              LDRH     r7,[r6,#0xa]  ; LCD_CacheBuffer_yptr_bottom
000060  42ba              CMP      r2,r7
000062  d303              BCC      |L7.108|
;;;279          {
;;;280            
;;;281            if(LCD_CacheBuffer_yptr_invert == DISABLE)
000064  7833              LDRB     r3,[r6,#0]  ; LCD_CacheBuffer_yptr_invert
000066  b153              CBZ      r3,|L7.126|
;;;282            {
;;;283              LCD_CacheBuffer_yptr_top++;
;;;284              
;;;285              if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
;;;286              {
;;;287                LCD_CacheBuffer_yptr_top = 0;  
;;;288              }
;;;289            }
;;;290            else
;;;291            {
;;;292              LCD_CacheBuffer_yptr_invert= DISABLE;
000068  f8868000          STRB     r8,[r6,#0]
                  |L7.108|
00006c  eb070287          ADD      r2,r7,r7,LSL #2       ;274
000070  eb0202c7          ADD      r2,r2,r7,LSL #3       ;274
;;;293            }
;;;294          }
;;;295          
;;;296          for(idx = LCD_CacheBuffer_xptr ; idx < LCD_PIXEL_WIDTH /cFont->Width; idx++)
;;;297          {
;;;298            LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
000074  f04f0a20          MOV      r10,#0x20
000078  eb0c0382          ADD      r3,r12,r2,LSL #2      ;274
00007c  e00d              B        |L7.154|
                  |L7.126|
00007e  1c52              ADDS     r2,r2,#1              ;283
000080  b292              UXTH     r2,r2                 ;283
000082  8132              STRH     r2,[r6,#8]            ;283
000084  2a09              CMP      r2,#9                 ;285
000086  d1f1              BNE      |L7.108|
000088  f8a68008          STRH     r8,[r6,#8]            ;287
00008c  e7ee              B        |L7.108|
                  |L7.142|
00008e  88f2              LDRH     r2,[r6,#6]  ; LCD_CacheBuffer_xptr
000090  f803a002          STRB     r10,[r3,r2]
000094  1c52              ADDS     r2,r2,#1
000096  80f2              STRH     r2,[r6,#6]
000098  1c40              ADDS     r0,r0,#1              ;296
                  |L7.154|
00009a  888f              LDRH     r7,[r1,#4]            ;296
00009c  fbb9f2f7          UDIV     r2,r9,r7              ;296
0000a0  4282              CMP      r2,r0                 ;296
0000a2  d8f4              BHI      |L7.142|
;;;299          }   
;;;300          LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
0000a4  88b0              LDRH     r0,[r6,#4]  ; LCD_LineColor
0000a6  8658              STRH     r0,[r3,#0x32]
0000a8  4667              MOV      r7,r12
;;;301          
;;;302          LCD_CacheBuffer_xptr = 0;
0000aa  f8a68006          STRH     r8,[r6,#6]
;;;303          
;;;304          LCD_LOG_UpdateDisplay (); 
0000ae  f7fffffe          BL       LCD_LOG_UpdateDisplay
;;;305          
;;;306          LCD_CacheBuffer_yptr_bottom ++; 
0000b2  8970              LDRH     r0,[r6,#0xa]  ; LCD_CacheBuffer_yptr_bottom
0000b4  1c40              ADDS     r0,r0,#1
0000b6  b280              UXTH     r0,r0
0000b8  8170              STRH     r0,[r6,#0xa]
;;;307          
;;;308          if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
0000ba  2809              CMP      r0,#9
0000bc  d104              BNE      |L7.200|
;;;309          {
;;;310            LCD_CacheBuffer_yptr_bottom = 0;
0000be  f8a6800a          STRH     r8,[r6,#0xa]
;;;311            LCD_CacheBuffer_yptr_top = 1;    
0000c2  2001              MOVS     r0,#1
0000c4  8130              STRH     r0,[r6,#8]
;;;312            LCD_CacheBuffer_yptr_invert = ENABLE;
0000c6  7030              STRB     r0,[r6,#0]
                  |L7.200|
;;;313          }
;;;314          
;;;315          if( ch != '\n')
0000c8  2c0a              CMP      r4,#0xa
0000ca  d00a              BEQ      |L7.226|
;;;316          {
;;;317            LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
0000cc  8970              LDRH     r0,[r6,#0xa]  ; LCD_CacheBuffer_yptr_bottom
0000ce  eb000180          ADD      r1,r0,r0,LSL #2
0000d2  eb0101c0          ADD      r1,r1,r0,LSL #3
0000d6  88f0              LDRH     r0,[r6,#6]  ; LCD_CacheBuffer_xptr
0000d8  eb070181          ADD      r1,r7,r1,LSL #2
                  |L7.220|
0000dc  540d              STRB     r5,[r1,r0]
0000de  1c40              ADDS     r0,r0,#1
0000e0  80f0              STRH     r0,[r6,#6]
                  |L7.226|
;;;318          }
;;;319          
;;;320        }
;;;321      }
;;;322      return ch;
0000e2  4620              MOV      r0,r4
;;;323    }
0000e4  e8bd87f0          POP      {r4-r10,pc}
;;;324      
                          ENDP

                  |L7.232|
                          DCD      ||.data||
                  |L7.236|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  LCD_CacheBuffer
                          %        468

                          AREA ||.data||, DATA, ALIGN=1

                  LCD_CacheBuffer_yptr_invert
000000  00                DCB      0x00
                  LCD_ScrollActive
000001  00                DCB      0x00
                  LCD_Lock
000002  00                DCB      0x00
                  LCD_Scrolled
000003  00                DCB      0x00
                  LCD_LineColor
000004  0000              DCB      0x00,0x00
                  LCD_CacheBuffer_xptr
000006  0000              DCB      0x00,0x00
                  LCD_CacheBuffer_yptr_top
000008  0000              DCB      0x00,0x00
                  LCD_CacheBuffer_yptr_bottom
00000a  0000              DCB      0x00,0x00
                  LCD_CacheBuffer_yptr_top_bak
00000c  0000              DCB      0x00,0x00
                  LCD_CacheBuffer_yptr_bottom_bak
00000e  0000              DCB      0x00,0x00
                  LCD_ScrollBackStep
000010  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Utilities\\STM32_EVAL\\Common\\lcd_log.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_lcd_log_c_18c14e27____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_lcd_log_c_18c14e27____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_lcd_log_c_18c14e27____REVSH|
#line 128
|__asm___9_lcd_log_c_18c14e27____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
