; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_spi.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_spi.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;540      */
;;;541    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;542    {
;;;543      /* Check the parameters */
;;;544      assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
;;;545      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;546      
;;;547      if (NewState != DISABLE)
;;;548      {
;;;549        /* Enable the selected SPI peripheral (in I2S mode) */
;;;550        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
;;;551      }
;;;552      else
;;;553      {
;;;554        /* Disable the selected SPI peripheral in I2S mode */
;;;555        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
000002  8b81              LDRH     r1,[r0,#0x1c]
000004  d002              BEQ      |L1.12|
000006  f4416180          ORR      r1,r1,#0x400          ;550
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L1.16|
000010  8381              STRH     r1,[r0,#0x1c]         ;550
;;;556      }
;;;557    }
000012  4770              BX       lr
;;;558    
                          ENDP


                          AREA ||i.I2S_FullDuplexConfig||, CODE, READONLY, ALIGN=1

                  I2S_FullDuplexConfig PROC
;;;705      */
;;;706    void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;707    {
;;;708      uint16_t tmpreg = 0, tmp = 0;
;;;709      
;;;710      /* Check the I2S parameters */
;;;711      assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
;;;712      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;713      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;714      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;715      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;716    
;;;717    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;718      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;719      I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000002  8b83              LDRH     r3,[r0,#0x1c]
000004  2200              MOVS     r2,#0                 ;708
000006  f24f0440          MOV      r4,#0xf040
00000a  4023              ANDS     r3,r3,r4
00000c  8383              STRH     r3,[r0,#0x1c]
;;;720      I2Sxext->I2SPR = 0x0002;
00000e  2302              MOVS     r3,#2
000010  8403              STRH     r3,[r0,#0x20]
;;;721      
;;;722      /* Get the I2SCFGR register value */
;;;723      tmpreg = I2Sxext->I2SCFGR;
000012  f8b0c01c          LDRH     r12,[r0,#0x1c]
;;;724      
;;;725      /* Get the mode to be configured for the extended I2S */
;;;726      if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
000016  880b              LDRH     r3,[r1,#0]
;;;727      {
;;;728        tmp = I2S_Mode_SlaveRx;
000018  f44f7480          MOV      r4,#0x100
00001c  f5b37f00          CMP      r3,#0x200             ;726
000020  d000              BEQ      |L2.36|
000022  b903              CBNZ     r3,|L2.38|
                  |L2.36|
000024  4622              MOV      r2,r4
                  |L2.38|
;;;729      }
;;;730      else
;;;731      {
;;;732        if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
;;;733        {
;;;734          tmp = I2S_Mode_SlaveTx;
;;;735        }
;;;736      }
;;;737    
;;;738     
;;;739      /* Configure the I2S with the SPI_InitStruct values */
;;;740      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
000026  884b              LDRH     r3,[r1,#2]
000028  888c              LDRH     r4,[r1,#4]
00002a  8989              LDRH     r1,[r1,#0xc]
00002c  4323              ORRS     r3,r3,r4
00002e  4311              ORRS     r1,r1,r2
000030  430b              ORRS     r3,r3,r1
000032  ea43030c          ORR      r3,r3,r12
000036  f4436100          ORR      r1,r3,#0x800
;;;741                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;742                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;743     
;;;744      /* Write to SPIx I2SCFGR */  
;;;745      I2Sxext->I2SCFGR = tmpreg;
00003a  8381              STRH     r1,[r0,#0x1c]
;;;746    }
00003c  bd10              POP      {r4,pc}
;;;747    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;326      */
;;;327    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {
;;;329      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000002  2202              MOVS     r2,#2
000004  2300              MOVS     r3,#0
;;;330      uint32_t tmp = 0, i2sclk = 0;
;;;331    #ifndef I2S_EXTERNAL_CLOCK_VAL
;;;332      uint32_t pllm = 0, plln = 0, pllr = 0;
;;;333    #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;334      
;;;335      /* Check the I2S parameters */
;;;336      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;337      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;338      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;339      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;340      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;341      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;342      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;343    
;;;344    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;345      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;346      SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000006  8b85              LDRH     r5,[r0,#0x1c]
000008  2401              MOVS     r4,#1                 ;329
00000a  f24f0640          MOV      r6,#0xf040
00000e  4035              ANDS     r5,r5,r6
000010  8385              STRH     r5,[r0,#0x1c]
;;;347      SPIx->I2SPR = 0x0002;
000012  8402              STRH     r2,[r0,#0x20]
;;;348      
;;;349      /* Get the I2SCFGR register value */
;;;350      tmpreg = SPIx->I2SCFGR;
000014  8b85              LDRH     r5,[r0,#0x1c]
;;;351      
;;;352      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;353      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
000016  688e              LDR      r6,[r1,#8]
000018  2e02              CMP      r6,#2
00001a  d03b              BEQ      |L3.148|
;;;354      {
;;;355        i2sodd = (uint16_t)0;
;;;356        i2sdiv = (uint16_t)2;   
;;;357      }
;;;358      /* If the requested audio frequency is not the default, compute the prescaler */
;;;359      else
;;;360      {
;;;361        /* Check the frame length (For the Prescaler computing) *******************/
;;;362        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
00001c  888a              LDRH     r2,[r1,#4]
00001e  b102              CBZ      r2,|L3.34|
;;;363        {
;;;364          /* Packet length is 16 bits */
;;;365          packetlength = 1;
;;;366        }
;;;367        else
;;;368        {
;;;369          /* Packet length is 32 bits */
;;;370          packetlength = 2;
000020  2402              MOVS     r4,#2
                  |L3.34|
;;;371        }
;;;372    
;;;373        /* Get I2S source Clock frequency  ****************************************/
;;;374          
;;;375        /* If an external I2S clock has to be used, this define should be set  
;;;376           in the project configuration or in the stm32f4xx_conf.h file */
;;;377      #ifdef I2S_EXTERNAL_CLOCK_VAL     
;;;378        /* Set external clock as I2S clock source */
;;;379        if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
;;;380        {
;;;381          RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
;;;382        }
;;;383        
;;;384        /* Set the I2S clock to the external clock  value */
;;;385        i2sclk = I2S_EXTERNAL_CLOCK_VAL;
;;;386    
;;;387      #else /* There is no define for External I2S clock source */
;;;388        /* Set PLLI2S as I2S clock source */
;;;389        if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
000022  4a25              LDR      r2,|L3.184|
000024  6813              LDR      r3,[r2,#0]
000026  021b              LSLS     r3,r3,#8
000028  d503              BPL      |L3.50|
;;;390        {
;;;391          RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
00002a  6813              LDR      r3,[r2,#0]
00002c  f4230300          BIC      r3,r3,#0x800000
000030  6013              STR      r3,[r2,#0]
                  |L3.50|
;;;392        }    
;;;393        
;;;394        /* Get the PLLI2SN value */
;;;395        plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
000032  4b21              LDR      r3,|L3.184|
000034  337c              ADDS     r3,r3,#0x7c
000036  681a              LDR      r2,[r3,#0]
;;;396                          (RCC_PLLI2SCFGR_PLLI2SN >> 6));
;;;397        
;;;398        /* Get the PLLI2SR value */
;;;399        pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
000038  681b              LDR      r3,[r3,#0]
00003a  f3c21288          UBFX     r2,r2,#6,#9           ;395
;;;400                          (RCC_PLLI2SCFGR_PLLI2SR >> 28));
;;;401        
;;;402        /* Get the PLLM value */
;;;403        pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
00003e  4e1e              LDR      r6,|L3.184|
000040  f3c37302          UBFX     r3,r3,#28,#3          ;399
000044  1f36              SUBS     r6,r6,#4
000046  6836              LDR      r6,[r6,#0]
000048  f0060c3f          AND      r12,r6,#0x3f
;;;404        
;;;405        /* Get the I2S source clock value */
;;;406        i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
00004c  4e1b              LDR      r6,|L3.188|
00004e  fbb6f6fc          UDIV     r6,r6,r12
000052  4356              MULS     r6,r2,r6
000054  fbb6f2f3          UDIV     r2,r6,r3
;;;407      #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;408        
;;;409        /* Compute the Real divider depending on the MCLK output state, with a floating point */
;;;410        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
000058  88cb              LDRH     r3,[r1,#6]
00005a  f5b37f00          CMP      r3,#0x200
00005e  d029              BEQ      |L3.180|
;;;411        {
;;;412          /* MCLK output is enabled */
;;;413          tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
;;;414        }
;;;415        else
;;;416        {
;;;417          /* MCLK output is disabled */
;;;418          tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
000060  0163              LSLS     r3,r4,#5
000062  fbb2f2f3          UDIV     r2,r2,r3
000066  bf00              NOP      
                  |L3.104|
000068  eb020282          ADD      r2,r2,r2,LSL #2
00006c  688b              LDR      r3,[r1,#8]
00006e  0052              LSLS     r2,r2,#1
000070  fbb2f2f3          UDIV     r2,r2,r3
000074  1d52              ADDS     r2,r2,#5
000076  b292              UXTH     r2,r2
;;;419        }
;;;420        
;;;421        /* Remove the flatting point */
;;;422        tmp = tmp / 10;  
000078  230a              MOVS     r3,#0xa
00007a  fbb2f2f3          UDIV     r2,r2,r3
;;;423          
;;;424        /* Check the parity of the divider */
;;;425        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
00007e  f0020301          AND      r3,r2,#1
;;;426       
;;;427        /* Compute the i2sdiv prescaler */
;;;428        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
000082  1ad2              SUBS     r2,r2,r3
000084  f3c2024f          UBFX     r2,r2,#1,#16
;;;429       
;;;430        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;431        i2sodd = (uint16_t) (i2sodd << 8);
000088  021b              LSLS     r3,r3,#8
;;;432      }
;;;433    
;;;434      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;435      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
00008a  1e94              SUBS     r4,r2,#2
00008c  2cfe              CMP      r4,#0xfe
00008e  d301              BCC      |L3.148|
;;;436      {
;;;437        /* Set the default values */
;;;438        i2sdiv = 2;
000090  2202              MOVS     r2,#2
;;;439        i2sodd = 0;
000092  2300              MOVS     r3,#0
                  |L3.148|
;;;440      }
;;;441    
;;;442      /* Write to SPIx I2SPR register the computed value */
;;;443      SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
000094  88cc              LDRH     r4,[r1,#6]
000096  431a              ORRS     r2,r2,r3
000098  4314              ORRS     r4,r4,r2
00009a  8404              STRH     r4,[r0,#0x20]
;;;444     
;;;445      /* Configure the I2S with the SPI_InitStruct values */
;;;446      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
00009c  880a              LDRH     r2,[r1,#0]
00009e  884b              LDRH     r3,[r1,#2]
0000a0  431a              ORRS     r2,r2,r3
0000a2  888b              LDRH     r3,[r1,#4]
0000a4  8989              LDRH     r1,[r1,#0xc]
0000a6  430b              ORRS     r3,r3,r1
0000a8  431a              ORRS     r2,r2,r3
0000aa  432a              ORRS     r2,r2,r5
0000ac  f4426100          ORR      r1,r2,#0x800
;;;447                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;448                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;449     
;;;450      /* Write to SPIx I2SCFGR */  
;;;451      SPIx->I2SCFGR = tmpreg;
0000b0  8381              STRH     r1,[r0,#0x1c]
;;;452    }
0000b2  bd70              POP      {r4-r6,pc}
                  |L3.180|
0000b4  0a12              LSRS     r2,r2,#8              ;413
0000b6  e7d7              B        |L3.104|
;;;453    
                          ENDP

                  |L3.184|
                          DCD      0x40023808
                  |L3.188|
                          DCD      0x017d7840

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;486      */
;;;487    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;488    {
;;;489    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;490      /* Initialize the I2S_Mode member */
;;;491      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;492      
;;;493      /* Initialize the I2S_Standard member */
;;;494      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;495      
;;;496      /* Initialize the I2S_DataFormat member */
;;;497      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;498      
;;;499      /* Initialize the I2S_MCLKOutput member */
;;;500      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;501      
;;;502      /* Initialize the I2S_AudioFreq member */
;;;503      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2202              MOVS     r2,#2
;;;504      
;;;505      /* Initialize the I2S_CPOL member */
;;;506      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000c  6082              STR      r2,[r0,#8]
00000e  8181              STRH     r1,[r0,#0xc]
;;;507    }
000010  4770              BX       lr
;;;508    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;587      */
;;;588    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;589    {
;;;590      /* Check the parameters */
;;;591      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;592      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;593      if (SPI_Direction == SPI_Direction_Tx)
;;;594      {
;;;595        /* Set the Tx only mode */
;;;596        SPIx->CR1 |= SPI_Direction_Tx;
;;;597      }
;;;598      else
;;;599      {
;;;600        /* Set the Rx only mode */
;;;601        SPIx->CR1 &= SPI_Direction_Rx;
000004  8801              LDRH     r1,[r0,#0]
000006  d003              BEQ      |L5.16|
000008  f4214180          BIC      r1,r1,#0x4000
                  |L5.12|
00000c  8001              STRH     r1,[r0,#0]            ;596
;;;602      }
;;;603    }
00000e  4770              BX       lr
                  |L5.16|
000010  f4414180          ORR      r1,r1,#0x4000         ;596
000014  e7fa              B        |L5.12|
;;;604    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;885      */
;;;886    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;887    {
;;;888      /* Check the parameters */
;;;889      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;890      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;891      if (NewState != DISABLE)
;;;892      {
;;;893        /* Enable the selected SPI CRC calculation */
;;;894        SPIx->CR1 |= SPI_CR1_CRCEN;
;;;895      }
;;;896      else
;;;897      {
;;;898        /* Disable the selected SPI CRC calculation */
;;;899        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;894
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L6.16|
000010  8001              STRH     r1,[r0,#0]            ;894
;;;900      }
;;;901    }
000012  4770              BX       lr
;;;902    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;515      */
;;;516    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;520      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;521      if (NewState != DISABLE)
;;;522      {
;;;523        /* Enable the selected SPI peripheral */
;;;524        SPIx->CR1 |= SPI_CR1_SPE;
;;;525      }
;;;526      else
;;;527      {
;;;528        /* Disable the selected SPI peripheral */
;;;529        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  f0410140          ORR      r1,r1,#0x40           ;524
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210140          BIC      r1,r1,#0x40
                  |L7.16|
000010  8001              STRH     r1,[r0,#0]            ;524
;;;530      }
;;;531    }
000012  4770              BX       lr
;;;532    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;567      */
;;;568    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;569    {
;;;570      /* Check the parameters */
;;;571      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;572      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;573      /* Clear DFF bit */
;;;574      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f4226200          BIC      r2,r2,#0x800
000006  8002              STRH     r2,[r0,#0]
;;;575      /* Set new DFF bit value */
;;;576      SPIx->CR1 |= SPI_DataSize;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;577    }
00000e  4770              BX       lr
;;;578    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;925      */
;;;926    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  2901              CMP      r1,#1
;;;927    {
;;;928      uint16_t crcreg = 0;
;;;929      /* Check the parameters */
;;;930      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;931      assert_param(IS_SPI_CRC(SPI_CRC));
;;;932      if (SPI_CRC != SPI_CRC_Rx)
000002  d001              BEQ      |L9.8|
;;;933      {
;;;934        /* Get the Tx CRC register */
;;;935        crcreg = SPIx->TXCRCR;
000004  8b00              LDRH     r0,[r0,#0x18]
;;;936      }
;;;937      else
;;;938      {
;;;939        /* Get the Rx CRC register */
;;;940        crcreg = SPIx->RXCRCR;
;;;941      }
;;;942      /* Return the selected CRC register */
;;;943      return crcreg;
;;;944    }
000006  4770              BX       lr
                  |L9.8|
000008  8a80              LDRH     r0,[r0,#0x14]         ;940
00000a  4770              BX       lr
;;;945    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;950      */
;;;951    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  8a00              LDRH     r0,[r0,#0x10]
;;;952    {
;;;953      /* Check the parameters */
;;;954      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;955      
;;;956      /* Return the CRC polynomial register */
;;;957      return SPIx->CRCPR;
;;;958    }
000002  4770              BX       lr
;;;959    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;1181     */
;;;1182   void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43c9              MVNS     r1,r1
;;;1183   {
;;;1184     /* Check the parameters */
;;;1185     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1186     assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;1187       
;;;1188     /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;1189     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8101              STRH     r1,[r0,#8]
;;;1190   }
000004  4770              BX       lr
;;;1191   
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;1261     */
;;;1262   void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  f001020f          AND      r2,r1,#0xf
;;;1263   {
;;;1264     uint16_t itpos = 0;
;;;1265     /* Check the parameters */
;;;1266     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1267     assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;1268   
;;;1269     /* Get the SPI_I2S IT index */
;;;1270     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
;;;1271   
;;;1272     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;1273     SPIx->SR = (uint16_t)~itpos;
000008  43c9              MVNS     r1,r1
00000a  8101              STRH     r1,[r0,#8]
;;;1274   }
00000c  4770              BX       lr
;;;1275   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;987      */
;;;988    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;989    {
;;;990      /* Check the parameters */
;;;991      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;992      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;993      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;994    
;;;995      if (NewState != DISABLE)
;;;996      {
;;;997        /* Enable the selected SPI DMA requests */
;;;998        SPIx->CR2 |= SPI_I2S_DMAReq;
;;;999      }
;;;1000     else
;;;1001     {
;;;1002       /* Disable the selected SPI DMA requests */
;;;1003       SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
000002  8882              LDRH     r2,[r0,#4]
000004  d001              BEQ      |L13.10|
000006  430a              ORRS     r2,r2,r1              ;998
000008  e000              B        |L13.12|
                  |L13.10|
00000a  438a              BICS     r2,r2,r1
                  |L13.12|
00000c  8082              STRH     r2,[r0,#4]            ;998
;;;1004     }
;;;1005   }
00000e  4770              BX       lr
;;;1006   
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;223      */
;;;224    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  4911              LDR      r1,|L14.72|
;;;225    {
000002  b510              PUSH     {r4,lr}
;;;226      /* Check the parameters */
;;;227      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;228    
;;;229      if (SPIx == SPI1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L14.30|
;;;230      {
;;;231        /* Enable SPI1 reset state */
;;;232        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000008  1484              ASRS     r4,r0,#18
00000a  2101              MOVS     r1,#1
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;233        /* Release SPI1 from reset state */
;;;234        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L14.30|
;;;235      }
;;;236      else if (SPIx == SPI2)
00001e  490b              LDR      r1,|L14.76|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L14.42|
;;;237      {
;;;238        /* Enable SPI2 reset state */
;;;239        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000024  2101              MOVS     r1,#1
000026  1404              ASRS     r4,r0,#16
;;;240        /* Release SPI2 from reset state */
;;;241        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000028  e004              B        |L14.52|
                  |L14.42|
;;;242        }
;;;243      else
;;;244      {
;;;245        if (SPIx == SPI3)
00002a  4909              LDR      r1,|L14.80|
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L14.70|
;;;246        {
;;;247          /* Enable SPI3 reset state */
;;;248          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000030  2101              MOVS     r1,#1
000032  13c4              ASRS     r4,r0,#15
                  |L14.52|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;249          /* Release SPI3 from reset state */
;;;250          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00003a  4620              MOV      r0,r4
00003c  e8bd4010          POP      {r4,lr}
000040  2100              MOVS     r1,#0
000042  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L14.70|
;;;251        }
;;;252      }
;;;253    }
000046  bd10              POP      {r4,pc}
;;;254    
                          ENDP

                  |L14.72|
                          DCD      0x40013000
                  |L14.76|
                          DCD      0x40003800
                  |L14.80|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;1140     */
;;;1141   FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;1142   {
;;;1143     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1144     /* Check the parameters */
;;;1145     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1146     assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;1147     
;;;1148     /* Check the status of the specified SPI flag */
;;;1149     if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8912              LDRH     r2,[r2,#8]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L15.12|
;;;1150     {
;;;1151       /* SPI_I2S_FLAG is set */
;;;1152       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L15.12|
;;;1153     }
;;;1154     else
;;;1155     {
;;;1156       /* SPI_I2S_FLAG is reset */
;;;1157       bitstatus = RESET;
;;;1158     }
;;;1159     /* Return the SPI_I2S_FLAG status */
;;;1160     return  bitstatus;
;;;1161   }
00000c  4770              BX       lr
;;;1162   
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;1206     */
;;;1207   ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;1208   {
;;;1209     ITStatus bitstatus = RESET;
;;;1210     uint16_t itpos = 0, itmask = 0, enablestatus = 0;
;;;1211   
;;;1212     /* Check the parameters */
;;;1213     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1214     assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;1215   
;;;1216     /* Get the SPI_I2S_IT index */
;;;1217     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000002  f001040f          AND      r4,r1,#0xf
000006  2201              MOVS     r2,#1
000008  fa02f404          LSL      r4,r2,r4
00000c  2300              MOVS     r3,#0                 ;1209
;;;1218   
;;;1219     /* Get the SPI_I2S_IT IT mask */
;;;1220     itmask = SPI_I2S_IT >> 4;
00000e  0909              LSRS     r1,r1,#4
;;;1221   
;;;1222     /* Set the IT mask */
;;;1223     itmask = 0x01 << itmask;
000010  408a              LSLS     r2,r2,r1
;;;1224   
;;;1225     /* Get the SPI_I2S_IT enable bit status */
;;;1226     enablestatus = (SPIx->CR2 & itmask) ;
000012  8881              LDRH     r1,[r0,#4]
000014  b2a4              UXTH     r4,r4                 ;1217
000016  b292              UXTH     r2,r2                 ;1223
;;;1227   
;;;1228     /* Check the status of the specified SPI interrupt */
;;;1229     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000018  8900              LDRH     r0,[r0,#8]
00001a  4011              ANDS     r1,r1,r2              ;1226
00001c  4220              TST      r0,r4
00001e  d001              BEQ      |L16.36|
000020  b101              CBZ      r1,|L16.36|
;;;1230     {
;;;1231       /* SPI_I2S_IT is set */
;;;1232       bitstatus = SET;
000022  2301              MOVS     r3,#1
                  |L16.36|
;;;1233     }
;;;1234     else
;;;1235     {
;;;1236       /* SPI_I2S_IT is reset */
;;;1237       bitstatus = RESET;
;;;1238     }
;;;1239     /* Return the SPI_I2S_IT status */
;;;1240     return bitstatus;
000024  4618              MOV      r0,r3
;;;1241   }
000026  bd10              POP      {r4,pc}
;;;1242   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;1096     */
;;;1097   void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  0909              LSRS     r1,r1,#4
;;;1098   {
;;;1099     uint16_t itpos = 0, itmask = 0 ;
;;;1100     
;;;1101     /* Check the parameters */
;;;1102     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1103     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1104     assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;1105   
;;;1106     /* Get the SPI IT index */
;;;1107     itpos = SPI_I2S_IT >> 4;
;;;1108   
;;;1109     /* Set the IT mask */
;;;1110     itmask = (uint16_t)1 << (uint16_t)itpos;
000002  2301              MOVS     r3,#1
000004  408b              LSLS     r3,r3,r1
;;;1111   
;;;1112     if (NewState != DISABLE)
000006  2a00              CMP      r2,#0
;;;1113     {
;;;1114       /* Enable the selected SPI interrupt */
;;;1115       SPIx->CR2 |= itmask;
;;;1116     }
;;;1117     else
;;;1118     {
;;;1119       /* Disable the selected SPI interrupt */
;;;1120       SPIx->CR2 &= (uint16_t)~itmask;
000008  8882              LDRH     r2,[r0,#4]
00000a  b299              UXTH     r1,r3                 ;1110
00000c  d001              BEQ      |L17.18|
00000e  430a              ORRS     r2,r2,r1              ;1115
000010  e000              B        |L17.20|
                  |L17.18|
000012  438a              BICS     r2,r2,r1
                  |L17.20|
000014  8082              STRH     r2,[r0,#4]            ;1115
;;;1121     }
;;;1122   }
000016  4770              BX       lr
;;;1123   
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;780      */
;;;781    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  8980              LDRH     r0,[r0,#0xc]
;;;782    {
;;;783      /* Check the parameters */
;;;784      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;785      
;;;786      /* Return the data in the DR register */
;;;787      return SPIx->DR;
;;;788    }
000002  4770              BX       lr
;;;789    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;796      */
;;;797    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;798    {
;;;799      /* Check the parameters */
;;;800      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;801      
;;;802      /* Write in the DR register the data to be sent */
;;;803      SPIx->DR = Data;
;;;804    }
000002  4770              BX       lr
;;;805    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;262      */
;;;263    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;264    {
;;;265      uint16_t tmpreg = 0;
;;;266      
;;;267      /* check the parameters */
;;;268      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;269      
;;;270      /* Check the SPI parameters */
;;;271      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;272      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;273      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;274      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;275      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;276      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;277      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;278      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;279      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;280    
;;;281    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;282      /* Get the SPIx CR1 value */
;;;283      tmpreg = SPIx->CR1;
000002  8802              LDRH     r2,[r0,#0]
;;;284      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;285      tmpreg &= CR1_CLEAR_MASK;
;;;286      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;287         master/salve mode, CPOL and CPHA */
;;;288      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;289      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;290      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;291      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;292      /* Set CPOL bit according to SPI_CPOL value */
;;;293      /* Set CPHA bit according to SPI_CPHA value */
;;;294      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000004  884c              LDRH     r4,[r1,#2]
000006  f4025341          AND      r3,r2,#0x3040         ;285
00000a  880a              LDRH     r2,[r1,#0]
00000c  88cd              LDRH     r5,[r1,#6]
00000e  4322              ORRS     r2,r2,r4
000010  888c              LDRH     r4,[r1,#4]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  890c              LDRH     r4,[r1,#8]
000018  4322              ORRS     r2,r2,r4
00001a  894c              LDRH     r4,[r1,#0xa]
00001c  4322              ORRS     r2,r2,r4
00001e  898c              LDRH     r4,[r1,#0xc]
000020  4322              ORRS     r2,r2,r4
000022  89cc              LDRH     r4,[r1,#0xe]
000024  4322              ORRS     r2,r2,r4
000026  431a              ORRS     r2,r2,r3
;;;295                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;296                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;297                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;298      /* Write to SPIx CR1 */
;;;299      SPIx->CR1 = tmpreg;
000028  8002              STRH     r2,[r0,#0]
;;;300    
;;;301      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;302      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
00002a  8b82              LDRH     r2,[r0,#0x1c]
00002c  f4226200          BIC      r2,r2,#0x800
000030  8382              STRH     r2,[r0,#0x1c]
;;;303    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;304      /* Write to SPIx CRCPOLY */
;;;305      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000032  8a09              LDRH     r1,[r1,#0x10]
000034  8201              STRH     r1,[r0,#0x10]
;;;306    }
000036  bd30              POP      {r4,r5,pc}
;;;307    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;613      */
;;;614    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f5a1427e          SUB      r2,r1,#0xfe00
;;;615    {
;;;616      /* Check the parameters */
;;;617      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;618      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;619      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
;;;620      {
;;;621        /* Set NSS pin internally by software */
;;;622        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
;;;623      }
;;;624      else
;;;625      {
;;;626        /* Reset NSS pin internally by software */
;;;627        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000004  8801              LDRH     r1,[r0,#0]
000006  3aff              SUBS     r2,r2,#0xff           ;619
000008  d002              BEQ      |L21.16|
00000a  f4417180          ORR      r1,r1,#0x100          ;622
00000e  e001              B        |L21.20|
                  |L21.16|
000010  f4217180          BIC      r1,r1,#0x100
                  |L21.20|
000014  8001              STRH     r1,[r0,#0]            ;622
;;;628      }
;;;629    }
000016  4770              BX       lr
;;;630    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;637      */
;;;638    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;639    {
;;;640      /* Check the parameters */
;;;641      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;642      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;643      if (NewState != DISABLE)
;;;644      {
;;;645        /* Enable the selected SPI SS output */
;;;646        SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
;;;647      }
;;;648      else
;;;649      {
;;;650        /* Disable the selected SPI SS output */
;;;651        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L22.12|
000006  f0410104          ORR      r1,r1,#4              ;646
00000a  e001              B        |L22.16|
                  |L22.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L22.16|
000010  8081              STRH     r1,[r0,#4]            ;646
;;;652      }
;;;653    }
000012  4770              BX       lr
;;;654    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;458      */
;;;459    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;460    {
;;;461    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;462      /* Initialize the SPI_Direction member */
;;;463      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;464      /* initialize the SPI_Mode member */
;;;465      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;466      /* initialize the SPI_DataSize member */
;;;467      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;468      /* Initialize the SPI_CPOL member */
;;;469      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;470      /* Initialize the SPI_CPHA member */
;;;471      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;472      /* Initialize the SPI_NSS member */
;;;473      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;474      /* Initialize the SPI_BaudRatePrescaler member */
;;;475      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;476      /* Initialize the SPI_FirstBit member */
;;;477      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;478      /* Initialize the SPI_CRCPolynomial member */
;;;479      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;480    }
000016  4770              BX       lr
;;;481    
                          ENDP


                          AREA ||i.SPI_TIModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_TIModeCmd PROC
;;;668      */
;;;669    void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;670    {
;;;671      /* Check the parameters */
;;;672      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;673      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;674    
;;;675      if (NewState != DISABLE)
;;;676      {
;;;677        /* Enable the TI mode for the selected SPI peripheral */
;;;678        SPIx->CR2 |= SPI_CR2_FRF;
;;;679      }
;;;680      else
;;;681      {
;;;682        /* Disable the TI mode for the selected SPI peripheral */
;;;683        SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L24.12|
000006  f0410110          ORR      r1,r1,#0x10           ;678
00000a  e001              B        |L24.16|
                  |L24.12|
00000c  f0210110          BIC      r1,r1,#0x10
                  |L24.16|
000010  8081              STRH     r1,[r0,#4]            ;678
;;;684      }
;;;685    }
000012  4770              BX       lr
;;;686    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;907      */
;;;908    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;909    {
;;;910      /* Check the parameters */
;;;911      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;912      
;;;913      /* Enable the selected SPI CRC transmission */
;;;914      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;915    }
000008  4770              BX       lr
;;;916    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_spi.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_spi_c_2b928927____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REVSH|
#line 128
|__asm___15_stm32f4xx_spi_c_2b928927____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
