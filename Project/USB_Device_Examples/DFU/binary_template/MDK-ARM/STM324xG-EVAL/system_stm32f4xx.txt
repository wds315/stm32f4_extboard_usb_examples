; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\system_stm32f4xx.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\system_stm32f4xx.crf ..\src\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;347      */
;;;348    static void SetSysClock(void)
000000  4922              LDR      r1,|L1.140|
;;;349    {
;;;350    /******************************************************************************/
;;;351    /*            PLL (clocked by HSE) used as System clock source                */
;;;352    /******************************************************************************/
;;;353      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
;;;354      
;;;355      /* Enable HSE */
;;;356      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  680a              LDR      r2,[r1,#0]
000006  f4423280          ORR      r2,r2,#0x10000
00000a  600a              STR      r2,[r1,#0]
;;;357     
;;;358      /* Wait till HSE is ready and if Time out is reached exit */
;;;359      do
;;;360      {
;;;361        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;362        StartUpCounter++;
;;;363      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
00000c  f44f63a0          MOV      r3,#0x500
                  |L1.16|
000010  680a              LDR      r2,[r1,#0]            ;361
000012  f1000001          ADD      r0,r0,#1              ;362
000016  f4123f00          TST      r2,#0x20000           ;361
00001a  d101              BNE      |L1.32|
00001c  4298              CMP      r0,r3
00001e  d1f7              BNE      |L1.16|
                  |L1.32|
;;;364    
;;;365      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000020  6808              LDR      r0,[r1,#0]
000022  0380              LSLS     r0,r0,#14
000024  d531              BPL      |L1.138|
;;;366      {
;;;367        HSEStatus = (uint32_t)0x01;
;;;368      }
;;;369      else
;;;370      {
;;;371        HSEStatus = (uint32_t)0x00;
;;;372      }
;;;373    
;;;374      if (HSEStatus == (uint32_t)0x01)
;;;375      {
;;;376        /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
;;;377        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000026  4819              LDR      r0,|L1.140|
000028  3040              ADDS     r0,r0,#0x40
00002a  6802              LDR      r2,[r0,#0]
00002c  f0425280          ORR      r2,r2,#0x10000000
000030  6002              STR      r2,[r0,#0]
;;;378        PWR->CR |= PWR_CR_VOS;
000032  4817              LDR      r0,|L1.144|
000034  6802              LDR      r2,[r0,#0]
000036  f4424280          ORR      r2,r2,#0x4000
00003a  6002              STR      r2,[r0,#0]
;;;379    
;;;380        /* HCLK = SYSCLK / 1*/
;;;381        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00003c  4813              LDR      r0,|L1.140|
00003e  3008              ADDS     r0,r0,#8
000040  6802              LDR      r2,[r0,#0]
000042  6002              STR      r2,[r0,#0]
;;;382          
;;;383        /* PCLK2 = HCLK / 2*/
;;;384        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000044  6802              LDR      r2,[r0,#0]
000046  f4424200          ORR      r2,r2,#0x8000
00004a  6002              STR      r2,[r0,#0]
;;;385        
;;;386        /* PCLK1 = HCLK / 4*/
;;;387        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00004c  6802              LDR      r2,[r0,#0]
00004e  f44252a0          ORR      r2,r2,#0x1400
000052  6002              STR      r2,[r0,#0]
;;;388    
;;;389        /* Configure the main PLL */
;;;390        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000054  1f03              SUBS     r3,r0,#4
000056  4a0f              LDR      r2,|L1.148|
000058  601a              STR      r2,[r3,#0]
;;;391                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;392    
;;;393        /* Enable the main PLL */
;;;394        RCC->CR |= RCC_CR_PLLON;
00005a  680a              LDR      r2,[r1,#0]
00005c  f0427280          ORR      r2,r2,#0x1000000
000060  600a              STR      r2,[r1,#0]
                  |L1.98|
;;;395    
;;;396        /* Wait till the main PLL is ready */
;;;397        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000062  680a              LDR      r2,[r1,#0]
000064  0192              LSLS     r2,r2,#6
000066  d5fc              BPL      |L1.98|
;;;398        {
;;;399        }
;;;400       
;;;401        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;402        FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
000068  4a0b              LDR      r2,|L1.152|
00006a  f2406105          MOV      r1,#0x605
00006e  6011              STR      r1,[r2,#0]
;;;403    
;;;404        /* Select the main PLL as system clock source */
;;;405        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000070  6801              LDR      r1,[r0,#0]
000072  f0210103          BIC      r1,r1,#3
000076  6001              STR      r1,[r0,#0]
;;;406        RCC->CFGR |= RCC_CFGR_SW_PLL;
000078  6801              LDR      r1,[r0,#0]
00007a  f0410102          ORR      r1,r1,#2
00007e  6001              STR      r1,[r0,#0]
                  |L1.128|
;;;407    
;;;408        /* Wait till the main PLL is used as system clock source */
;;;409        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000080  6801              LDR      r1,[r0,#0]
000082  f3c10181          UBFX     r1,r1,#2,#2
000086  2902              CMP      r1,#2
000088  d1fa              BNE      |L1.128|
                  |L1.138|
;;;410        {
;;;411        }
;;;412      }
;;;413      else
;;;414      { /* If HSE fails to start-up, the application will have wrong clock
;;;415             configuration. User can add here some code to deal with this error */
;;;416      }
;;;417    
;;;418    }
00008a  4770              BX       lr
;;;419    
                          ENDP

                  |L1.140|
                          DCD      0x40023800
                  |L1.144|
                          DCD      0x40007000
                  |L1.148|
                          DCD      0x07405419
                  |L1.152|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;291      */
;;;292    void SystemCoreClockUpdate(void)
000000  b530              PUSH     {r4,r5,lr}
;;;293    {
;;;294      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;295      
;;;296      /* Get SYSCLK source -------------------------------------------------------*/
;;;297      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4c1b              LDR      r4,|L2.112|
000004  6820              LDR      r0,[r4,#0]
;;;298    
;;;299      switch (tmp)
;;;300      {
;;;301        case 0x00:  /* HSI used as system clock source */
;;;302          SystemCoreClock = HSI_VALUE;
000006  4a1b              LDR      r2,|L2.116|
000008  f010010c          ANDS     r1,r0,#0xc            ;297
00000c  481a              LDR      r0,|L2.120|
00000e  d004              BEQ      |L2.26|
;;;303          break;
;;;304        case 0x04:  /* HSE used as system clock source */
;;;305          SystemCoreClock = HSE_VALUE;
000010  4d1a              LDR      r5,|L2.124|
000012  2904              CMP      r1,#4                 ;299
000014  d003              BEQ      |L2.30|
000016  2908              CMP      r1,#8                 ;299
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  6002              STR      r2,[r0,#0]            ;303  ; SystemCoreClock
00001c  e01d              B        |L2.90|
                  |L2.30|
;;;306          break;
00001e  6005              STR      r5,[r0,#0]  ; SystemCoreClock
000020  e01b              B        |L2.90|
                  |L2.34|
;;;307        case 0x08:  /* PLL used as system clock source */
;;;308    
;;;309          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;310             SYSCLK = PLL_VCO / PLL_P
;;;311             */    
;;;312          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4913              LDR      r1,|L2.112|
000024  1f09              SUBS     r1,r1,#4
000026  680b              LDR      r3,[r1,#0]
000028  f3c35c80          UBFX     r12,r3,#22,#1
;;;313          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  680b              LDR      r3,[r1,#0]
;;;314          
;;;315          if (pllsource != 0)
00002e  f1bc0f00          CMP      r12,#0
000032  f003033f          AND      r3,r3,#0x3f           ;313
000036  d002              BEQ      |L2.62|
;;;316          {
;;;317            /* HSE used as PLL clock source */
;;;318            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000038  fbb5f2f3          UDIV     r2,r5,r3
00003c  e001              B        |L2.66|
                  |L2.62|
;;;319          }
;;;320          else
;;;321          {
;;;322            /* HSI used as PLL clock source */
;;;323            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003e  fbb2f2f3          UDIV     r2,r2,r3
                  |L2.66|
000042  680b              LDR      r3,[r1,#0]
;;;324          }
;;;325    
;;;326          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000044  6809              LDR      r1,[r1,#0]
000046  f3c31388          UBFX     r3,r3,#6,#9           ;323
00004a  435a              MULS     r2,r3,r2              ;323
00004c  f3c14101          UBFX     r1,r1,#16,#2
000050  1c49              ADDS     r1,r1,#1
000052  0049              LSLS     r1,r1,#1
;;;327          SystemCoreClock = pllvco/pllp;
000054  fbb2f1f1          UDIV     r1,r2,r1
000058  6001              STR      r1,[r0,#0]  ; SystemCoreClock
                  |L2.90|
;;;328          break;
;;;329        default:
;;;330          SystemCoreClock = HSI_VALUE;
;;;331          break;
;;;332      }
;;;333      /* Compute HCLK frequency --------------------------------------------------*/
;;;334      /* Get HCLK prescaler */
;;;335      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00005a  6821              LDR      r1,[r4,#0]
00005c  4a06              LDR      r2,|L2.120|
00005e  f3c11103          UBFX     r1,r1,#4,#4
000062  1d12              ADDS     r2,r2,#4
000064  5c51              LDRB     r1,[r2,r1]
;;;336      /* HCLK frequency */
;;;337      SystemCoreClock >>= tmp;
000066  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000068  40ca              LSRS     r2,r2,r1
00006a  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;338    }
00006c  bd30              POP      {r4,r5,pc}
;;;339    
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x40023808
                  |L2.116|
                          DCD      0x00f42400
                  |L2.120|
                          DCD      ||.data||
                  |L2.124|
                          DCD      0x017d7840

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;213      */
;;;214    void SystemInit(void)
000000  4811              LDR      r0,|L3.72|
;;;215    {
000002  b510              PUSH     {r4,lr}
;;;216      /* FPU settings ------------------------------------------------------------*/
;;;217      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;218        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000004  6801              LDR      r1,[r0,#0]
000006  f4410170          ORR      r1,r1,#0xf00000
00000a  6001              STR      r1,[r0,#0]
;;;219      #endif
;;;220    
;;;221      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;222      /* Set HSION bit */
;;;223      RCC->CR |= (uint32_t)0x00000001;
00000c  480f              LDR      r0,|L3.76|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410101          ORR      r1,r1,#1
000014  6001              STR      r1,[r0,#0]
;;;224    
;;;225      /* Reset CFGR register */
;;;226      RCC->CFGR = 0x00000000;
000016  4a0d              LDR      r2,|L3.76|
000018  2100              MOVS     r1,#0
00001a  3208              ADDS     r2,r2,#8
00001c  6011              STR      r1,[r2,#0]
;;;227    
;;;228      /* Reset HSEON, CSSON and PLLON bits */
;;;229      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001e  6802              LDR      r2,[r0,#0]
000020  4b0b              LDR      r3,|L3.80|
000022  401a              ANDS     r2,r2,r3
000024  6002              STR      r2,[r0,#0]
;;;230    
;;;231      /* Reset PLLCFGR register */
;;;232      RCC->PLLCFGR = 0x24003010;
000026  1d03              ADDS     r3,r0,#4
000028  4a0a              LDR      r2,|L3.84|
00002a  601a              STR      r2,[r3,#0]
;;;233    
;;;234      /* Reset HSEBYP bit */
;;;235      RCC->CR &= (uint32_t)0xFFFBFFFF;
00002c  6802              LDR      r2,[r0,#0]
00002e  f4222280          BIC      r2,r2,#0x40000
000032  6002              STR      r2,[r0,#0]
;;;236    
;;;237      /* Disable all interrupts */
;;;238      RCC->CIR = 0x00000000;
000034  4805              LDR      r0,|L3.76|
000036  300c              ADDS     r0,r0,#0xc
000038  6001              STR      r1,[r0,#0]
;;;239    
;;;240    #ifdef DATA_IN_ExtSRAM
;;;241      SystemInit_ExtMemCtl(); 
;;;242    #endif /* DATA_IN_ExtSRAM */
;;;243             
;;;244      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;245         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;246      SetSysClock();
00003a  f7fffffe          BL       SetSysClock
;;;247    
;;;248      /* Configure the Vector Table location add offset address ------------------*/
;;;249    #ifdef VECT_TAB_SRAM
;;;250      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;251    #else
;;;252      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00003e  4902              LDR      r1,|L3.72|
000040  4805              LDR      r0,|L3.88|
000042  3980              SUBS     r1,r1,#0x80
000044  6008              STR      r0,[r1,#0]
;;;253    #endif
;;;254    }
000046  bd10              POP      {r4,pc}
;;;255    
                          ENDP

                  |L3.72|
                          DCD      0xe000ed88
                  |L3.76|
                          DCD      0x40023800
                  |L3.80|
                          DCD      0xfef6ffff
                  |L3.84|
                          DCD      0x24003010
                  |L3.88|
                          DCD      0x0800c000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
