; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_dma.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_dma.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_dma.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;1058     */
;;;1059   void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  4a07              LDR      r2,|L1.32|
;;;1060   {
;;;1061     DMA_TypeDef* DMAy;
;;;1062   
;;;1063     /* Check the parameters */
;;;1064     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1065     assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;1066   
;;;1067     /* Determine the DMA to which belongs the stream */
;;;1068     if (DMAy_Streamx < DMA2_Stream0)
000002  4290              CMP      r0,r2
000004  d201              BCS      |L1.10|
;;;1069     {
;;;1070       /* DMAy_Streamx belongs to DMA1 */
;;;1071       DMAy = DMA1; 
000006  4807              LDR      r0,|L1.36|
000008  e001              B        |L1.14|
                  |L1.10|
;;;1072     } 
;;;1073     else 
;;;1074     {
;;;1075       /* DMAy_Streamx belongs to DMA2 */
;;;1076       DMAy = DMA2; 
00000a  4805              LDR      r0,|L1.32|
00000c  3810              SUBS     r0,r0,#0x10
                  |L1.14|
;;;1077     }
;;;1078   
;;;1079     /* Check if LIFCR or HIFCR register is targeted */
;;;1080     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1081     {
;;;1082       /* Set DMAy HIFCR register clear flag bits */
;;;1083       DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
00000e  4a06              LDR      r2,|L1.40|
000010  008b              LSLS     r3,r1,#2              ;1076
000012  ea010102          AND      r1,r1,r2
000016  d501              BPL      |L1.28|
000018  60c1              STR      r1,[r0,#0xc]
;;;1084     }
;;;1085     else 
;;;1086     {
;;;1087       /* Set DMAy LIFCR register clear flag bits */
;;;1088       DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
;;;1089     }    
;;;1090   }
00001a  4770              BX       lr
                  |L1.28|
00001c  6081              STR      r1,[r0,#8]            ;1088
00001e  4770              BX       lr
;;;1091   
                          ENDP

                  |L1.32|
                          DCD      0x40026410
                  |L1.36|
                          DCD      0x40026000
                  |L1.40|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;1239     */
;;;1240   void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  4a07              LDR      r2,|L2.32|
;;;1241   {
;;;1242     DMA_TypeDef* DMAy;
;;;1243   
;;;1244     /* Check the parameters */
;;;1245     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1246     assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;1247   
;;;1248     /* Determine the DMA to which belongs the stream */
;;;1249     if (DMAy_Streamx < DMA2_Stream0)
000002  4290              CMP      r0,r2
000004  d201              BCS      |L2.10|
;;;1250     {
;;;1251       /* DMAy_Streamx belongs to DMA1 */
;;;1252       DMAy = DMA1; 
000006  4807              LDR      r0,|L2.36|
000008  e001              B        |L2.14|
                  |L2.10|
;;;1253     } 
;;;1254     else 
;;;1255     {
;;;1256       /* DMAy_Streamx belongs to DMA2 */
;;;1257       DMAy = DMA2; 
00000a  4805              LDR      r0,|L2.32|
00000c  3810              SUBS     r0,r0,#0x10
                  |L2.14|
;;;1258     }
;;;1259   
;;;1260     /* Check if LIFCR or HIFCR register is targeted */
;;;1261     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1262     {
;;;1263       /* Set DMAy HIFCR register clear interrupt bits */
;;;1264       DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
00000e  4a06              LDR      r2,|L2.40|
000010  008b              LSLS     r3,r1,#2              ;1257
000012  ea010102          AND      r1,r1,r2
000016  d501              BPL      |L2.28|
000018  60c1              STR      r1,[r0,#0xc]
;;;1265     }
;;;1266     else 
;;;1267     {
;;;1268       /* Set DMAy LIFCR register clear interrupt bits */
;;;1269       DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
;;;1270     }   
;;;1271   }
00001a  4770              BX       lr
                  |L2.28|
00001c  6081              STR      r1,[r0,#8]            ;1269
00001e  4770              BX       lr
;;;1272   
                          ENDP

                  |L2.32|
                          DCD      0x40026410
                  |L2.36|
                          DCD      0x40026000
                  |L2.40|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;475      */
;;;476    void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;477    {
;;;478      /* Check the parameters */
;;;479      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;480      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;481    
;;;482      if (NewState != DISABLE)
;;;483      {
;;;484        /* Enable the selected DMAy Streamx by setting EN bit */
;;;485        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
;;;486      }
;;;487      else
;;;488      {
;;;489        /* Disable the selected DMAy Streamx by clearing EN bit */
;;;490        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;485
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L3.16|
000010  6001              STR      r1,[r0,#0]            ;485
;;;491      }
;;;492    }
000012  4770              BX       lr
;;;493    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;193      */
;;;194    void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;195    {
;;;196      /* Check the parameters */
;;;197      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;198    
;;;199      /* Disable the selected DMAy Streamx */
;;;200      DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
000004  6801              LDR      r1,[r0,#0]
000006  f0210101          BIC      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;201    
;;;202      /* Reset DMAy Streamx control register */
;;;203      DMAy_Streamx->CR  = 0;
00000c  2100              MOVS     r1,#0
00000e  6001              STR      r1,[r0,#0]
;;;204      
;;;205      /* Reset DMAy Streamx Number of Data to Transfer register */
;;;206      DMAy_Streamx->NDTR = 0;
000010  6041              STR      r1,[r0,#4]
;;;207      
;;;208      /* Reset DMAy Streamx peripheral address register */
;;;209      DMAy_Streamx->PAR  = 0;
000012  6081              STR      r1,[r0,#8]
;;;210      
;;;211      /* Reset DMAy Streamx memory 0 address register */
;;;212      DMAy_Streamx->M0AR = 0;
000014  60c1              STR      r1,[r0,#0xc]
;;;213    
;;;214      /* Reset DMAy Streamx memory 1 address register */
;;;215      DMAy_Streamx->M1AR = 0;
000016  6101              STR      r1,[r0,#0x10]
;;;216    
;;;217      /* Reset DMAy Streamx FIFO control register */
;;;218      DMAy_Streamx->FCR = (uint32_t)0x00000021; 
000018  2121              MOVS     r1,#0x21
00001a  6141              STR      r1,[r0,#0x14]
;;;219    
;;;220      /* Reset interrupt pending bits for the selected stream */
;;;221      if (DMAy_Streamx == DMA1_Stream0)
;;;222      {
;;;223        /* Reset interrupt pending bits for DMA1 Stream0 */
;;;224        DMA1->LIFCR = DMA_Stream0_IT_MASK;
00001c  493c              LDR      r1,|L4.272|
00001e  4b3c              LDR      r3,|L4.272|
000020  223d              MOVS     r2,#0x3d
000022  3910              SUBS     r1,r1,#0x10
000024  4298              CMP      r0,r3                 ;221
000026  d102              BNE      |L4.46|
000028  608a              STR      r2,[r1,#8]
                  |L4.42|
;;;225      }
;;;226      else if (DMAy_Streamx == DMA1_Stream1)
;;;227      {
;;;228        /* Reset interrupt pending bits for DMA1 Stream1 */
;;;229        DMA1->LIFCR = DMA_Stream1_IT_MASK;
;;;230      }
;;;231      else if (DMAy_Streamx == DMA1_Stream2)
;;;232      {
;;;233        /* Reset interrupt pending bits for DMA1 Stream2 */
;;;234        DMA1->LIFCR = DMA_Stream2_IT_MASK;
;;;235      }
;;;236      else if (DMAy_Streamx == DMA1_Stream3)
;;;237      {
;;;238        /* Reset interrupt pending bits for DMA1 Stream3 */
;;;239        DMA1->LIFCR = DMA_Stream3_IT_MASK;
;;;240      }
;;;241      else if (DMAy_Streamx == DMA1_Stream4)
;;;242      {
;;;243        /* Reset interrupt pending bits for DMA1 Stream4 */
;;;244        DMA1->HIFCR = DMA_Stream4_IT_MASK;
;;;245      }
;;;246      else if (DMAy_Streamx == DMA1_Stream5)
;;;247      {
;;;248        /* Reset interrupt pending bits for DMA1 Stream5 */
;;;249        DMA1->HIFCR = DMA_Stream5_IT_MASK;
;;;250      }
;;;251      else if (DMAy_Streamx == DMA1_Stream6)
;;;252      {
;;;253        /* Reset interrupt pending bits for DMA1 Stream6 */
;;;254        DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
;;;255      }
;;;256      else if (DMAy_Streamx == DMA1_Stream7)
;;;257      {
;;;258        /* Reset interrupt pending bits for DMA1 Stream7 */
;;;259        DMA1->HIFCR = DMA_Stream7_IT_MASK;
;;;260      }
;;;261      else if (DMAy_Streamx == DMA2_Stream0)
;;;262      {
;;;263        /* Reset interrupt pending bits for DMA2 Stream0 */
;;;264        DMA2->LIFCR = DMA_Stream0_IT_MASK;
;;;265      }
;;;266      else if (DMAy_Streamx == DMA2_Stream1)
;;;267      {
;;;268        /* Reset interrupt pending bits for DMA2 Stream1 */
;;;269        DMA2->LIFCR = DMA_Stream1_IT_MASK;
;;;270      }
;;;271      else if (DMAy_Streamx == DMA2_Stream2)
;;;272      {
;;;273        /* Reset interrupt pending bits for DMA2 Stream2 */
;;;274        DMA2->LIFCR = DMA_Stream2_IT_MASK;
;;;275      }
;;;276      else if (DMAy_Streamx == DMA2_Stream3)
;;;277      {
;;;278        /* Reset interrupt pending bits for DMA2 Stream3 */
;;;279        DMA2->LIFCR = DMA_Stream3_IT_MASK;
;;;280      }
;;;281      else if (DMAy_Streamx == DMA2_Stream4)
;;;282      {
;;;283        /* Reset interrupt pending bits for DMA2 Stream4 */
;;;284        DMA2->HIFCR = DMA_Stream4_IT_MASK;
;;;285      }
;;;286      else if (DMAy_Streamx == DMA2_Stream5)
;;;287      {
;;;288        /* Reset interrupt pending bits for DMA2 Stream5 */
;;;289        DMA2->HIFCR = DMA_Stream5_IT_MASK;
;;;290      }
;;;291      else if (DMAy_Streamx == DMA2_Stream6)
;;;292      {
;;;293        /* Reset interrupt pending bits for DMA2 Stream6 */
;;;294        DMA2->HIFCR = DMA_Stream6_IT_MASK;
;;;295      }
;;;296      else 
;;;297      {
;;;298        if (DMAy_Streamx == DMA2_Stream7)
;;;299        {
;;;300          /* Reset interrupt pending bits for DMA2 Stream7 */
;;;301          DMA2->HIFCR = DMA_Stream7_IT_MASK;
;;;302        }
;;;303      }
;;;304    }
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.46|
00002e  4c38              LDR      r4,|L4.272|
000030  f44f6374          MOV      r3,#0xf40             ;229
000034  3418              ADDS     r4,r4,#0x18           ;226
000036  42a0              CMP      r0,r4                 ;226
000038  d101              BNE      |L4.62|
00003a  608b              STR      r3,[r1,#8]            ;229
00003c  e7f5              B        |L4.42|
                  |L4.62|
00003e  4d34              LDR      r5,|L4.272|
000040  f44f1474          MOV      r4,#0x3d0000          ;234
000044  3530              ADDS     r5,r5,#0x30           ;231
000046  42a8              CMP      r0,r5                 ;231
000048  d101              BNE      |L4.78|
00004a  608c              STR      r4,[r1,#8]            ;234
00004c  e7ed              B        |L4.42|
                  |L4.78|
00004e  4e30              LDR      r6,|L4.272|
000050  f04f6574          MOV      r5,#0xf400000         ;239
000054  3648              ADDS     r6,r6,#0x48           ;236
000056  42b0              CMP      r0,r6                 ;236
000058  d101              BNE      |L4.94|
00005a  608d              STR      r5,[r1,#8]            ;239
00005c  e7e5              B        |L4.42|
                  |L4.94|
00005e  4f2c              LDR      r7,|L4.272|
000060  4e2c              LDR      r6,|L4.276|
000062  3760              ADDS     r7,r7,#0x60           ;241
000064  42b8              CMP      r0,r7                 ;241
000066  d101              BNE      |L4.108|
000068  60ce              STR      r6,[r1,#0xc]          ;244
00006a  e7de              B        |L4.42|
                  |L4.108|
00006c  4f28              LDR      r7,|L4.272|
00006e  f8dfc0a8          LDR      r12,|L4.280|
000072  3778              ADDS     r7,r7,#0x78           ;246
000074  42b8              CMP      r0,r7                 ;246
000076  d102              BNE      |L4.126|
000078  f8c1c00c          STR      r12,[r1,#0xc]         ;249
00007c  e7d5              B        |L4.42|
                  |L4.126|
00007e  4f24              LDR      r7,|L4.272|
000080  f8df8098          LDR      r8,|L4.284|
000084  3790              ADDS     r7,r7,#0x90           ;251
000086  42b8              CMP      r0,r7                 ;251
000088  d102              BNE      |L4.144|
00008a  f8c1800c          STR      r8,[r1,#0xc]          ;254
00008e  e7cc              B        |L4.42|
                  |L4.144|
000090  4f1f              LDR      r7,|L4.272|
000092  f04f593d          MOV      r9,#0x2f400000        ;259
000096  37a8              ADDS     r7,r7,#0xa8           ;256
000098  42b8              CMP      r0,r7                 ;256
00009a  d102              BNE      |L4.162|
00009c  f8c1900c          STR      r9,[r1,#0xc]          ;259
0000a0  e7c3              B        |L4.42|
                  |L4.162|
0000a2  491f              LDR      r1,|L4.288|
0000a4  4f1e              LDR      r7,|L4.288|
0000a6  3908              SUBS     r1,r1,#8              ;264
0000a8  42b8              CMP      r0,r7                 ;261
0000aa  d101              BNE      |L4.176|
0000ac  600a              STR      r2,[r1,#0]            ;264
0000ae  e7bc              B        |L4.42|
                  |L4.176|
0000b0  4a1b              LDR      r2,|L4.288|
0000b2  3218              ADDS     r2,r2,#0x18           ;266
0000b4  4290              CMP      r0,r2                 ;266
0000b6  d101              BNE      |L4.188|
0000b8  600b              STR      r3,[r1,#0]            ;269
0000ba  e7b6              B        |L4.42|
                  |L4.188|
0000bc  4a18              LDR      r2,|L4.288|
0000be  3230              ADDS     r2,r2,#0x30           ;271
0000c0  4290              CMP      r0,r2                 ;271
0000c2  d101              BNE      |L4.200|
0000c4  600c              STR      r4,[r1,#0]            ;274
0000c6  e7b0              B        |L4.42|
                  |L4.200|
0000c8  4a15              LDR      r2,|L4.288|
0000ca  3248              ADDS     r2,r2,#0x48           ;276
0000cc  4290              CMP      r0,r2                 ;276
0000ce  d101              BNE      |L4.212|
0000d0  600d              STR      r5,[r1,#0]            ;279
0000d2  e7aa              B        |L4.42|
                  |L4.212|
0000d4  4a12              LDR      r2,|L4.288|
0000d6  4912              LDR      r1,|L4.288|
0000d8  3260              ADDS     r2,r2,#0x60           ;281
0000da  1f09              SUBS     r1,r1,#4              ;284
0000dc  4290              CMP      r0,r2                 ;281
0000de  d101              BNE      |L4.228|
0000e0  600e              STR      r6,[r1,#0]            ;284
0000e2  e7a2              B        |L4.42|
                  |L4.228|
0000e4  4a0e              LDR      r2,|L4.288|
0000e6  3278              ADDS     r2,r2,#0x78           ;286
0000e8  4290              CMP      r0,r2                 ;286
0000ea  d102              BNE      |L4.242|
0000ec  f8c1c000          STR      r12,[r1,#0]           ;289
0000f0  e79b              B        |L4.42|
                  |L4.242|
0000f2  4a0b              LDR      r2,|L4.288|
0000f4  3290              ADDS     r2,r2,#0x90           ;291
0000f6  4290              CMP      r0,r2                 ;291
0000f8  d102              BNE      |L4.256|
0000fa  f8c18000          STR      r8,[r1,#0]            ;294
0000fe  e794              B        |L4.42|
                  |L4.256|
000100  4a07              LDR      r2,|L4.288|
000102  32a8              ADDS     r2,r2,#0xa8           ;298
000104  4290              CMP      r0,r2                 ;298
000106  d190              BNE      |L4.42|
000108  f8c19000          STR      r9,[r1,#0]            ;301
00010c  e78d              B        |L4.42|
;;;305    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
                          DCD      0x40026010
                  |L4.276|
                          DCD      0x2000003d
                  |L4.280|
                          DCD      0x20000f40
                  |L4.284|
                          DCD      0x203d0000
                  |L4.288|
                          DCD      0x40026410

                          AREA ||i.DMA_DoubleBufferModeCmd||, CODE, READONLY, ALIGN=1

                  DMA_DoubleBufferModeCmd PROC
;;;754      */
;;;755    void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;756    {  
;;;757      /* Check the parameters */
;;;758      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;759      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;760    
;;;761      /* Configure the Double Buffer mode */
;;;762      if (NewState != DISABLE)
;;;763      {
;;;764        /* Enable the Double buffer mode */
;;;765        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
;;;766      }
;;;767      else
;;;768      {
;;;769        /* Disable the Double buffer mode */
;;;770        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L5.12|
000006  f4412180          ORR      r1,r1,#0x40000        ;765
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4212180          BIC      r1,r1,#0x40000
                  |L5.16|
000010  6001              STR      r1,[r0,#0]            ;765
;;;771      }
;;;772    }
000012  4770              BX       lr
;;;773    
                          ENDP


                          AREA ||i.DMA_DoubleBufferModeConfig||, CODE, READONLY, ALIGN=1

                  DMA_DoubleBufferModeConfig PROC
;;;723      */
;;;724    void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
000000  2a00              CMP      r2,#0
;;;725                                    uint32_t DMA_CurrentMemory)
;;;726    {  
;;;727      /* Check the parameters */
;;;728      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;729      assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
;;;730    
;;;731      if (DMA_CurrentMemory != DMA_Memory_0)
;;;732      {
;;;733        /* Set Memory 1 as current memory address */
;;;734        DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
;;;735      }
;;;736      else
;;;737      {
;;;738        /* Set Memory 0 as current memory address */
;;;739        DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
000002  6802              LDR      r2,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f4422200          ORR      r2,r2,#0x80000        ;734
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f4222200          BIC      r2,r2,#0x80000
                  |L6.16|
000010  6002              STR      r2,[r0,#0]
;;;740      }
;;;741    
;;;742      /* Write to DMAy Streamx M1AR */
;;;743      DMAy_Streamx->M1AR = Memory1BaseAddr;
000012  6101              STR      r1,[r0,#0x10]
;;;744    }
000014  4770              BX       lr
;;;745    
                          ENDP


                          AREA ||i.DMA_FlowControllerConfig||, CODE, READONLY, ALIGN=1

                  DMA_FlowControllerConfig PROC
;;;547      */
;;;548    void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
000000  2900              CMP      r1,#0
;;;549    {
;;;550      /* Check the parameters */
;;;551      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;552      assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
;;;553    
;;;554      /* Check the needed flow controller  */
;;;555      if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
;;;556      {
;;;557        /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
;;;558        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
;;;559      }
;;;560      else
;;;561      {
;;;562        /* Clear the PFCTRL bit: Memory is the flow controller */
;;;563        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  f0410120          ORR      r1,r1,#0x20           ;558
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210120          BIC      r1,r1,#0x20
                  |L7.16|
000010  6001              STR      r1,[r0,#0]            ;558
;;;564      }
;;;565    }
000012  4770              BX       lr
;;;566    /**
                          ENDP


                          AREA ||i.DMA_GetCmdStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetCmdStatus PROC
;;;930      */
;;;931    FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  4601              MOV      r1,r0
;;;932    {
;;;933      FunctionalState state = DISABLE;
000002  2000              MOVS     r0,#0
;;;934    
;;;935      /* Check the parameters */
;;;936      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;937    
;;;938      if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
000004  6809              LDR      r1,[r1,#0]
000006  07c9              LSLS     r1,r1,#31
000008  d000              BEQ      |L8.12|
;;;939      {
;;;940        /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
;;;941        state = ENABLE;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;942      }
;;;943      else
;;;944      {
;;;945        /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
;;;946            all transfers are complete) */
;;;947        state = DISABLE;
;;;948      }
;;;949      return state;
;;;950    }
00000c  4770              BX       lr
;;;951    
                          ENDP


                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;646      */
;;;647    uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
000000  6840              LDR      r0,[r0,#4]
;;;648    {
;;;649      /* Check the parameters */
;;;650      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;651    
;;;652      /* Return the number of remaining data units for DMAy Streamx */
;;;653      return ((uint16_t)(DMAy_Streamx->NDTR));
000002  b280              UXTH     r0,r0
;;;654    }
000004  4770              BX       lr
;;;655    /**
                          ENDP


                          AREA ||i.DMA_GetCurrentMemoryTarget||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrentMemoryTarget PROC
;;;821      */
;;;822    uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
000000  4601              MOV      r1,r0
;;;823    {
;;;824      uint32_t tmp = 0;
000002  2000              MOVS     r0,#0
;;;825      
;;;826      /* Check the parameters */
;;;827      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;828    
;;;829      /* Get the current memory target */
;;;830      if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
000004  6809              LDR      r1,[r1,#0]
000006  0309              LSLS     r1,r1,#12
000008  d500              BPL      |L10.12|
;;;831      {
;;;832        /* Current memory buffer used is Memory 1 */
;;;833        tmp = 1;
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;834      }  
;;;835      else
;;;836      {
;;;837        /* Current memory buffer used is Memory 0 */
;;;838        tmp = 0;    
;;;839      }
;;;840      return tmp;
;;;841    }
00000c  4770              BX       lr
;;;842    /**
                          ENDP


                          AREA ||i.DMA_GetFIFOStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetFIFOStatus PROC
;;;964      */
;;;965    uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  6940              LDR      r0,[r0,#0x14]
;;;966    {
;;;967      uint32_t tmpreg = 0;
;;;968     
;;;969      /* Check the parameters */
;;;970      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;971      
;;;972      /* Get the FIFO level bits */
;;;973      tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
000002  f0000038          AND      r0,r0,#0x38
;;;974      
;;;975      return tmpreg;
;;;976    }
000006  4770              BX       lr
;;;977    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;991      */
;;;992    FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  4602              MOV      r2,r0
;;;993    {
;;;994      FlagStatus bitstatus = RESET;
;;;995      DMA_TypeDef* DMAy;
;;;996      uint32_t tmpreg = 0;
;;;997    
;;;998      /* Check the parameters */
;;;999      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1000     assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;1001   
;;;1002     /* Determine the DMA to which belongs the stream */
;;;1003     if (DMAy_Streamx < DMA2_Stream0)
000002  4b09              LDR      r3,|L12.40|
000004  2000              MOVS     r0,#0                 ;994
000006  429a              CMP      r2,r3
000008  d201              BCS      |L12.14|
;;;1004     {
;;;1005       /* DMAy_Streamx belongs to DMA1 */
;;;1006       DMAy = DMA1; 
00000a  4a08              LDR      r2,|L12.44|
00000c  e001              B        |L12.18|
                  |L12.14|
;;;1007     } 
;;;1008     else 
;;;1009     {
;;;1010       /* DMAy_Streamx belongs to DMA2 */
;;;1011       DMAy = DMA2; 
00000e  4a06              LDR      r2,|L12.40|
000010  3a10              SUBS     r2,r2,#0x10
                  |L12.18|
000012  008b              LSLS     r3,r1,#2
;;;1012     }
;;;1013   
;;;1014     /* Check if the flag is in HISR or LISR */
;;;1015     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
000014  d501              BPL      |L12.26|
;;;1016     {
;;;1017       /* Get DMAy HISR register value */
;;;1018       tmpreg = DMAy->HISR;
000016  6852              LDR      r2,[r2,#4]
000018  e000              B        |L12.28|
                  |L12.26|
;;;1019     }
;;;1020     else
;;;1021     {
;;;1022       /* Get DMAy LISR register value */
;;;1023       tmpreg = DMAy->LISR;
00001a  6812              LDR      r2,[r2,#0]
                  |L12.28|
;;;1024     }   
;;;1025    
;;;1026     /* Mask the reserved bits */
;;;1027     tmpreg &= (uint32_t)RESERVED_MASK;
00001c  4b04              LDR      r3,|L12.48|
00001e  401a              ANDS     r2,r2,r3
;;;1028   
;;;1029     /* Check the status of the specified DMA flag */
;;;1030     if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
000020  420a              TST      r2,r1
000022  d000              BEQ      |L12.38|
;;;1031     {
;;;1032       /* DMA_FLAG is set */
;;;1033       bitstatus = SET;
000024  2001              MOVS     r0,#1
                  |L12.38|
;;;1034     }
;;;1035     else
;;;1036     {
;;;1037       /* DMA_FLAG is reset */
;;;1038       bitstatus = RESET;
;;;1039     }
;;;1040   
;;;1041     /* Return the DMA_FLAG status */
;;;1042     return  bitstatus;
;;;1043   }
000026  4770              BX       lr
;;;1044   
                          ENDP

                  |L12.40|
                          DCD      0x40026410
                  |L12.44|
                          DCD      0x40026000
                  |L12.48|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;1157     */
;;;1158   ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  b510              PUSH     {r4,lr}
;;;1159   {
;;;1160     ITStatus bitstatus = RESET;
;;;1161     DMA_TypeDef* DMAy;
;;;1162     uint32_t tmpreg = 0, enablestatus = 0;
;;;1163   
;;;1164     /* Check the parameters */
;;;1165     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1166     assert_param(IS_DMA_GET_IT(DMA_IT));
;;;1167    
;;;1168     /* Determine the DMA to which belongs the stream */
;;;1169     if (DMAy_Streamx < DMA2_Stream0)
000002  4a11              LDR      r2,|L13.72|
000004  2400              MOVS     r4,#0                 ;1160
000006  4290              CMP      r0,r2
000008  d201              BCS      |L13.14|
;;;1170     {
;;;1171       /* DMAy_Streamx belongs to DMA1 */
;;;1172       DMAy = DMA1; 
00000a  4a10              LDR      r2,|L13.76|
00000c  e001              B        |L13.18|
                  |L13.14|
;;;1173     } 
;;;1174     else 
;;;1175     {
;;;1176       /* DMAy_Streamx belongs to DMA2 */
;;;1177       DMAy = DMA2; 
00000e  4a0e              LDR      r2,|L13.72|
000010  3a10              SUBS     r2,r2,#0x10
                  |L13.18|
;;;1178     }
;;;1179   
;;;1180     /* Check if the interrupt enable bit is in the CR or FCR register */
;;;1181     if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
000012  4b0f              LDR      r3,|L13.80|
000014  4219              TST      r1,r3
000016  d006              BEQ      |L13.38|
;;;1182     {
;;;1183       /* Get the interrupt enable position mask in CR register */
;;;1184       tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
000018  231e              MOVS     r3,#0x1e
00001a  ea032cd1          AND      r12,r3,r1,LSR #11
;;;1185       
;;;1186       /* Check the enable bit in CR register */
;;;1187       enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
00001e  6803              LDR      r3,[r0,#0]
000020  ea03030c          AND      r3,r3,r12
000024  e002              B        |L13.44|
                  |L13.38|
;;;1188     }
;;;1189     else 
;;;1190     {
;;;1191       /* Check the enable bit in FCR register */
;;;1192       enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
000026  6940              LDR      r0,[r0,#0x14]
000028  f0000380          AND      r3,r0,#0x80
                  |L13.44|
00002c  0088              LSLS     r0,r1,#2
;;;1193     }
;;;1194    
;;;1195     /* Check if the interrupt pending flag is in LISR or HISR */
;;;1196     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
00002e  d501              BPL      |L13.52|
;;;1197     {
;;;1198       /* Get DMAy HISR register value */
;;;1199       tmpreg = DMAy->HISR ;
000030  6850              LDR      r0,[r2,#4]
000032  e000              B        |L13.54|
                  |L13.52|
;;;1200     }
;;;1201     else
;;;1202     {
;;;1203       /* Get DMAy LISR register value */
;;;1204       tmpreg = DMAy->LISR ;
000034  6810              LDR      r0,[r2,#0]
                  |L13.54|
;;;1205     } 
;;;1206   
;;;1207     /* mask all reserved bits */
;;;1208     tmpreg &= (uint32_t)RESERVED_MASK;
000036  4a07              LDR      r2,|L13.84|
000038  4010              ANDS     r0,r0,r2
;;;1209   
;;;1210     /* Check the status of the specified DMA interrupt */
;;;1211     if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
00003a  4208              TST      r0,r1
00003c  d001              BEQ      |L13.66|
00003e  b103              CBZ      r3,|L13.66|
;;;1212     {
;;;1213       /* DMA_IT is set */
;;;1214       bitstatus = SET;
000040  2401              MOVS     r4,#1
                  |L13.66|
;;;1215     }
;;;1216     else
;;;1217     {
;;;1218       /* DMA_IT is reset */
;;;1219       bitstatus = RESET;
;;;1220     }
;;;1221   
;;;1222     /* Return the DMA_IT status */
;;;1223     return  bitstatus;
000042  4620              MOV      r0,r4
;;;1224   }
000044  bd10              POP      {r4,pc}
;;;1225   
                          ENDP

000046  0000              DCW      0x0000
                  |L13.72|
                          DCD      0x40026410
                  |L13.76|
                          DCD      0x40026000
                  |L13.80|
                          DCD      0x0f3c0f3c
                  |L13.84|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;1105     */
;;;1106   void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
000000  060b              LSLS     r3,r1,#24
;;;1107   {
;;;1108     /* Check the parameters */
;;;1109     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1110     assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;1111     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1112   
;;;1113     /* Check if the DMA_IT parameter contains a FIFO interrupt */
;;;1114     if ((DMA_IT & DMA_IT_FE) != 0)
000002  d507              BPL      |L14.20|
;;;1115     {
;;;1116       if (NewState != DISABLE)
;;;1117       {
;;;1118         /* Enable the selected DMA FIFO interrupts */
;;;1119         DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
;;;1120       }    
;;;1121       else 
;;;1122       {
;;;1123         /* Disable the selected DMA FIFO interrupts */
;;;1124         DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
000004  6943              LDR      r3,[r0,#0x14]
000006  b112              CBZ      r2,|L14.14|
000008  f0430380          ORR      r3,r3,#0x80           ;1119
00000c  e001              B        |L14.18|
                  |L14.14|
00000e  f0230380          BIC      r3,r3,#0x80
                  |L14.18|
000012  6143              STR      r3,[r0,#0x14]         ;1119
                  |L14.20|
;;;1125       }
;;;1126     }
;;;1127   
;;;1128     /* Check if the DMA_IT parameter contains a Transfer interrupt */
;;;1129     if (DMA_IT != DMA_IT_FE)
000014  2980              CMP      r1,#0x80
000016  d008              BEQ      |L14.42|
;;;1130     {
;;;1131       if (NewState != DISABLE)
000018  2a00              CMP      r2,#0
;;;1132       {
;;;1133         /* Enable the selected DMA transfer interrupts */
;;;1134         DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
;;;1135       }
;;;1136       else
;;;1137       {
;;;1138         /* Disable the selected DMA transfer interrupts */
;;;1139         DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
00001a  6802              LDR      r2,[r0,#0]
00001c  f001011e          AND      r1,r1,#0x1e           ;1134
000020  d001              BEQ      |L14.38|
000022  430a              ORRS     r2,r2,r1              ;1134
000024  e000              B        |L14.40|
                  |L14.38|
000026  438a              BICS     r2,r2,r1
                  |L14.40|
000028  6002              STR      r2,[r0,#0]
                  |L14.42|
;;;1140       }    
;;;1141     }
;;;1142   }
00002a  4770              BX       lr
;;;1143   
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;316      */
;;;317    void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;318    {
;;;319      uint32_t tmpreg = 0;
;;;320    
;;;321      /* Check the parameters */
;;;322      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;323      assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
;;;324      assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
;;;325      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;326      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;327      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;328      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;329      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;330      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;331      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;332      assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
;;;333      assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
;;;334      assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
;;;335      assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
;;;336    
;;;337      /*------------------------- DMAy Streamx CR Configuration ------------------*/
;;;338      /* Get the DMAy_Streamx CR value */
;;;339      tmpreg = DMAy_Streamx->CR;
000002  6803              LDR      r3,[r0,#0]
;;;340    
;;;341      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;342      tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
000004  4a12              LDR      r2,|L15.80|
;;;343                             DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
;;;344                             DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
;;;345                             DMA_SxCR_DIR));
;;;346    
;;;347      /* Configure DMAy Streamx: */
;;;348      /* Set CHSEL bits according to DMA_CHSEL value */
;;;349      /* Set DIR bits according to DMA_DIR value */
;;;350      /* Set PINC bit according to DMA_PeripheralInc value */
;;;351      /* Set MINC bit according to DMA_MemoryInc value */
;;;352      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;353      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;354      /* Set CIRC bit according to DMA_Mode value */
;;;355      /* Set PL bits according to DMA_Priority value */
;;;356      /* Set MBURST bits according to DMA_MemoryBurst value */
;;;357      /* Set PBURST bits according to DMA_PeripheralBurst value */
;;;358      tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
000006  68cc              LDR      r4,[r1,#0xc]
000008  4013              ANDS     r3,r3,r2              ;342
00000a  680a              LDR      r2,[r1,#0]
00000c  4322              ORRS     r2,r2,r4
00000e  e9d14505          LDRD     r4,r5,[r1,#0x14]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  69cc              LDR      r4,[r1,#0x1c]
000018  4322              ORRS     r2,r2,r4
00001a  6a0c              LDR      r4,[r1,#0x20]
00001c  4322              ORRS     r2,r2,r4
00001e  6a4c              LDR      r4,[r1,#0x24]
000020  4322              ORRS     r2,r2,r4
000022  6a8c              LDR      r4,[r1,#0x28]
000024  4322              ORRS     r2,r2,r4
000026  6b4c              LDR      r4,[r1,#0x34]
000028  4322              ORRS     r2,r2,r4
00002a  6b8c              LDR      r4,[r1,#0x38]
00002c  4322              ORRS     r2,r2,r4
00002e  431a              ORRS     r2,r2,r3
;;;359                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;360                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;361                DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
;;;362                DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
;;;363    
;;;364      /* Write to DMAy Streamx CR register */
;;;365      DMAy_Streamx->CR = tmpreg;
000030  6002              STR      r2,[r0,#0]
;;;366    
;;;367      /*------------------------- DMAy Streamx FCR Configuration -----------------*/
;;;368      /* Get the DMAy_Streamx FCR value */
;;;369      tmpreg = DMAy_Streamx->FCR;
000032  6942              LDR      r2,[r0,#0x14]
;;;370    
;;;371      /* Clear DMDIS and FTH bits */
;;;372      tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
000034  f0220307          BIC      r3,r2,#7
000038  e9d1240b          LDRD     r2,r4,[r1,#0x2c]
;;;373    
;;;374      /* Configure DMAy Streamx FIFO: 
;;;375        Set DMDIS bits according to DMA_FIFOMode value 
;;;376        Set FTH bits according to DMA_FIFOThreshold value */
;;;377      tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
00003c  4322              ORRS     r2,r2,r4
00003e  431a              ORRS     r2,r2,r3
;;;378    
;;;379      /* Write to DMAy Streamx CR */
;;;380      DMAy_Streamx->FCR = tmpreg;
000040  6142              STR      r2,[r0,#0x14]
;;;381    
;;;382      /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
;;;383      /* Write to DMAy Streamx NDTR register */
;;;384      DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
000042  690a              LDR      r2,[r1,#0x10]
000044  6042              STR      r2,[r0,#4]
;;;385    
;;;386      /*------------------------- DMAy Streamx PAR Configuration -----------------*/
;;;387      /* Write to DMAy Streamx PAR */
;;;388      DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000046  684a              LDR      r2,[r1,#4]
000048  6082              STR      r2,[r0,#8]
;;;389    
;;;390      /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
;;;391      /* Write to DMAy Streamx M0AR */
;;;392      DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
00004a  6889              LDR      r1,[r1,#8]
00004c  60c1              STR      r1,[r0,#0xc]
;;;393    }
00004e  bd30              POP      {r4,r5,pc}
;;;394    
                          ENDP

                  |L15.80|
                          DCD      0xf01c803f

                          AREA ||i.DMA_MemoryTargetConfig||, CODE, READONLY, ALIGN=1

                  DMA_MemoryTargetConfig PROC
;;;795      */
;;;796    void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
000000  b10a              CBZ      r2,|L16.6|
;;;797                               uint32_t DMA_MemoryTarget)
;;;798    {
;;;799      /* Check the parameters */
;;;800      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;801      assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
;;;802        
;;;803      /* Check the Memory target to be configured */
;;;804      if (DMA_MemoryTarget != DMA_Memory_0)
;;;805      {
;;;806        /* Write to DMAy Streamx M1AR */
;;;807        DMAy_Streamx->M1AR = MemoryBaseAddr;    
000002  6101              STR      r1,[r0,#0x10]
;;;808      }  
;;;809      else
;;;810      {
;;;811        /* Write to DMAy Streamx M0AR */
;;;812        DMAy_Streamx->M0AR = MemoryBaseAddr;  
;;;813      }
;;;814    }
000004  4770              BX       lr
                  |L16.6|
000006  60c1              STR      r1,[r0,#0xc]          ;812
000008  4770              BX       lr
;;;815    
                          ENDP


                          AREA ||i.DMA_PeriphIncOffsetSizeConfig||, CODE, READONLY, ALIGN=1

                  DMA_PeriphIncOffsetSizeConfig PROC
;;;511      */
;;;512    void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
000000  2900              CMP      r1,#0
;;;513    {
;;;514      /* Check the parameters */
;;;515      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;516      assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
;;;517    
;;;518      /* Check the needed Peripheral increment offset */
;;;519      if(DMA_Pincos != DMA_PINCOS_Psize)
;;;520      {
;;;521        /* Configure DMA_SxCR_PINCOS bit with the input parameter */
;;;522        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
;;;523      }
;;;524      else
;;;525      {
;;;526        /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
;;;527        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L17.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;522
00000a  e001              B        |L17.16|
                  |L17.12|
00000c  f4214100          BIC      r1,r1,#0x8000
                  |L17.16|
000010  6001              STR      r1,[r0,#0]            ;522
;;;528      }
;;;529    }
000012  4770              BX       lr
;;;530    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;631      */
;;;632    void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
000000  6041              STR      r1,[r0,#4]
;;;633    {
;;;634      /* Check the parameters */
;;;635      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;636    
;;;637      /* Write the number of data units to be transferred */
;;;638      DMAy_Streamx->NDTR = (uint16_t)Counter;
;;;639    }
000002  4770              BX       lr
;;;640    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;400      */
;;;401    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;402    {
;;;403      /*-------------- Reset DMA init structure parameters values ----------------*/
;;;404      /* Initialize the DMA_Channel member */
;;;405      DMA_InitStruct->DMA_Channel = 0;
;;;406    
;;;407      /* Initialize the DMA_PeripheralBaseAddr member */
;;;408      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;409    
;;;410      /* Initialize the DMA_Memory0BaseAddr member */
;;;411      DMA_InitStruct->DMA_Memory0BaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;412    
;;;413      /* Initialize the DMA_DIR member */
;;;414      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
000006  6081              STR      r1,[r0,#8]
;;;415    
;;;416      /* Initialize the DMA_BufferSize member */
;;;417      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;418    
;;;419      /* Initialize the DMA_PeripheralInc member */
;;;420      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;421    
;;;422      /* Initialize the DMA_MemoryInc member */
;;;423      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;424    
;;;425      /* Initialize the DMA_PeripheralDataSize member */
;;;426      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;427    
;;;428      /* Initialize the DMA_MemoryDataSize member */
;;;429      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;430    
;;;431      /* Initialize the DMA_Mode member */
;;;432      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;433    
;;;434      /* Initialize the DMA_Priority member */
;;;435      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;436    
;;;437      /* Initialize the DMA_FIFOMode member */
;;;438      DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;439    
;;;440      /* Initialize the DMA_FIFOThreshold member */
;;;441      DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
000018  62c1              STR      r1,[r0,#0x2c]
;;;442    
;;;443      /* Initialize the DMA_MemoryBurst member */
;;;444      DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
00001a  6301              STR      r1,[r0,#0x30]
;;;445    
;;;446      /* Initialize the DMA_PeripheralBurst member */
;;;447      DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00001c  6341              STR      r1,[r0,#0x34]
00001e  6381              STR      r1,[r0,#0x38]
;;;448    }
000020  4770              BX       lr
;;;449    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_dma.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_dma_c_e9b554c0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH|
#line 128
|__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
