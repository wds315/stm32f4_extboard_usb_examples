; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_usart.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_usart.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_usart.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;1326     */
;;;1327   void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  43c9              MVNS     r1,r1
;;;1328   {
;;;1329     /* Check the parameters */
;;;1330     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1331     assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;1332   
;;;1333     /* The CTS flag is not available for UART4 and UART5 */
;;;1334     if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
;;;1335     {
;;;1336       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1337     } 
;;;1338          
;;;1339     USARTx->SR = (uint16_t)~USART_FLAG;
000002  8001              STRH     r1,[r0,#0]
;;;1340   }
000004  4770              BX       lr
;;;1341   
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;1434     */
;;;1435   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  0a0a              LSRS     r2,r1,#8
;;;1436   {
;;;1437     uint16_t bitpos = 0x00, itmask = 0x00;
;;;1438     /* Check the parameters */
;;;1439     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1440     assert_param(IS_USART_CLEAR_IT(USART_IT)); 
;;;1441   
;;;1442     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1443     if (USART_IT == USART_IT_CTS)
;;;1444     {
;;;1445       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1446     } 
;;;1447       
;;;1448     bitpos = USART_IT >> 0x08;
;;;1449     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000002  2101              MOVS     r1,#1
000004  4091              LSLS     r1,r1,r2
;;;1450     USARTx->SR = (uint16_t)~itmask;
000006  43c9              MVNS     r1,r1
000008  8001              STRH     r1,[r0,#0]
;;;1451   }
00000a  4770              BX       lr
;;;1452   
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;365      */
;;;366    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  b510              PUSH     {r4,lr}
;;;367    {
;;;368      uint32_t tmpreg = 0x00;
;;;369      /* Check the parameters */
;;;370      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;371      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;372      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;373      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;374      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;375      
;;;376    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;377      tmpreg = USARTx->CR2;
000002  8a02              LDRH     r2,[r0,#0x10]
;;;378      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;379      tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
;;;380      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;381      /* Set CLKEN bit according to USART_Clock value */
;;;382      /* Set CPOL bit according to USART_CPOL value */
;;;383      /* Set CPHA bit according to USART_CPHA value */
;;;384      /* Set LBCL bit according to USART_LastBit value */
;;;385      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000004  884c              LDRH     r4,[r1,#2]
000006  f4226370          BIC      r3,r2,#0xf00          ;379
00000a  880a              LDRH     r2,[r1,#0]
00000c  4322              ORRS     r2,r2,r4
00000e  888c              LDRH     r4,[r1,#4]
000010  88c9              LDRH     r1,[r1,#6]
000012  430c              ORRS     r4,r4,r1
000014  4322              ORRS     r2,r2,r4
000016  431a              ORRS     r2,r2,r3
;;;386                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;387      /* Write to USART CR2 */
;;;388      USARTx->CR2 = (uint16_t)tmpreg;
000018  8202              STRH     r2,[r0,#0x10]
;;;389    }
00001a  bd10              POP      {r4,pc}
;;;390    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;396      */
;;;397    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;398    {
;;;399      /* USART_ClockInitStruct members default value */
;;;400      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;401      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;402      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;403      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;404    }
00000a  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;413      */
;;;414    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;415    {
;;;416      /* Check the parameters */
;;;417      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;418      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;419      
;;;420      if (NewState != DISABLE)
;;;421      {
;;;422        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;423        USARTx->CR1 |= USART_CR1_UE;
;;;424      }
;;;425      else
;;;426      {
;;;427        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;428        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L5.12|
000006  f4415100          ORR      r1,r1,#0x2000         ;423
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4215100          BIC      r1,r1,#0x2000
                  |L5.16|
000010  8181              STRH     r1,[r0,#0xc]          ;423
;;;429      }
;;;430    }
000012  4770              BX       lr
;;;431    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;1085     */
;;;1086   void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;1087   {
;;;1088     /* Check the parameters */
;;;1089     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1090     assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;1091     assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;1092   
;;;1093     if (NewState != DISABLE)
;;;1094     {
;;;1095       /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;1096          DMAR bits in the USART CR3 register */
;;;1097       USARTx->CR3 |= USART_DMAReq;
;;;1098     }
;;;1099     else
;;;1100     {
;;;1101       /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;1102          DMAR bits in the USART CR3 register */
;;;1103       USARTx->CR3 &= (uint16_t)~USART_DMAReq;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  d001              BEQ      |L6.10|
000006  430a              ORRS     r2,r2,r1              ;1097
000008  e000              B        |L6.12|
                  |L6.10|
00000a  438a              BICS     r2,r2,r1
                  |L6.12|
00000c  8282              STRH     r2,[r0,#0x14]         ;1097
;;;1104     }
;;;1105   }
00000e  4770              BX       lr
;;;1106   
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;183      */
;;;184    void USART_DeInit(USART_TypeDef* USARTx)
000000  491c              LDR      r1,|L7.116|
;;;185    {
000002  b510              PUSH     {r4,lr}
;;;186      /* Check the parameters */
;;;187      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;188    
;;;189      if (USARTx == USART1)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L7.22|
;;;190      {
;;;191        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2010              MOVS     r0,#0x10
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;192        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000010  2100              MOVS     r1,#0
000012  2010              MOVS     r0,#0x10
000014  e028              B        |L7.104|
                  |L7.22|
;;;193      }
;;;194      else if (USARTx == USART2)
000016  4918              LDR      r1,|L7.120|
000018  4288              CMP      r0,r1
00001a  d102              BNE      |L7.34|
;;;195      {
;;;196        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  044c              LSLS     r4,r1,#17
;;;197        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
000020  e010              B        |L7.68|
                  |L7.34|
;;;198      }
;;;199      else if (USARTx == USART3)
000022  4916              LDR      r1,|L7.124|
000024  4288              CMP      r0,r1
000026  d102              BNE      |L7.46|
;;;200      {
;;;201        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000028  2101              MOVS     r1,#1
00002a  048c              LSLS     r4,r1,#18
;;;202        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
00002c  e00a              B        |L7.68|
                  |L7.46|
;;;203      }    
;;;204      else if (USARTx == UART4)
00002e  4914              LDR      r1,|L7.128|
000030  4288              CMP      r0,r1
000032  d102              BNE      |L7.58|
;;;205      {
;;;206        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000034  2101              MOVS     r1,#1
000036  04cc              LSLS     r4,r1,#19
;;;207        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000038  e004              B        |L7.68|
                  |L7.58|
;;;208      }
;;;209      else if (USARTx == UART5)
00003a  4912              LDR      r1,|L7.132|
00003c  4288              CMP      r0,r1
00003e  d10a              BNE      |L7.86|
;;;210      {
;;;211        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000040  2101              MOVS     r1,#1
000042  050c              LSLS     r4,r1,#20
                  |L7.68|
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;212        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
00004a  4620              MOV      r0,r4
00004c  e8bd4010          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L7.86|
;;;213      }     
;;;214      else
;;;215      {
;;;216        if (USARTx == USART6)
000056  490c              LDR      r1,|L7.136|
000058  4288              CMP      r0,r1
00005a  d109              BNE      |L7.112|
;;;217        { 
;;;218          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
00005c  2101              MOVS     r1,#1
00005e  2020              MOVS     r0,#0x20
000060  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;219          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
000064  2100              MOVS     r1,#0
000066  2020              MOVS     r0,#0x20
                  |L7.104|
000068  e8bd4010          POP      {r4,lr}
00006c  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L7.112|
;;;220        }
;;;221      }
;;;222    }
000070  bd10              POP      {r4,pc}
;;;223    
                          ENDP

000072  0000              DCW      0x0000
                  |L7.116|
                          DCD      0x40011000
                  |L7.120|
                          DCD      0x40004400
                  |L7.124|
                          DCD      0x40004800
                  |L7.128|
                          DCD      0x40004c00
                  |L7.132|
                          DCD      0x40005000
                  |L7.136|
                          DCD      0x40011400

                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;1277     */
;;;1278   FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  4602              MOV      r2,r0
;;;1279   {
;;;1280     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1281     /* Check the parameters */
;;;1282     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1283     assert_param(IS_USART_FLAG(USART_FLAG));
;;;1284   
;;;1285     /* The CTS flag is not available for UART4 and UART5 */
;;;1286     if (USART_FLAG == USART_FLAG_CTS)
;;;1287     {
;;;1288       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1289     } 
;;;1290       
;;;1291     if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000004  8812              LDRH     r2,[r2,#0]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;1292     {
;;;1293       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       bitstatus = RESET;
;;;1298     }
;;;1299     return bitstatus;
;;;1300   }
00000c  4770              BX       lr
;;;1301   
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;1360     */
;;;1361   ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1362   {
;;;1363     uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;1364     ITStatus bitstatus = RESET;
;;;1365     /* Check the parameters */
;;;1366     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1367     assert_param(IS_USART_GET_IT(USART_IT)); 
;;;1368   
;;;1369     /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;1370     if (USART_IT == USART_IT_CTS)
;;;1371     {
;;;1372       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1373     } 
;;;1374       
;;;1375     /* Get the USART register index */
;;;1376     usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;1377     /* Get the interrupt position */
;;;1378     itmask = USART_IT & IT_MASK;
000002  f001061f          AND      r6,r1,#0x1f
;;;1379     itmask = (uint32_t)0x01 << itmask;
000006  2201              MOVS     r2,#1
000008  2500              MOVS     r5,#0                 ;1364
00000a  f3c11342          UBFX     r3,r1,#5,#3           ;1376
00000e  fa02f406          LSL      r4,r2,r6
;;;1380     
;;;1381     if (usartreg == 0x01) /* The IT  is in CR1 register */
000012  2b01              CMP      r3,#1
000014  d00f              BEQ      |L9.54|
;;;1382     {
;;;1383       itmask &= USARTx->CR1;
;;;1384     }
;;;1385     else if (usartreg == 0x02) /* The IT  is in CR2 register */
000016  2b02              CMP      r3,#2
000018  d00f              BEQ      |L9.58|
;;;1386     {
;;;1387       itmask &= USARTx->CR2;
;;;1388     }
;;;1389     else /* The IT  is in CR3 register */
;;;1390     {
;;;1391       itmask &= USARTx->CR3;
00001a  8a83              LDRH     r3,[r0,#0x14]
                  |L9.28|
;;;1392     }
;;;1393     
;;;1394     bitpos = USART_IT >> 0x08;
00001c  ea4f2111          LSR      r1,r1,#8
;;;1395     bitpos = (uint32_t)0x01 << bitpos;
;;;1396     bitpos &= USARTx->SR;
000020  8800              LDRH     r0,[r0,#0]
000022  4223              TST      r3,r4                 ;1387
000024  fa02f201          LSL      r2,r2,r1              ;1395
000028  ea000002          AND      r0,r0,r2
;;;1397     if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
00002c  d001              BEQ      |L9.50|
00002e  b100              CBZ      r0,|L9.50|
;;;1398     {
;;;1399       bitstatus = SET;
000030  2501              MOVS     r5,#1
                  |L9.50|
;;;1400     }
;;;1401     else
;;;1402     {
;;;1403       bitstatus = RESET;
;;;1404     }
;;;1405     
;;;1406     return bitstatus;  
000032  4628              MOV      r0,r5
;;;1407   }
000034  bd70              POP      {r4-r6,pc}
                  |L9.54|
000036  8983              LDRH     r3,[r0,#0xc]          ;1383
000038  e7f0              B        |L9.28|
                  |L9.58|
00003a  8a03              LDRH     r3,[r0,#0x10]         ;1387
00003c  e7ee              B        |L9.28|
;;;1408   
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;821      */
;;;822    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;823    {
;;;824      /* Check the parameters */
;;;825      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;826      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;827      
;;;828      if (NewState != DISABLE)
;;;829      {
;;;830        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;831        USARTx->CR3 |= USART_CR3_HDSEL;
;;;832      }
;;;833      else
;;;834      {
;;;835        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;836        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L10.12|
000006  f0410108          ORR      r1,r1,#8              ;831
00000a  e001              B        |L10.16|
                  |L10.12|
00000c  f0210108          BIC      r1,r1,#8
                  |L10.16|
000010  8281              STRH     r1,[r0,#0x14]         ;831
;;;837      }
;;;838    }
000012  4770              BX       lr
;;;839    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;1213     */
;;;1214   void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000000  f3c11342          UBFX     r3,r1,#5,#3
;;;1215   {
;;;1216     uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;1217     uint32_t usartxbase = 0x00;
;;;1218     /* Check the parameters */
;;;1219     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1220     assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;1221     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1222   
;;;1223     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1224     if (USART_IT == USART_IT_CTS)
;;;1225     {
;;;1226       assert_param(IS_USART_1236_PERIPH(USARTx));
;;;1227     } 
;;;1228       
;;;1229     usartxbase = (uint32_t)USARTx;
;;;1230   
;;;1231     /* Get the USART register index */
;;;1232     usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;1233   
;;;1234     /* Get the interrupt position */
;;;1235     itpos = USART_IT & IT_MASK;
000004  f0010c1f          AND      r12,r1,#0x1f
;;;1236     itmask = (((uint32_t)0x01) << itpos);
000008  2101              MOVS     r1,#1
00000a  fa01f10c          LSL      r1,r1,r12
;;;1237       
;;;1238     if (usartreg == 0x01) /* The IT is in CR1 register */
00000e  2b01              CMP      r3,#1
000010  d007              BEQ      |L11.34|
;;;1239     {
;;;1240       usartxbase += 0x0C;
;;;1241     }
;;;1242     else if (usartreg == 0x02) /* The IT is in CR2 register */
000012  2b02              CMP      r3,#2
000014  d007              BEQ      |L11.38|
;;;1243     {
;;;1244       usartxbase += 0x10;
;;;1245     }
;;;1246     else /* The IT is in CR3 register */
;;;1247     {
;;;1248       usartxbase += 0x14; 
000016  3014              ADDS     r0,r0,#0x14
                  |L11.24|
;;;1249     }
;;;1250     if (NewState != DISABLE)
000018  2a00              CMP      r2,#0
;;;1251     {
;;;1252       *(__IO uint32_t*)usartxbase  |= itmask;
;;;1253     }
;;;1254     else
;;;1255     {
;;;1256       *(__IO uint32_t*)usartxbase &= ~itmask;
00001a  6802              LDR      r2,[r0,#0]
00001c  d005              BEQ      |L11.42|
00001e  430a              ORRS     r2,r2,r1              ;1252
000020  e004              B        |L11.44|
                  |L11.34|
000022  300c              ADDS     r0,r0,#0xc            ;1240
000024  e7f8              B        |L11.24|
                  |L11.38|
000026  3010              ADDS     r0,r0,#0x10           ;1244
000028  e7f6              B        |L11.24|
                  |L11.42|
00002a  438a              BICS     r2,r2,r1
                  |L11.44|
00002c  6002              STR      r2,[r0,#0]            ;1252
;;;1257     }
;;;1258   }
00002e  4770              BX       lr
;;;1259   
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;232      */
;;;233    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  b57f              PUSH     {r0-r6,lr}
;;;234    {
000002  4604              MOV      r4,r0
;;;235      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;236      uint32_t integerdivider = 0x00;
;;;237      uint32_t fractionaldivider = 0x00;
;;;238      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;239    
;;;240      /* Check the parameters */
;;;241      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;242      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;243      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;244      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;245      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;246      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;247      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;248    
;;;249      /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
;;;250      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
;;;251      {
;;;252        assert_param(IS_USART_1236_PERIPH(USARTx));
;;;253      }
;;;254    
;;;255    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;256      tmpreg = USARTx->CR2;
000004  8a00              LDRH     r0,[r0,#0x10]
000006  460d              MOV      r5,r1                 ;234
;;;257    
;;;258      /* Clear STOP[13:12] bits */
;;;259      tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
000008  f4205140          BIC      r1,r0,#0x3000
;;;260    
;;;261      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
;;;262          Set STOP[13:12] bits according to USART_StopBits value */
;;;263      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
00000c  88e8              LDRH     r0,[r5,#6]
00000e  4308              ORRS     r0,r0,r1
;;;264      
;;;265      /* Write to USART CR2 */
;;;266      USARTx->CR2 = (uint16_t)tmpreg;
000010  8220              STRH     r0,[r4,#0x10]
;;;267    
;;;268    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;269      tmpreg = USARTx->CR1;
000012  89a0              LDRH     r0,[r4,#0xc]
;;;270    
;;;271      /* Clear M, PCE, PS, TE and RE bits */
;;;272      tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
000014  f241610c          MOV      r1,#0x160c
000018  4388              BICS     r0,r0,r1
;;;273    
;;;274      /* Configure the USART Word Length, Parity and mode: 
;;;275         Set the M bits according to USART_WordLength value 
;;;276         Set PCE and PS bits according to USART_Parity value
;;;277         Set TE and RE bits according to USART_Mode value */
;;;278      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00001a  88a9              LDRH     r1,[r5,#4]
00001c  892a              LDRH     r2,[r5,#8]
00001e  4311              ORRS     r1,r1,r2
000020  896a              LDRH     r2,[r5,#0xa]
000022  4302              ORRS     r2,r2,r0
000024  4311              ORRS     r1,r1,r2
;;;279                USART_InitStruct->USART_Mode;
;;;280    
;;;281      /* Write to USART CR1 */
;;;282      USARTx->CR1 = (uint16_t)tmpreg;
000026  81a1              STRH     r1,[r4,#0xc]
;;;283    
;;;284    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;285      tmpreg = USARTx->CR3;
000028  8aa0              LDRH     r0,[r4,#0x14]
;;;286    
;;;287      /* Clear CTSE and RTSE bits */
;;;288      tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
00002a  f4207140          BIC      r1,r0,#0x300
;;;289    
;;;290      /* Configure the USART HFC : 
;;;291          Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;292      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
00002e  89a8              LDRH     r0,[r5,#0xc]
000030  4308              ORRS     r0,r0,r1
;;;293    
;;;294      /* Write to USART CR3 */
;;;295      USARTx->CR3 = (uint16_t)tmpreg;
000032  82a0              STRH     r0,[r4,#0x14]
;;;296    
;;;297    /*---------------------------- USART BRR Configuration -----------------------*/
;;;298      /* Configure the USART Baud Rate */
;;;299      RCC_GetClocksFreq(&RCC_ClocksStatus);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       RCC_GetClocksFreq
;;;300    
;;;301      if ((USARTx == USART1) || (USARTx == USART6))
00003a  481d              LDR      r0,|L12.176|
00003c  4284              CMP      r4,r0
00003e  d002              BEQ      |L12.70|
000040  481c              LDR      r0,|L12.180|
000042  4284              CMP      r4,r0
000044  d101              BNE      |L12.74|
                  |L12.70|
;;;302      {
;;;303        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000046  9803              LDR      r0,[sp,#0xc]
000048  e000              B        |L12.76|
                  |L12.74|
;;;304      }
;;;305      else
;;;306      {
;;;307        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
00004a  9802              LDR      r0,[sp,#8]
                  |L12.76|
;;;308      }
;;;309      
;;;310      /* Determine the integer part */
;;;311      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
00004c  89a1              LDRH     r1,[r4,#0xc]
00004e  0409              LSLS     r1,r1,#16
000050  2900              CMP      r1,#0
;;;312      {
;;;313        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;314        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
;;;315      }
;;;316      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;317      {
;;;318        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;319        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
000052  eb0001c0          ADD      r1,r0,r0,LSL #3
000056  eb011000          ADD      r0,r1,r0,LSL #4
00005a  6829              LDR      r1,[r5,#0]            ;311
00005c  da02              BGE      |L12.100|
00005e  ea4f0141          LSL      r1,r1,#1              ;314
000062  e001              B        |L12.104|
                  |L12.100|
000064  ea4f0181          LSL      r1,r1,#2
                  |L12.104|
000068  fbb0f0f1          UDIV     r0,r0,r1
;;;320      }
;;;321      tmpreg = (integerdivider / 100) << 4;
00006c  2264              MOVS     r2,#0x64
00006e  fbb0f1f2          UDIV     r1,r0,r2
000072  ea4f1101          LSL      r1,r1,#4
;;;322    
;;;323      /* Determine the fractional part */
;;;324      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
000076  ea4f1311          LSR      r3,r1,#4
00007a  f06f0518          MVN      r5,#0x18
00007e  436b              MULS     r3,r5,r3
000080  eb000083          ADD      r0,r0,r3,LSL #2
;;;325    
;;;326      /* Implement the fractional part in the register */
;;;327      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
000084  89a3              LDRH     r3,[r4,#0xc]
000086  041d              LSLS     r5,r3,#16
;;;328      {
;;;329        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
000088  f04f0332          MOV      r3,#0x32
00008c  d506              BPL      |L12.156|
00008e  eb0300c0          ADD      r0,r3,r0,LSL #3
000092  fbb0f0f2          UDIV     r0,r0,r2
000096  f0000007          AND      r0,r0,#7
00009a  e005              B        |L12.168|
                  |L12.156|
;;;330      }
;;;331      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;332      {
;;;333        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
00009c  eb031000          ADD      r0,r3,r0,LSL #4
0000a0  fbb0f0f2          UDIV     r0,r0,r2
0000a4  f000000f          AND      r0,r0,#0xf
                  |L12.168|
0000a8  4308              ORRS     r0,r0,r1
;;;334      }
;;;335      
;;;336      /* Write to USART BRR register */
;;;337      USARTx->BRR = (uint16_t)tmpreg;
0000aa  8120              STRH     r0,[r4,#8]
;;;338    }
0000ac  bd7f              POP      {r0-r6,pc}
;;;339    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L12.176|
                          DCD      0x40011000
                  |L12.180|
                          DCD      0x40011400

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;1039     */
;;;1040   void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1041   {
;;;1042     /* Check the parameters */
;;;1043     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1044     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1045       
;;;1046     if (NewState != DISABLE)
;;;1047     {
;;;1048       /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;1049       USARTx->CR3 |= USART_CR3_IREN;
;;;1050     }
;;;1051     else
;;;1052     {
;;;1053       /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;1054       USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L13.12|
000006  f0410102          ORR      r1,r1,#2              ;1049
00000a  e001              B        |L13.16|
                  |L13.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L13.16|
000010  8281              STRH     r1,[r0,#0x14]         ;1049
;;;1055     }
;;;1056   }
000012  4770              BX       lr
;;;1057   
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;1021     */
;;;1022   void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;1023   {
;;;1024     /* Check the parameters */
;;;1025     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1026     assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;1027       
;;;1028     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
000002  f0220204          BIC      r2,r2,#4
000006  8282              STRH     r2,[r0,#0x14]
;;;1029     USARTx->CR3 |= USART_IrDAMode;
000008  8a82              LDRH     r2,[r0,#0x14]
00000a  430a              ORRS     r2,r2,r1
00000c  8282              STRH     r2,[r0,#0x14]
;;;1030   }
00000e  4770              BX       lr
;;;1031   
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;726      */
;;;727    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;728    {
;;;729      /* Check the parameters */
;;;730      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;731      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;732      
;;;733      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
000002  f0220220          BIC      r2,r2,#0x20
000006  8202              STRH     r2,[r0,#0x10]
;;;734      USARTx->CR2 |= USART_LINBreakDetectLength;  
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  430a              ORRS     r2,r2,r1
00000c  8202              STRH     r2,[r0,#0x10]
;;;735    }
00000e  4770              BX       lr
;;;736    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;744      */
;;;745    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;746    {
;;;747      /* Check the parameters */
;;;748      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;749      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;750      
;;;751      if (NewState != DISABLE)
;;;752      {
;;;753        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;754        USARTx->CR2 |= USART_CR2_LINEN;
;;;755      }
;;;756      else
;;;757      {
;;;758        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;759        USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
000002  8a01              LDRH     r1,[r0,#0x10]
000004  d002              BEQ      |L16.12|
000006  f4414180          ORR      r1,r1,#0x4000         ;754
00000a  e001              B        |L16.16|
                  |L16.12|
00000c  f4214180          BIC      r1,r1,#0x4000
                  |L16.16|
000010  8201              STRH     r1,[r0,#0x10]         ;754
;;;760      }
;;;761    }
000012  4770              BX       lr
;;;762    
                          ENDP


                          AREA ||i.USART_OneBitMethodCmd||, CODE, READONLY, ALIGN=1

                  USART_OneBitMethodCmd PROC
;;;486      */
;;;487    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;488    {
;;;489      /* Check the parameters */
;;;490      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;491      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;492      
;;;493      if (NewState != DISABLE)
;;;494      {
;;;495        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;496        USARTx->CR3 |= USART_CR3_ONEBIT;
;;;497      }
;;;498      else
;;;499      {
;;;500        /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
;;;501        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L17.12|
000006  f4416100          ORR      r1,r1,#0x800          ;496
00000a  e001              B        |L17.16|
                  |L17.12|
00000c  f4216100          BIC      r1,r1,#0x800
                  |L17.16|
000010  8281              STRH     r1,[r0,#0x14]         ;496
;;;502      }
;;;503    }
000012  4770              BX       lr
;;;504    
                          ENDP


                          AREA ||i.USART_OverSampling8Cmd||, CODE, READONLY, ALIGN=1

                  USART_OverSampling8Cmd PROC
;;;460      */
;;;461    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;462    {
;;;463      /* Check the parameters */
;;;464      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;465      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;466      
;;;467      if (NewState != DISABLE)
;;;468      {
;;;469        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;470        USARTx->CR1 |= USART_CR1_OVER8;
;;;471      }
;;;472      else
;;;473      {
;;;474        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;475        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L18.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;470
00000a  e001              B        |L18.16|
                  |L18.12|
00000c  f3c1010e          UBFX     r1,r1,#0,#15
                  |L18.16|
000010  8181              STRH     r1,[r0,#0xc]          ;470
;;;476      }
;;;477    }  
000012  4770              BX       lr
;;;478    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;559      */
;;;560    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000000  8880              LDRH     r0,[r0,#4]
;;;561    {
;;;562      /* Check the parameters */
;;;563      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;564      
;;;565      /* Receive Data */
;;;566      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000002  f3c00008          UBFX     r0,r0,#0,#9
;;;567    }
000006  4770              BX       lr
;;;568    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;630      */
;;;631    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;635      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;636      
;;;637      if (NewState != DISABLE)
;;;638      {
;;;639        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;640        USARTx->CR1 |= USART_CR1_RWU;
;;;641      }
;;;642      else
;;;643      {
;;;644        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;645        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
000002  8981              LDRH     r1,[r0,#0xc]
000004  d002              BEQ      |L20.12|
000006  f0410102          ORR      r1,r1,#2              ;640
00000a  e001              B        |L20.16|
                  |L20.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L20.16|
000010  8181              STRH     r1,[r0,#0xc]          ;640
;;;646      }
;;;647    }
000012  4770              BX       lr
;;;648    /**
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;768      */
;;;769    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;770    {
;;;771      /* Check the parameters */
;;;772      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;773      
;;;774      /* Send break characters */
;;;775      USARTx->CR1 |= USART_CR1_SBK;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;776    }
000008  4770              BX       lr
;;;777    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;543      */
;;;544    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000000  f3c10108          UBFX     r1,r1,#0,#9
;;;545    {
;;;546      /* Check the parameters */
;;;547      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;548      assert_param(IS_USART_DATA(Data)); 
;;;549        
;;;550      /* Transmit Data */
;;;551      USARTx->DR = (Data & (uint16_t)0x01FF);
000004  8081              STRH     r1,[r0,#4]
;;;552    }
000006  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;610      */
;;;611    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;612    {
;;;613      /* Check the parameters */
;;;614      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;615      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;616        
;;;617      /* Clear the USART address */
;;;618      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
000002  f022020f          BIC      r2,r2,#0xf
000006  8202              STRH     r2,[r0,#0x10]
;;;619      /* Set the USART address node */
;;;620      USARTx->CR2 |= USART_Address;
000008  8a02              LDRH     r2,[r0,#0x10]
00000a  430a              ORRS     r2,r2,r1
00000c  8202              STRH     r2,[r0,#0x10]
;;;621    }
00000e  4770              BX       lr
;;;622    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;906      */
;;;907    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;908    {    
;;;909      /* Check the parameters */
;;;910      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;911      
;;;912      /* Clear the USART Guard time */
;;;913      USARTx->GTPR &= USART_GTPR_PSC;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;914      /* Set the USART guard time */
;;;915      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422101          ORR      r1,r2,r1,LSL #8
00000c  8301              STRH     r1,[r0,#0x18]
;;;916    }
00000e  4770              BX       lr
;;;917    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;439      */
;;;440    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;441    { 
;;;442      /* Check the parameters */
;;;443      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;444      
;;;445      /* Clear the USART prescaler */
;;;446      USARTx->GTPR &= USART_GTPR_GT;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;447      /* Set the USART prescaler */
;;;448      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;449    }
00000e  4770              BX       lr
;;;450    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;925      */
;;;926    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;927    {
;;;928      /* Check the parameters */
;;;929      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;930      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;931      if (NewState != DISABLE)
;;;932      {
;;;933        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;934        USARTx->CR3 |= USART_CR3_SCEN;
;;;935      }
;;;936      else
;;;937      {
;;;938        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;939        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L26.12|
000006  f0410120          ORR      r1,r1,#0x20           ;934
00000a  e001              B        |L26.16|
                  |L26.12|
00000c  f0210120          BIC      r1,r1,#0x20
                  |L26.16|
000010  8281              STRH     r1,[r0,#0x14]         ;934
;;;940      }
;;;941    }
000012  4770              BX       lr
;;;942    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;950      */
;;;951    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;952    {
;;;953      /* Check the parameters */
;;;954      assert_param(IS_USART_1236_PERIPH(USARTx)); 
;;;955      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;956      if (NewState != DISABLE)
;;;957      {
;;;958        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;959        USARTx->CR3 |= USART_CR3_NACK;
;;;960      }
;;;961      else
;;;962      {
;;;963        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;964        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
000002  8a81              LDRH     r1,[r0,#0x14]
000004  d002              BEQ      |L27.12|
000006  f0410110          ORR      r1,r1,#0x10           ;959
00000a  e001              B        |L27.16|
                  |L27.12|
00000c  f0210110          BIC      r1,r1,#0x10
                  |L27.16|
000010  8281              STRH     r1,[r0,#0x14]         ;959
;;;965      }
;;;966    }
000012  4770              BX       lr
;;;967    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;345      */
;;;346    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;347    {
;;;348      /* USART_InitStruct members default value */
;;;349      USART_InitStruct->USART_BaudRate = 9600;
;;;350      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;351      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;352      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;353      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  220c              MOVS     r2,#0xc
000010  8142              STRH     r2,[r0,#0xa]
;;;354      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  8181              STRH     r1,[r0,#0xc]
;;;355    }
000014  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;657      */
;;;658    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;659    {
;;;660      /* Check the parameters */
;;;661      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;662      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;663      
;;;664      USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
000002  f4226200          BIC      r2,r2,#0x800
000006  8182              STRH     r2,[r0,#0xc]
;;;665      USARTx->CR1 |= USART_WakeUp;
000008  8982              LDRH     r2,[r0,#0xc]
00000a  430a              ORRS     r2,r2,r1
00000c  8182              STRH     r2,[r0,#0xc]
;;;666    }
00000e  4770              BX       lr
;;;667    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_usart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_stm32f4xx_usart_c_9565154b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f4xx_usart_c_9565154b____REVSH|
#line 128
|__asm___17_stm32f4xx_usart_c_9565154b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
