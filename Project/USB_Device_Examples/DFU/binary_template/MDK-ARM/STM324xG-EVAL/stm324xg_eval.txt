; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm324xg_eval.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm324xg_eval.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm324xg_eval.crf ..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL\stm324xg_eval.c]
                          THUMB

                          AREA ||i.SD_LowLevel_DMA_RxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_RxConfig PROC
;;;508      */
;;;509    void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;510    {
;;;511      DMA_InitTypeDef SDDMA_InitStructure;
;;;512    
;;;513      DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
000002  4d1f              LDR      r5,|L1.128|
000004  4604              MOV      r4,r0                 ;510
000006  b08f              SUB      sp,sp,#0x3c           ;510
000008  f04f51fa          MOV      r1,#0x1f400000
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       DMA_ClearFlag
;;;514    
;;;515      /* DMA2 Stream3  or Stream6 disable */
;;;516      DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
000012  2100              MOVS     r1,#0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       DMA_Cmd
;;;517    
;;;518      /* DMA2 Stream3 or Stream6 Config */
;;;519      DMA_DeInit(SD_SDIO_DMA_STREAM);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       DMA_DeInit
;;;520    
;;;521      SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
000020  f04f6000          MOV      r0,#0x8000000
;;;522      SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000024  9000              STR      r0,[sp,#0]
000026  4817              LDR      r0,|L1.132|
000028  e9cd0401          STRD     r0,r4,[sp,#4]
;;;523      SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
;;;524      SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
00002c  2000              MOVS     r0,#0
;;;525      SDDMA_InitStructure.DMA_BufferSize = 0;
00002e  9003              STR      r0,[sp,#0xc]
;;;526      SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;527      SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000030  1529              ASRS     r1,r5,#20
000032  9004              STR      r0,[sp,#0x10]
000034  e9cd0105          STRD     r0,r1,[sp,#0x14]
;;;528      SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
000038  0089              LSLS     r1,r1,#2
;;;529      SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00003a  9107              STR      r1,[sp,#0x1c]
00003c  0089              LSLS     r1,r1,#2
00003e  e9cd1008          STRD     r1,r0,[sp,#0x20]
;;;530      SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;531      SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
000042  f44f3040          MOV      r0,#0x30000
;;;532      SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
000046  900a              STR      r0,[sp,#0x28]
000048  2004              MOVS     r0,#4
;;;533      SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
00004a  900b              STR      r0,[sp,#0x2c]
00004c  2003              MOVS     r0,#3
;;;534      SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
00004e  900c              STR      r0,[sp,#0x30]
000050  0248              LSLS     r0,r1,#9
;;;535      SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
000052  900d              STR      r0,[sp,#0x34]
000054  1080              ASRS     r0,r0,#2
;;;536      DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
000056  900e              STR      r0,[sp,#0x38]
000058  4669              MOV      r1,sp
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       DMA_Init
;;;537      DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
000060  2201              MOVS     r2,#1
000062  2110              MOVS     r1,#0x10
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       DMA_ITConfig
;;;538      DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
00006a  2120              MOVS     r1,#0x20
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       DMA_FlowControllerConfig
;;;539    
;;;540      /* DMA2 Stream3 or Stream6 enable */
;;;541      DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
000072  2101              MOVS     r1,#1
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       DMA_Cmd
;;;542    }
00007a  b00f              ADD      sp,sp,#0x3c
00007c  bd30              POP      {r4,r5,pc}
;;;543    
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40026458
                  |L1.132|
                          DCD      0x40012c80

                          AREA ||i.SD_LowLevel_DMA_TxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_TxConfig PROC
;;;466      */
;;;467    void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;468    {
;;;469      DMA_InitTypeDef SDDMA_InitStructure;
;;;470    
;;;471      DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
000002  4d1f              LDR      r5,|L2.128|
000004  4604              MOV      r4,r0                 ;468
000006  b08f              SUB      sp,sp,#0x3c           ;468
000008  f04f51fa          MOV      r1,#0x1f400000
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       DMA_ClearFlag
;;;472    
;;;473      /* DMA2 Stream3  or Stream6 disable */
;;;474      DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
000012  2100              MOVS     r1,#0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       DMA_Cmd
;;;475    
;;;476      /* DMA2 Stream3  or Stream6 Config */
;;;477      DMA_DeInit(SD_SDIO_DMA_STREAM);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       DMA_DeInit
;;;478    
;;;479      SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
000020  f04f6000          MOV      r0,#0x8000000
;;;480      SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000024  9000              STR      r0,[sp,#0]
000026  4817              LDR      r0,|L2.132|
000028  e9cd0401          STRD     r0,r4,[sp,#4]
;;;481      SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
;;;482      SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
00002c  2040              MOVS     r0,#0x40
;;;483      SDDMA_InitStructure.DMA_BufferSize = 0;
00002e  9003              STR      r0,[sp,#0xc]
000030  2000              MOVS     r0,#0
;;;484      SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;485      SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000032  1529              ASRS     r1,r5,#20
000034  9004              STR      r0,[sp,#0x10]
000036  e9cd0105          STRD     r0,r1,[sp,#0x14]
;;;486      SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00003a  0089              LSLS     r1,r1,#2
;;;487      SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00003c  9107              STR      r1,[sp,#0x1c]
00003e  0089              LSLS     r1,r1,#2
000040  e9cd1008          STRD     r1,r0,[sp,#0x20]
;;;488      SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;489      SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
000044  f44f3040          MOV      r0,#0x30000
;;;490      SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
000048  900a              STR      r0,[sp,#0x28]
00004a  2004              MOVS     r0,#4
;;;491      SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
00004c  900b              STR      r0,[sp,#0x2c]
00004e  2003              MOVS     r0,#3
;;;492      SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
000050  900c              STR      r0,[sp,#0x30]
000052  0248              LSLS     r0,r1,#9
;;;493      SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
000054  900d              STR      r0,[sp,#0x34]
000056  1080              ASRS     r0,r0,#2
;;;494      DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
000058  900e              STR      r0,[sp,#0x38]
00005a  4669              MOV      r1,sp
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       DMA_Init
;;;495      DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
000062  2201              MOVS     r2,#1
000064  2110              MOVS     r1,#0x10
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       DMA_ITConfig
;;;496      DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
00006c  2120              MOVS     r1,#0x20
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       DMA_FlowControllerConfig
;;;497    
;;;498      /* DMA2 Stream3  or Stream6 enable */
;;;499      DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
000074  2101              MOVS     r1,#1
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       DMA_Cmd
;;;500        
;;;501    }
00007c  b00f              ADD      sp,sp,#0x3c
00007e  bd30              POP      {r4,r5,pc}
;;;502    
                          ENDP

                  |L2.128|
                          DCD      0x40026458
                  |L2.132|
                          DCD      0x40012c80

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;372      */
;;;373    void SD_LowLevel_DeInit(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;374    {
;;;375      GPIO_InitTypeDef  GPIO_InitStructure;
;;;376      
;;;377      /*!< Disable SDIO Clock */
;;;378      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;379      
;;;380      /*!< Set Power State to OFF */
;;;381      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;382    
;;;383      /*!< DeInitializes the SDIO peripheral */
;;;384      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;385      
;;;386      /* Disable the SDIO APB2 Clock */
;;;387      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6000          MOV      r0,#0x800
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;388    
;;;389      GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
00001c  4c1c              LDR      r4,|L3.144|
00001e  2200              MOVS     r2,#0
000020  2108              MOVS     r1,#8
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;390      GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
000028  2200              MOVS     r2,#0
00002a  2109              MOVS     r1,#9
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_PinAFConfig
;;;391      GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
000032  2200              MOVS     r2,#0
000034  210a              MOVS     r1,#0xa
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_PinAFConfig
;;;392      GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
00003c  2200              MOVS     r2,#0
00003e  210b              MOVS     r1,#0xb
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       GPIO_PinAFConfig
;;;393      GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
000046  2200              MOVS     r2,#0
000048  210c              MOVS     r1,#0xc
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_PinAFConfig
;;;394      GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
000050  4d10              LDR      r5,|L3.148|
000052  2200              MOVS     r2,#0
000054  2102              MOVS     r1,#2
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       GPIO_PinAFConfig
;;;395    
;;;396      /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
;;;397      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
;;;398      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00005c  2100              MOVS     r1,#0
00005e  f44f6070          MOV      r0,#0xf00             ;397
000062  f88d1004          STRB     r1,[sp,#4]
000066  9000              STR      r0,[sp,#0]
;;;399      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000068  f88d1007          STRB     r1,[sp,#7]
;;;400      GPIO_Init(GPIOC, &GPIO_InitStructure);
00006c  4669              MOV      r1,sp
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       GPIO_Init
;;;401    
;;;402      /* Configure PD.02 CMD line */
;;;403      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000074  2004              MOVS     r0,#4
;;;404      GPIO_Init(GPIOD, &GPIO_InitStructure);
000076  9000              STR      r0,[sp,#0]
000078  4669              MOV      r1,sp
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       GPIO_Init
;;;405    
;;;406      /* Configure PC.12 pin: CLK pin */
;;;407      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000080  14a0              ASRS     r0,r4,#18
;;;408      GPIO_Init(GPIOC, &GPIO_InitStructure);
000082  9000              STR      r0,[sp,#0]
000084  4669              MOV      r1,sp
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       GPIO_Init
;;;409    }
00008c  bd7c              POP      {r2-r6,pc}
;;;410    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x40020800
                  |L3.148|
                          DCD      0x40020c00

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;416      */
;;;417    void SD_LowLevel_Init(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;418    {
;;;419      GPIO_InitTypeDef  GPIO_InitStructure;
;;;420    
;;;421      /* GPIOC and GPIOD Periph clock enable */
;;;422      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000004  2101              MOVS     r1,#1
000006  200c              MOVS     r0,#0xc
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;423    
;;;424      GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
00000c  4e29              LDR      r6,|L4.180|
00000e  220c              MOVS     r2,#0xc
000010  2108              MOVS     r1,#8
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_PinAFConfig
;;;425      GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
000018  220c              MOVS     r2,#0xc
00001a  2109              MOVS     r1,#9
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;426      GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
000022  220c              MOVS     r2,#0xc
000024  210a              MOVS     r1,#0xa
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       GPIO_PinAFConfig
;;;427      GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
00002c  220c              MOVS     r2,#0xc
00002e  210b              MOVS     r1,#0xb
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       GPIO_PinAFConfig
;;;428      GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
000036  220c              MOVS     r2,#0xc
000038  4611              MOV      r1,r2
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       GPIO_PinAFConfig
;;;429      GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
000040  4f1d              LDR      r7,|L4.184|
000042  220c              MOVS     r2,#0xc
000044  2102              MOVS     r1,#2
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       GPIO_PinAFConfig
;;;430    
;;;431      /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
;;;432      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
00004c  f44f6070          MOV      r0,#0xf00
;;;433      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
000050  2401              MOVS     r4,#1
000052  9000              STR      r0,[sp,#0]
000054  f88d4005          STRB     r4,[sp,#5]
;;;434      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000058  2002              MOVS     r0,#2
00005a  f88d0004          STRB     r0,[sp,#4]
;;;435      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00005e  2500              MOVS     r5,#0
000060  f88d5006          STRB     r5,[sp,#6]
;;;436      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000064  f88d4007          STRB     r4,[sp,#7]
;;;437      GPIO_Init(GPIOC, &GPIO_InitStructure);
000068  4669              MOV      r1,sp
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       GPIO_Init
;;;438    
;;;439      /* Configure PD.02 CMD line */
;;;440      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000070  2004              MOVS     r0,#4
;;;441      GPIO_Init(GPIOD, &GPIO_InitStructure);
000072  9000              STR      r0,[sp,#0]
000074  4669              MOV      r1,sp
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       GPIO_Init
;;;442    
;;;443      /* Configure PC.12 pin: CLK pin */
;;;444      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00007c  0320              LSLS     r0,r4,#12
;;;445      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00007e  9000              STR      r0,[sp,#0]
000080  f88d5007          STRB     r5,[sp,#7]
;;;446      GPIO_Init(GPIOC, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  4630              MOV      r0,r6
000088  f7fffffe          BL       GPIO_Init
;;;447      
;;;448      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;449      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
;;;450      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00008c  f88d5004          STRB     r5,[sp,#4]
000090  9400              STR      r4,[sp,#0]
;;;451      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000092  f88d4007          STRB     r4,[sp,#7]
;;;452      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000096  4669              MOV      r1,sp
000098  4630              MOV      r0,r6
00009a  f7fffffe          BL       GPIO_Init
;;;453    
;;;454      /* Enable the SDIO APB2 Clock */
;;;455      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
00009e  2101              MOVS     r1,#1
0000a0  02c8              LSLS     r0,r1,#11
0000a2  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;456    
;;;457      /* Enable the DMA2 Clock */
;;;458      RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  0588              LSLS     r0,r1,#22
0000aa  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;459    }
0000ae  e8bd81fc          POP      {r2-r8,pc}
;;;460    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L4.180|
                          DCD      0x40020800
                  |L4.184|
                          DCD      0x40020c00

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;327      */
;;;328    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;329    {
000004  4688              MOV      r8,r1
000006  4604              MOV      r4,r0
;;;330      GPIO_InitTypeDef GPIO_InitStructure;
;;;331    
;;;332      /* Enable GPIO clock */
;;;333      RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
000008  492d              LDR      r1,|L5.192|
00000a  482d              LDR      r0,|L5.192|
00000c  1d09              ADDS     r1,r1,#4
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
000012  f8511024          LDR      r1,[r1,r4,LSL #2]
000016  4308              ORRS     r0,r0,r1
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;334    
;;;335      if (COM == COM1)
00001e  b92c              CBNZ     r4,|L5.44|
;;;336      {
;;;337        /* Enable UART clock */
;;;338        RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000020  4827              LDR      r0,|L5.192|
000022  2101              MOVS     r1,#1
000024  1f00              SUBS     r0,r0,#4
000026  6800              LDR      r0,[r0,#0]
000028  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L5.44|
;;;339      }
;;;340    
;;;341      /* Connect PXx to USARTx_Tx*/
;;;342      GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
00002c  4824              LDR      r0,|L5.192|
00002e  4e25              LDR      r6,|L5.196|
000030  3808              SUBS     r0,r0,#8
000032  f8300014          LDRH     r0,[r0,r4,LSL #1]
000036  b2c2              UXTB     r2,r0
000038  4821              LDR      r0,|L5.192|
00003a  380c              SUBS     r0,r0,#0xc
00003c  f8301014          LDRH     r1,[r0,r4,LSL #1]
000040  f8560024          LDR      r0,[r6,r4,LSL #2]
000044  f7fffffe          BL       GPIO_PinAFConfig
;;;343    
;;;344      /* Connect PXx to USARTx_Rx*/
;;;345      GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
000048  481d              LDR      r0,|L5.192|
00004a  1d37              ADDS     r7,r6,#4
00004c  1f80              SUBS     r0,r0,#6
00004e  f8300014          LDRH     r0,[r0,r4,LSL #1]
000052  b2c2              UXTB     r2,r0
000054  481a              LDR      r0,|L5.192|
000056  380a              SUBS     r0,r0,#0xa
000058  f8301014          LDRH     r1,[r0,r4,LSL #1]
00005c  f8570024          LDR      r0,[r7,r4,LSL #2]
000060  f7fffffe          BL       GPIO_PinAFConfig
;;;346    
;;;347      /* Configure USART Tx as alternate function  */
;;;348      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000064  2000              MOVS     r0,#0
000066  f88d0006          STRB     r0,[sp,#6]
;;;349      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00006a  2001              MOVS     r0,#1
00006c  f88d0007          STRB     r0,[sp,#7]
;;;350      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;351    
;;;352      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000070  4813              LDR      r0,|L5.192|
000072  2502              MOVS     r5,#2                 ;350
000074  3810              SUBS     r0,r0,#0x10
000076  f88d5004          STRB     r5,[sp,#4]            ;350
00007a  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;353      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00007e  9000              STR      r0,[sp,#0]
000080  f88d5005          STRB     r5,[sp,#5]
;;;354      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000084  f8560024          LDR      r0,[r6,r4,LSL #2]
000088  4669              MOV      r1,sp
00008a  f7fffffe          BL       GPIO_Init
;;;355    
;;;356      /* Configure USART Rx as alternate function  */
;;;357      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;358      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
00008e  480c              LDR      r0,|L5.192|
000090  f88d5004          STRB     r5,[sp,#4]            ;357
000094  380e              SUBS     r0,r0,#0xe
;;;359      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
000096  4669              MOV      r1,sp
000098  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;358
00009c  9000              STR      r0,[sp,#0]
00009e  f8570024          LDR      r0,[r7,r4,LSL #2]
0000a2  f7fffffe          BL       GPIO_Init
;;;360    
;;;361      /* USART configuration */
;;;362      USART_Init(COM_USART[COM], USART_InitStruct);
0000a6  1f35              SUBS     r5,r6,#4
0000a8  4641              MOV      r1,r8
0000aa  f8550024          LDR      r0,[r5,r4,LSL #2]
0000ae  f7fffffe          BL       USART_Init
;;;363        
;;;364      /* Enable USART */
;;;365      USART_Cmd(COM_USART[COM], ENABLE);
0000b2  f8550024          LDR      r0,[r5,r4,LSL #2]
0000b6  2101              MOVS     r1,#1
0000b8  f7fffffe          BL       USART_Cmd
;;;366    }
0000bc  e8bd81fc          POP      {r2-r8,pc}
;;;367    
                          ENDP

                  |L5.192|
                          DCD      ||.constdata||+0x10
                  |L5.196|
                          DCD      ||.data||+0x4

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;168      */
;;;169    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b51c              PUSH     {r2-r4,lr}
;;;170    {
000002  4604              MOV      r4,r0
;;;171      GPIO_InitTypeDef  GPIO_InitStructure;
;;;172      
;;;173      /* Enable the GPIO_LED Clock */
;;;174      RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  480e              LDR      r0,|L6.64|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;175    
;;;176    
;;;177      /* Configure the GPIO_LED pin */
;;;178      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  480b              LDR      r0,|L6.64|
;;;179      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;180      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000012  2100              MOVS     r1,#0
000014  380a              SUBS     r0,r0,#0xa            ;178
000016  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;178
00001a  9000              STR      r0,[sp,#0]            ;179
00001c  2001              MOVS     r0,#1                 ;179
00001e  f88d0004          STRB     r0,[sp,#4]            ;179
000022  f88d1006          STRB     r1,[sp,#6]
;;;181      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000026  f88d0007          STRB     r0,[sp,#7]
;;;182      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002a  2002              MOVS     r0,#2
00002c  f88d0005          STRB     r0,[sp,#5]
;;;183      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000030  4804              LDR      r0,|L6.68|
000032  4669              MOV      r1,sp
000034  f8500024          LDR      r0,[r0,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;184    }
00003c  bd1c              POP      {r2-r4,pc}
;;;185    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      ||.constdata||+0x40
                  |L6.68|
                          DCD      ||.data||+0x10

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;210      */
;;;211    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L7.16|
;;;212    {
;;;213      GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
000002  4a04              LDR      r2,|L7.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8341              STRH     r1,[r0,#0x1a]
;;;214    }
00000e  4770              BX       lr
;;;215    
                          ENDP

                  |L7.16|
                          DCD      ||.constdata||+0x36
                  |L7.20|
                          DCD      ||.data||+0x10

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;195      */
;;;196    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L8.16|
;;;197    {
;;;198      GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
000002  4a04              LDR      r2,|L8.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  8301              STRH     r1,[r0,#0x18]
;;;199    }
00000e  4770              BX       lr
;;;200    
                          ENDP

                  |L8.16|
                          DCD      ||.constdata||+0x36
                  |L8.20|
                          DCD      ||.data||+0x10

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;225      */
;;;226    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L9.20|
;;;227    {
;;;228      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  694a              LDR      r2,[r1,#0x14]
000008  4b03              LDR      r3,|L9.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  614a              STR      r2,[r1,#0x14]
;;;229    }
000012  4770              BX       lr
;;;230    
                          ENDP

                  |L9.20|
                          DCD      ||.data||+0x10
                  |L9.24|
                          DCD      ||.constdata||+0x36

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;311      */
;;;312    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  4903              LDR      r1,|L10.16|
;;;313    {
;;;314      return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000002  4a04              LDR      r2,|L10.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  f7ffbffe          B.W      GPIO_ReadInputDataBit
;;;315    }
;;;316    
                          ENDP

                  |L10.16|
                          DCD      ||.constdata||+0x18
                  |L10.20|
                          DCD      ||.data||+0x20

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;249      */
;;;250    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  4604              MOV      r4,r0
;;;252      GPIO_InitTypeDef GPIO_InitStructure;
;;;253      EXTI_InitTypeDef EXTI_InitStructure;
;;;254      NVIC_InitTypeDef NVIC_InitStructure;
;;;255    
;;;256    
;;;257      /* Enable the BUTTON Clock */
;;;258      RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
000004  4827              LDR      r0,|L11.164|
000006  460d              MOV      r5,r1                 ;251
000008  b086              SUB      sp,sp,#0x18           ;251
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;259      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000014  2101              MOVS     r1,#1
000016  0388              LSLS     r0,r1,#14
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;260    
;;;261      /* Configure Button pin as input */
;;;262      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;263      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;264      GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00001c  4821              LDR      r0,|L11.164|
00001e  2600              MOVS     r6,#0                 ;262
000020  f88d6010          STRB     r6,[sp,#0x10]         ;262
000024  3838              SUBS     r0,r0,#0x38
000026  f88d6013          STRB     r6,[sp,#0x13]         ;263
00002a  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;265      GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
00002e  9003              STR      r0,[sp,#0xc]
000030  481d              LDR      r0,|L11.168|
000032  a903              ADD      r1,sp,#0xc
000034  f8500024          LDR      r0,[r0,r4,LSL #2]
000038  f7fffffe          BL       GPIO_Init
;;;266    
;;;267    
;;;268      if (Button_Mode == BUTTON_MODE_EXTI)
00003c  2d01              CMP      r5,#1
00003e  d12e              BNE      |L11.158|
;;;269      {
;;;270        /* Connect Button EXTI Line to Button GPIO Pin */
;;;271        SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000040  4818              LDR      r0,|L11.164|
000042  3826              SUBS     r0,r0,#0x26
000044  f8300014          LDRH     r0,[r0,r4,LSL #1]
000048  b2c1              UXTB     r1,r0
00004a  4816              LDR      r0,|L11.164|
00004c  382c              SUBS     r0,r0,#0x2c
00004e  f8300014          LDRH     r0,[r0,r4,LSL #1]
000052  b2c0              UXTB     r0,r0
000054  f7fffffe          BL       SYSCFG_EXTILineConfig
;;;272    
;;;273        /* Configure Button EXTI line */
;;;274        EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
000058  4812              LDR      r0,|L11.164|
00005a  3832              SUBS     r0,r0,#0x32
00005c  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;275        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000060  9000              STR      r0,[sp,#0]
000062  f88d6004          STRB     r6,[sp,#4]
;;;276    
;;;277        if(Button != BUTTON_WAKEUP)
000066  b10c              CBZ      r4,|L11.108|
;;;278        {
;;;279          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
000068  200c              MOVS     r0,#0xc
00006a  e000              B        |L11.110|
                  |L11.108|
;;;280        }
;;;281        else
;;;282        {
;;;283          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
00006c  2008              MOVS     r0,#8
                  |L11.110|
00006e  f88d0005          STRB     r0,[sp,#5]
;;;284        }
;;;285        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000072  2501              MOVS     r5,#1
000074  f88d5006          STRB     r5,[sp,#6]
;;;286        EXTI_Init(&EXTI_InitStructure);
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       EXTI_Init
;;;287    
;;;288        /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;289        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
00007e  4809              LDR      r0,|L11.164|
000080  3820              SUBS     r0,r0,#0x20
000082  f8300014          LDRH     r0,[r0,r4,LSL #1]
000086  f88d0008          STRB     r0,[sp,#8]
;;;290        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
00008a  200f              MOVS     r0,#0xf
00008c  f88d0009          STRB     r0,[sp,#9]
;;;291        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
000090  f88d000a          STRB     r0,[sp,#0xa]
;;;292        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000094  f88d500b          STRB     r5,[sp,#0xb]
;;;293    
;;;294        NVIC_Init(&NVIC_InitStructure); 
000098  a802              ADD      r0,sp,#8
00009a  f7fffffe          BL       NVIC_Init
                  |L11.158|
;;;295      }
;;;296    }
00009e  b006              ADD      sp,sp,#0x18
0000a0  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      ||.constdata||+0x50
                  |L11.168|
                          DCD      ||.data||+0x20

                          AREA ||i.sEE_LowLevel_DMAConfig||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_DMAConfig PROC
;;;694      */
;;;695    void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
000000  4b08              LDR      r3,|L12.36|
;;;696    { 
;;;697      /* Initialize the DMA with the new parameters */
;;;698      if (Direction == sEE_DIRECTION_TX)
000002  6098              STR      r0,[r3,#8]  ; sEEDMA_InitStructure
000004  b132              CBZ      r2,|L12.20|
;;;699      {
;;;700        /* Configure the DMA Tx Stream with the buffer address and the buffer size */
;;;701        sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
;;;702        sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
;;;703        sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
;;;704        DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
;;;705      }
;;;706      else
;;;707      { 
;;;708        /* Configure the DMA Rx Stream with the buffer address and the buffer size */
;;;709        sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
;;;710        sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
000006  2000              MOVS     r0,#0
000008  e9c30103          STRD     r0,r1,[r3,#0xc]
;;;711        sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
;;;712        DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
00000c  4619              MOV      r1,r3
00000e  4806              LDR      r0,|L12.40|
                  |L12.16|
000010  f7ffbffe          B.W      DMA_Init
                  |L12.20|
000014  2040              MOVS     r0,#0x40              ;702
000016  e9c30103          STRD     r0,r1,[r3,#0xc]       ;702
00001a  4803              LDR      r0,|L12.40|
00001c  4901              LDR      r1,|L12.36|
00001e  3090              ADDS     r0,r0,#0x90           ;704
000020  e7f6              B        |L12.16|
;;;713      }
;;;714    }
;;;715    
                          ENDP

000022  0000              DCW      0x0000
                  |L12.36|
                          DCD      ||.bss||
                  |L12.40|
                          DCD      0x40026010

                          AREA ||i.sEE_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_DeInit PROC
;;;548      */
;;;549    void sEE_LowLevel_DeInit(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;550    {
;;;551      GPIO_InitTypeDef  GPIO_InitStructure; 
;;;552       
;;;553      /* sEE_I2C Peripheral Disable */
;;;554      I2C_Cmd(sEE_I2C, DISABLE);
000002  4c20              LDR      r4,|L13.132|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;555     
;;;556      /* sEE_I2C DeInit */
;;;557      I2C_DeInit(sEE_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;558    
;;;559      /*!< sEE_I2C Periph clock disable */
;;;560      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;561        
;;;562      /*!< GPIO configuration */  
;;;563      /*!< Configure sEE_I2C pins: SCL */
;;;564      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
;;;565      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00001e  2400              MOVS     r4,#0
;;;566      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;567      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000020  4d19              LDR      r5,|L13.136|
000022  9000              STR      r0,[sp,#0]            ;565
000024  f88d4004          STRB     r4,[sp,#4]            ;565
000028  f88d4007          STRB     r4,[sp,#7]            ;566
00002c  4669              MOV      r1,sp
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;568    
;;;569      /*!< Configure sEE_I2C pins: SDA */
;;;570      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000034  1568              ASRS     r0,r5,#21
;;;571      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000036  9000              STR      r0,[sp,#0]
000038  4669              MOV      r1,sp
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       GPIO_Init
;;;572    
;;;573      /* Configure and enable I2C DMA TX Stream interrupt */
;;;574      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
000040  4d12              LDR      r5,|L13.140|
000042  2011              MOVS     r0,#0x11
000044  7028              STRB     r0,[r5,#0]
;;;575      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
000046  706c              STRB     r4,[r5,#1]
;;;576      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
000048  70ac              STRB     r4,[r5,#2]
;;;577      NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
00004a  70ec              STRB     r4,[r5,#3]
;;;578      NVIC_Init(&NVIC_InitStructure);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       NVIC_Init
;;;579    
;;;580      /* Configure and enable I2C DMA RX Stream interrupt */
;;;581      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
000052  200b              MOVS     r0,#0xb
000054  7028              STRB     r0,[r5,#0]
;;;582      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
000056  706c              STRB     r4,[r5,#1]
;;;583      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
000058  70ac              STRB     r4,[r5,#2]
;;;584      NVIC_Init(&NVIC_InitStructure);   
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       NVIC_Init
;;;585      
;;;586      /* Disable and Deinitialize the DMA Streams */
;;;587      DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
000060  4c0b              LDR      r4,|L13.144|
000062  2100              MOVS     r1,#0
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       DMA_Cmd
;;;588      DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
00006a  4d09              LDR      r5,|L13.144|
00006c  2100              MOVS     r1,#0
00006e  3d90              SUBS     r5,r5,#0x90
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       DMA_Cmd
;;;589      DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       DMA_DeInit
;;;590      DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       DMA_DeInit
;;;591    }
000082  bd7c              POP      {r2-r6,pc}
;;;592    
                          ENDP

                  |L13.132|
                          DCD      0x40005400
                  |L13.136|
                          DCD      0x40020400
                  |L13.140|
                          DCD      ||.data||+0xc
                  |L13.144|
                          DCD      0x400260a0

                          AREA ||i.sEE_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sEE_LowLevel_Init PROC
;;;597      */
;;;598    void sEE_LowLevel_Init(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;599    {
;;;600      GPIO_InitTypeDef  GPIO_InitStructure; 
;;;601       
;;;602      /*!< sEE_I2C Periph clock enable */
;;;603      RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
000004  f44f1800          MOV      r8,#0x200000
000008  2101              MOVS     r1,#1
00000a  4640              MOV      r0,r8
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;604      
;;;605      /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
;;;606      RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
000010  2101              MOVS     r1,#1
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;607    
;;;608      RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0388              LSLS     r0,r1,#14
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;609      
;;;610      /* Reset sEE_I2C IP */
;;;611      RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);
000020  2101              MOVS     r1,#1
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;612      
;;;613      /* Release reset signal of sEE_I2C IP */
;;;614      RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
000028  2100              MOVS     r1,#0
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;615        
;;;616      /*!< GPIO configuration */
;;;617      /* Connect PXx to I2C_SCL*/
;;;618      GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
000030  4d3c              LDR      r5,|L14.292|
000032  2204              MOVS     r2,#4
000034  2106              MOVS     r1,#6
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       GPIO_PinAFConfig
;;;619      /* Connect PXx to I2C_SDA*/
;;;620      GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
00003c  2204              MOVS     r2,#4
00003e  2109              MOVS     r1,#9
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       GPIO_PinAFConfig
;;;621      
;;;622      /*!< Configure sEE_I2C pins: SCL */   
;;;623      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
;;;624      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000046  2002              MOVS     r0,#2
000048  f88d0004          STRB     r0,[sp,#4]
;;;625      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  f88d0005          STRB     r0,[sp,#5]
;;;626      GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000050  2701              MOVS     r7,#1
000052  2640              MOVS     r6,#0x40              ;623
000054  f88d7006          STRB     r7,[sp,#6]
;;;627      GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000058  2400              MOVS     r4,#0
00005a  9600              STR      r6,[sp,#0]            ;624
00005c  f88d4007          STRB     r4,[sp,#7]
;;;628      GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000060  4669              MOV      r1,sp
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       GPIO_Init
;;;629    
;;;630      /*!< Configure sEE_I2C pins: SDA */
;;;631      GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
000068  1568              ASRS     r0,r5,#21
;;;632      GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
00006a  9000              STR      r0,[sp,#0]
00006c  4669              MOV      r1,sp
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       GPIO_Init
;;;633    
;;;634     
;;;635      /* Configure and enable I2C DMA TX Channel interrupt */
;;;636      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
000074  4d2c              LDR      r5,|L14.296|
000076  2011              MOVS     r0,#0x11
000078  7028              STRB     r0,[r5,#0]
;;;637      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
00007a  706c              STRB     r4,[r5,#1]
;;;638      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
00007c  70ac              STRB     r4,[r5,#2]
;;;639      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00007e  70ef              STRB     r7,[r5,#3]
;;;640      NVIC_Init(&NVIC_InitStructure);
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       NVIC_Init
;;;641    
;;;642      /* Configure and enable I2C DMA RX Channel interrupt */
;;;643      NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
000086  200b              MOVS     r0,#0xb
000088  7028              STRB     r0,[r5,#0]
;;;644      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
00008a  706c              STRB     r4,[r5,#1]
;;;645      NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
00008c  70ac              STRB     r4,[r5,#2]
;;;646      NVIC_Init(&NVIC_InitStructure);  
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       NVIC_Init
;;;647      
;;;648      /*!< I2C DMA TX and RX channels configuration */
;;;649      /* Enable the DMA clock */
;;;650      RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
000094  2101              MOVS     r1,#1
000096  4640              MOV      r0,r8
000098  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;651      
;;;652      /* Clear any pending flag on Rx Stream  */
;;;653      DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
00009c  4d24              LDR      r5,|L14.304|
00009e  4923              LDR      r1,|L14.300|
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       DMA_ClearFlag
;;;654                                           sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
;;;655      /* Disable the EE I2C Tx DMA stream */
;;;656      DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
0000a6  2100              MOVS     r1,#0
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       DMA_Cmd
;;;657      /* Configure the DMA stream for the EE I2C peripheral TX direction */
;;;658      DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       DMA_DeInit
;;;659      sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
0000b4  491f              LDR      r1,|L14.308|
0000b6  04f0              LSLS     r0,r6,#19
;;;660      sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
0000b8  1d0a              ADDS     r2,r1,#4
0000ba  6008              STR      r0,[r1,#0]  ; sEEDMA_InitStructure
0000bc  481e              LDR      r0,|L14.312|
0000be  c251              STM      r2!,{r0,r4,r6}
;;;661      sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
;;;662      sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
;;;663      sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
0000c0  f64f70ff          MOV      r0,#0xffff
0000c4  e9c10404          STRD     r0,r4,[r1,#0x10]
;;;664      sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;665      sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000c8  1528              ASRS     r0,r5,#20
0000ca  e9c10406          STRD     r0,r4,[r1,#0x18]
;;;666      sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
;;;667      sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
;;;668      sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;669      sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
0000ce  f44f3040          MOV      r0,#0x30000
0000d2  620c              STR      r4,[r1,#0x20]  ; sEEDMA_InitStructure
0000d4  e9c14009          STRD     r4,r0,[r1,#0x24]
;;;670      sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
0000d8  2004              MOVS     r0,#4
;;;671      sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
0000da  62c8              STR      r0,[r1,#0x2c]  ; sEEDMA_InitStructure
0000dc  2003              MOVS     r0,#3
0000de  e9c1040c          STRD     r0,r4,[r1,#0x30]
;;;672      sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
;;;673      sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
;;;674      DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
0000e2  638c              STR      r4,[r1,#0x38]  ; sEEDMA_InitStructure
0000e4  4628              MOV      r0,r5
0000e6  f7fffffe          BL       DMA_Init
;;;675    
;;;676      /* Clear any pending flag on Rx Stream */
;;;677      DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
0000ea  4c11              LDR      r4,|L14.304|
0000ec  4913              LDR      r1,|L14.316|
0000ee  3c90              SUBS     r4,r4,#0x90
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       DMA_ClearFlag
;;;678                                           sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
;;;679      /* Disable the EE I2C DMA Rx stream */
;;;680      DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
0000f6  2100              MOVS     r1,#0
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       DMA_Cmd
;;;681      /* Configure the DMA stream for the EE I2C peripheral RX direction */
;;;682      DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       DMA_DeInit
;;;683      DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
000104  490b              LDR      r1,|L14.308|
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       DMA_Init
;;;684      
;;;685      /* Enable the DMA Channels Interrupts */
;;;686      DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
00010c  2201              MOVS     r2,#1
00010e  2110              MOVS     r1,#0x10
000110  4628              MOV      r0,r5
000112  f7fffffe          BL       DMA_ITConfig
;;;687      DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
000116  2201              MOVS     r2,#1
000118  2110              MOVS     r1,#0x10
00011a  4620              MOV      r0,r4
00011c  f7fffffe          BL       DMA_ITConfig
;;;688    }
000120  e8bd81fc          POP      {r2-r8,pc}
;;;689    
                          ENDP

                  |L14.292|
                          DCD      0x40020400
                  |L14.296|
                          DCD      ||.data||+0xc
                  |L14.300|
                          DCD      0x203d0000
                  |L14.304|
                          DCD      0x400260a0
                  |L14.308|
                          DCD      ||.bss||
                  |L14.312|
                          DCD      0x40005410
                  |L14.316|
                          DCD      0x1080003d

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sEEDMA_InitStructure
                          %        60

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_PIN
000000  0400              DCW      0x0400
                  COM_RX_PIN
000002  0800              DCW      0x0800
                  COM_TX_PIN_SOURCE
000004  000a              DCW      0x000a
                  COM_RX_PIN_SOURCE
000006  000b              DCW      0x000b
                  COM_TX_AF
000008  0007              DCW      0x0007
                  COM_RX_AF
00000a  0007              DCW      0x0007
                  COM_USART_CLK
                          DCD      0x00040000
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                  BUTTON_PIN
000018  00012000          DCW      0x0001,0x2000
00001c  8000              DCW      0x8000
                  BUTTON_EXTI_LINE
00001e  0001              DCW      0x0001
000020  20008000          DCW      0x2000,0x8000
                  BUTTON_PORT_SOURCE
000024  00000002          DCW      0x0000,0x0002
000028  0006              DCW      0x0006
                  BUTTON_PIN_SOURCE
00002a  0000              DCW      0x0000
00002c  000d000f          DCW      0x000d,0x000f
                  BUTTON_IRQn
000030  00060028          DCW      0x0006,0x0028
000034  0028              DCW      0x0028
                  GPIO_PIN
000036  2000              DCW      0x2000
000038  01000200          DCW      0x0100,0x0200
00003c  0080              DCW      0x0080
00003e  0000              DCB      0x00,0x00
                  GPIO_CLK
                          DCD      0x00000008
                          DCD      0x00000040
                          DCD      0x00000100
                          DCD      0x00000004
                  BUTTON_CLK
                          DCD      0x00000001
                          DCD      0x00000004
                          DCD      0x00000040

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40004800
                  COM_TX_PORT
                          DCD      0x40020800
                  COM_RX_PORT
                          DCD      0x40020800
                  NVIC_InitStructure
                          DCD      0x00000000
                  GPIO_PORT
                          DCD      0x40020c00
                          DCD      0x40021800
                          DCD      0x40022000
                          DCD      0x40020800
                  BUTTON_PORT
                          DCD      0x40020000
                          DCD      0x40020800
                          DCD      0x40021800

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Utilities\\STM32_EVAL\\STM3240_41_G_EVAL\\stm324xg_eval.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm324xg_eval_c_c84236cb____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm324xg_eval_c_c84236cb____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm324xg_eval_c_c84236cb____REVSH|
#line 128
|__asm___15_stm324xg_eval_c_c84236cb____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
