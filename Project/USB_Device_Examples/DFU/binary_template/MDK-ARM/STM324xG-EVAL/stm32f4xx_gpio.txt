; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_gpio.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_gpio.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;125      */
;;;126    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  492f              LDR      r1,|L1.192|
;;;127    {
000002  b510              PUSH     {r4,lr}
;;;128      /* Check the parameters */
;;;129      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;130    
;;;131      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;132      {
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2001              MOVS     r0,#1
000014  e04f              B        |L1.182|
                  |L1.22|
;;;135      }
;;;136      else if (GPIOx == GPIOB)
000016  492b              LDR      r1,|L1.196|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;137      {
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2002              MOVS     r0,#2
000028  e045              B        |L1.182|
                  |L1.42|
;;;140      }
;;;141      else if (GPIOx == GPIOC)
00002a  4927              LDR      r1,|L1.200|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;142      {
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  e03b              B        |L1.182|
                  |L1.62|
;;;145      }
;;;146      else if (GPIOx == GPIOD)
00003e  4923              LDR      r1,|L1.204|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;147      {
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2008              MOVS     r0,#8
000048  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2008              MOVS     r0,#8
000050  e031              B        |L1.182|
                  |L1.82|
;;;150      }
;;;151      else if (GPIOx == GPIOE)
000052  491f              LDR      r1,|L1.208|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;152      {
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2010              MOVS     r0,#0x10
00005c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2010              MOVS     r0,#0x10
000064  e027              B        |L1.182|
                  |L1.102|
;;;155      }
;;;156      else if (GPIOx == GPIOF)
000066  491b              LDR      r1,|L1.212|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;157      {
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  e01d              B        |L1.182|
                  |L1.122|
;;;160      }
;;;161      else if (GPIOx == GPIOG)
00007a  4917              LDR      r1,|L1.216|
00007c  4288              CMP      r0,r1
00007e  d106              BNE      |L1.142|
;;;162      {
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
000080  2101              MOVS     r1,#1
000082  2040              MOVS     r0,#0x40
000084  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
000088  2100              MOVS     r1,#0
00008a  2040              MOVS     r0,#0x40
00008c  e013              B        |L1.182|
                  |L1.142|
;;;165      }
;;;166      else if (GPIOx == GPIOH)
00008e  4913              LDR      r1,|L1.220|
000090  4288              CMP      r0,r1
000092  d106              BNE      |L1.162|
;;;167      {
;;;168        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
000094  2101              MOVS     r1,#1
000096  2080              MOVS     r0,#0x80
000098  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
00009c  2100              MOVS     r1,#0
00009e  2080              MOVS     r0,#0x80
0000a0  e009              B        |L1.182|
                  |L1.162|
;;;170      }
;;;171      else
;;;172      {
;;;173        if (GPIOx == GPIOI)
0000a2  490f              LDR      r1,|L1.224|
0000a4  4288              CMP      r0,r1
0000a6  d10a              BNE      |L1.190|
;;;174        {
;;;175          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000a8  1584              ASRS     r4,r0,#22
0000aa  2101              MOVS     r1,#1
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;176          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000b2  2100              MOVS     r1,#0
0000b4  4620              MOV      r0,r4
                  |L1.182|
0000b6  e8bd4010          POP      {r4,lr}
0000ba  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.190|
;;;177        }
;;;178      }
;;;179    }
0000be  bd10              POP      {r4,pc}
;;;180    
                          ENDP

                  |L1.192|
                          DCD      0x40020000
                  |L1.196|
                          DCD      0x40020400
                  |L1.200|
                          DCD      0x40020800
                  |L1.204|
                          DCD      0x40020c00
                  |L1.208|
                          DCD      0x40021000
                  |L1.212|
                          DCD      0x40021400
                  |L1.216|
                          DCD      0x40021800
                  |L1.220|
                          DCD      0x40021c00
                  |L1.224|
                          DCD      0x40022000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;187      */
;;;188    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;189    {
;;;190      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000002  2200              MOVS     r2,#0
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;196      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;197    
;;;198      /* -------------------------Configure the port pins---------------- */
;;;199      /*-- GPIO Mode Configuration --*/
;;;200      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;201      {
;;;202        pos = ((uint32_t)0x01) << pinpos;
000004  2301              MOVS     r3,#1
;;;203        /* Get the port pins position */
;;;204        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;205    
;;;206        if (currentpin == pos)
;;;207        {
;;;208          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000006  f04f0c03          MOV      r12,#3
00000a  bf00              NOP                            ;202
                  |L2.12|
00000c  680d              LDR      r5,[r1,#0]            ;204
00000e  fa03f402          LSL      r4,r3,r2              ;202
000012  4025              ANDS     r5,r5,r4              ;204
000014  42a5              CMP      r5,r4                 ;206
000016  d12d              BNE      |L2.116|
000018  6806              LDR      r6,[r0,#0]
00001a  0054              LSLS     r4,r2,#1
00001c  fa0cf504          LSL      r5,r12,r4
000020  43ae              BICS     r6,r6,r5
000022  6006              STR      r6,[r0,#0]
;;;209          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000024  790e              LDRB     r6,[r1,#4]
000026  6807              LDR      r7,[r0,#0]
000028  40a6              LSLS     r6,r6,r4
00002a  433e              ORRS     r6,r6,r7
00002c  6006              STR      r6,[r0,#0]
;;;210    
;;;211          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
00002e  790e              LDRB     r6,[r1,#4]
000030  2e01              CMP      r6,#1
000032  d001              BEQ      |L2.56|
000034  2e02              CMP      r6,#2
000036  d112              BNE      |L2.94|
                  |L2.56|
;;;212          {
;;;213            /* Check Speed mode parameters */
;;;214            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;215    
;;;216            /* Speed mode configuration */
;;;217            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000038  6886              LDR      r6,[r0,#8]
00003a  43ae              BICS     r6,r6,r5
00003c  6086              STR      r6,[r0,#8]
;;;218            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00003e  794d              LDRB     r5,[r1,#5]
000040  6886              LDR      r6,[r0,#8]
000042  40a5              LSLS     r5,r5,r4
000044  4335              ORRS     r5,r5,r6
000046  6085              STR      r5,[r0,#8]
;;;219    
;;;220            /* Check Output mode parameters */
;;;221            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;222    
;;;223            /* Output mode configuration*/
;;;224            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
000048  6845              LDR      r5,[r0,#4]
00004a  fa03f602          LSL      r6,r3,r2
00004e  43b5              BICS     r5,r5,r6
000050  6045              STR      r5,[r0,#4]
;;;225            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000052  6845              LDR      r5,[r0,#4]
000054  798e              LDRB     r6,[r1,#6]
000056  4096              LSLS     r6,r6,r2
000058  b2b6              UXTH     r6,r6
00005a  4335              ORRS     r5,r5,r6
00005c  6045              STR      r5,[r0,#4]
                  |L2.94|
;;;226          }
;;;227    
;;;228          /* Pull-up Pull down resistor configuration*/
;;;229          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
00005e  68c5              LDR      r5,[r0,#0xc]
000060  0056              LSLS     r6,r2,#1
000062  fa0cf706          LSL      r7,r12,r6
000066  43bd              BICS     r5,r5,r7
000068  60c5              STR      r5,[r0,#0xc]
;;;230          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00006a  79cd              LDRB     r5,[r1,#7]
00006c  40a5              LSLS     r5,r5,r4
00006e  68c4              LDR      r4,[r0,#0xc]
000070  4325              ORRS     r5,r5,r4
000072  60c5              STR      r5,[r0,#0xc]
                  |L2.116|
000074  1c52              ADDS     r2,r2,#1              ;200
000076  2a10              CMP      r2,#0x10              ;200
000078  d3c8              BCC      |L2.12|
;;;231        }
;;;232      }
;;;233    }
00007a  bdf0              POP      {r4-r7,pc}
;;;234    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;534      */
;;;535    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;536    {
;;;537      uint32_t temp = 0x00;
;;;538      uint32_t temp_2 = 0x00;
;;;539      
;;;540      /* Check the parameters */
;;;541      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;542      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;543      assert_param(IS_GPIO_AF(GPIO_AF));
;;;544      
;;;545      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;546      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  08c9              LSRS     r1,r1,#3
000008  b510              PUSH     {r4,lr}               ;536
00000a  eb000081          ADD      r0,r0,r1,LSL #2
00000e  6a01              LDR      r1,[r0,#0x20]
000010  240f              MOVS     r4,#0xf
000012  409c              LSLS     r4,r4,r3
000014  43a1              BICS     r1,r1,r4
000016  6201              STR      r1,[r0,#0x20]
;;;547      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
000018  6a01              LDR      r1,[r0,#0x20]
00001a  4311              ORRS     r1,r1,r2
;;;548      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001c  6201              STR      r1,[r0,#0x20]
;;;549    }
00001e  bd10              POP      {r4,pc}
;;;550    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;260      */
;;;261    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f4413280          ORR      r2,r1,#0x10000
;;;262    {
;;;263      __IO uint32_t tmp = 0x00010000;
;;;264    
;;;265      /* Check the parameters */
;;;266      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;267      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;268    
;;;269      tmp |= GPIO_Pin;
;;;270      /* Set LCKK bit */
;;;271      GPIOx->LCKR = tmp;
000004  61c2              STR      r2,[r0,#0x1c]
;;;272      /* Reset LCKK bit */
;;;273      GPIOx->LCKR =  GPIO_Pin;
000006  61c1              STR      r1,[r0,#0x1c]
;;;274      /* Set LCKK bit */
;;;275      GPIOx->LCKR = tmp;
000008  61c2              STR      r2,[r0,#0x1c]
;;;276      /* Read LCKK bit*/
;;;277      tmp = GPIOx->LCKR;
00000a  69c1              LDR      r1,[r0,#0x1c]
;;;278      /* Read LCKK bit*/
;;;279      tmp = GPIOx->LCKR;
00000c  69c0              LDR      r0,[r0,#0x1c]
;;;280    }
00000e  4770              BX       lr
;;;281    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;328      */
;;;329    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6900              LDR      r0,[r0,#0x10]
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;333    
;;;334      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;335    }
000004  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;304      */
;;;305    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;306    {
;;;307      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;308    
;;;309      /* Check the parameters */
;;;310      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;311      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;312    
;;;313      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6912              LDR      r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L6.12|
;;;314      {
;;;315        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;316      }
;;;317      else
;;;318      {
;;;319        bitstatus = (uint8_t)Bit_RESET;
;;;320      }
;;;321      return bitstatus;
;;;322    }
00000c  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;367      */
;;;368    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  6940              LDR      r0,[r0,#0x14]
;;;369    {
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372    
;;;373      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;374    }
000004  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;343      */
;;;344    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;345    {
;;;346      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;347    
;;;348      /* Check the parameters */
;;;349      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;350      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;351    
;;;352      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6952              LDR      r2,[r2,#0x14]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;353      {
;;;354        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;355      }
;;;356      else
;;;357      {
;;;358        bitstatus = (uint8_t)Bit_RESET;
;;;359      }
;;;360      return bitstatus;
;;;361    }
00000c  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;404      */
;;;405    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;409      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;410    
;;;411      GPIOx->BSRRH = GPIO_Pin;
;;;412    }
000002  4770              BX       lr
;;;413    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;385      */
;;;386    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;387    {
;;;388      /* Check the parameters */
;;;389      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;390      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;391    
;;;392      GPIOx->BSRRL = GPIO_Pin;
;;;393    }
000002  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;239      */
;;;240    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;241    {
;;;242      /* Reset GPIO init structure parameters values */
;;;243      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;244      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;245      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00000a  7141              STRB     r1,[r0,#5]
;;;246      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;247      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;248    }
000010  4770              BX       lr
;;;249    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;461      */
;;;462    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;463    {
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;466    
;;;467      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;468    }
000006  4770              BX       lr
;;;469    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;447      */
;;;448    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;449    {
;;;450      /* Check the parameters */
;;;451      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;452    
;;;453      GPIOx->ODR = PortVal;
;;;454    }
000002  4770              BX       lr
;;;455    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;424      */
;;;425    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L14.6|
;;;426    {
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;429      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;430      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;431    
;;;432      if (BitVal != Bit_RESET)
;;;433      {
;;;434        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
;;;435      }
;;;436      else
;;;437      {
;;;438        GPIOx->BSRRH = GPIO_Pin ;
;;;439      }
;;;440    }
000004  4770              BX       lr
                  |L14.6|
000006  8341              STRH     r1,[r0,#0x1a]         ;438
000008  4770              BX       lr
;;;441    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_gpio.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 128
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
