; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\STM324xG-EVAL\stm32f4xx_rcc.o --asm_dir=.\STM324xG-EVAL\ --list_dir=.\STM324xG-EVAL\ --depend=.\STM324xG-EVAL\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O3 -I..\ -I..\inc -I..\..\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\..\..\..\Utilities\STM32_EVAL -I..\..\..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\..\..\Utilities\STM32_EVAL\STM3240_41_G_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSE_STM324xG_EVAL --omf_browse=.\STM324xG-EVAL\stm32f4xx_rcc.crf ..\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockCmd PROC
;;;1090     */
;;;1091   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L1.20|
;;;1092   {
;;;1093     /* Check the parameters */
;;;1094     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;1095   
;;;1096     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1097     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1098     {
;;;1099       RCC->AHB1ENR |= RCC_AHB1Periph;
;;;1100     }
;;;1101     else
;;;1102     {
;;;1103       RCC->AHB1ENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L1.12|
000008  4301              ORRS     r1,r1,r0              ;1099
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  4381              BICS     r1,r1,r0
                  |L1.14|
00000e  6011              STR      r1,[r2,#0]            ;1099
;;;1104     }
;;;1105   }
000010  4770              BX       lr
;;;1106   
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40023830

                          AREA ||i.RCC_AHB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;1460     */
;;;1461   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L2.20|
;;;1462   {
;;;1463     /* Check the parameters */
;;;1464     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;1465     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1466     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1467     {
;;;1468       RCC->AHB1LPENR |= RCC_AHB1Periph;
;;;1469     }
;;;1470     else
;;;1471     {
;;;1472       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L2.12|
000008  4301              ORRS     r1,r1,r0              ;1468
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  4381              BICS     r1,r1,r0
                  |L2.14|
00000e  6011              STR      r1,[r2,#0]            ;1468
;;;1473     }
;;;1474   }
000010  4770              BX       lr
;;;1475   
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40023850

                          AREA ||i.RCC_AHB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphResetCmd PROC
;;;1278     */
;;;1279   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;1280   {
;;;1281     /* Check the parameters */
;;;1282     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;1283     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1284   
;;;1285     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1286     {
;;;1287       RCC->AHB1RSTR |= RCC_AHB1Periph;
;;;1288     }
;;;1289     else
;;;1290     {
;;;1291       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L3.12|
000008  4301              ORRS     r1,r1,r0              ;1287
00000a  e000              B        |L3.14|
                  |L3.12|
00000c  4381              BICS     r1,r1,r0
                  |L3.14|
00000e  6011              STR      r1,[r2,#0]            ;1287
;;;1292     }
;;;1293   }
000010  4770              BX       lr
;;;1294   
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40023810

                          AREA ||i.RCC_AHB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockCmd PROC
;;;1122     */
;;;1123   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;1124   {
;;;1125     /* Check the parameters */
;;;1126     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1127     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1128   
;;;1129     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1130     {
;;;1131       RCC->AHB2ENR |= RCC_AHB2Periph;
;;;1132     }
;;;1133     else
;;;1134     {
;;;1135       RCC->AHB2ENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;1131
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6011              STR      r1,[r2,#0]            ;1131
;;;1136     }
;;;1137   }
000010  4770              BX       lr
;;;1138   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40023834

                          AREA ||i.RCC_AHB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;1492     */
;;;1493   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L5.20|
;;;1494   {
;;;1495     /* Check the parameters */
;;;1496     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1497     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1498     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1499     {
;;;1500       RCC->AHB2LPENR |= RCC_AHB2Periph;
;;;1501     }
;;;1502     else
;;;1503     {
;;;1504       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L5.12|
000008  4301              ORRS     r1,r1,r0              ;1500
00000a  e000              B        |L5.14|
                  |L5.12|
00000c  4381              BICS     r1,r1,r0
                  |L5.14|
00000e  6011              STR      r1,[r2,#0]            ;1500
;;;1505     }
;;;1506   }
000010  4770              BX       lr
;;;1507   
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40023854

                          AREA ||i.RCC_AHB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphResetCmd PROC
;;;1307     */
;;;1308   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L6.20|
;;;1309   {
;;;1310     /* Check the parameters */
;;;1311     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1312     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1313   
;;;1314     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1315     {
;;;1316       RCC->AHB2RSTR |= RCC_AHB2Periph;
;;;1317     }
;;;1318     else
;;;1319     {
;;;1320       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L6.12|
000008  4301              ORRS     r1,r1,r0              ;1316
00000a  e000              B        |L6.14|
                  |L6.12|
00000c  4381              BICS     r1,r1,r0
                  |L6.14|
00000e  6011              STR      r1,[r2,#0]            ;1316
;;;1321     }
;;;1322   }
000010  4770              BX       lr
;;;1323   
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0x40023814

                          AREA ||i.RCC_AHB3PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockCmd PROC
;;;1149     */
;;;1150   void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L7.20|
;;;1151   {
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
;;;1154     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1155   
;;;1156     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1157     {
;;;1158       RCC->AHB3ENR |= RCC_AHB3Periph;
;;;1159     }
;;;1160     else
;;;1161     {
;;;1162       RCC->AHB3ENR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L7.12|
000008  4301              ORRS     r1,r1,r0              ;1158
00000a  e000              B        |L7.14|
                  |L7.12|
00000c  4381              BICS     r1,r1,r0
                  |L7.14|
00000e  6011              STR      r1,[r2,#0]            ;1158
;;;1163     }
;;;1164   }
000010  4770              BX       lr
;;;1165   
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40023838

                          AREA ||i.RCC_AHB3PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockLPModeCmd PROC
;;;1519     */
;;;1520   void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L8.20|
;;;1521   {
;;;1522     /* Check the parameters */
;;;1523     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1524     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1525     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1526     {
;;;1527       RCC->AHB3LPENR |= RCC_AHB3Periph;
;;;1528     }
;;;1529     else
;;;1530     {
;;;1531       RCC->AHB3LPENR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L8.12|
000008  4301              ORRS     r1,r1,r0              ;1527
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  4381              BICS     r1,r1,r0
                  |L8.14|
00000e  6011              STR      r1,[r2,#0]            ;1527
;;;1532     }
;;;1533   }
000010  4770              BX       lr
;;;1534   
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40023858

                          AREA ||i.RCC_AHB3PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphResetCmd PROC
;;;1331     */
;;;1332   void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L9.20|
;;;1333   {
;;;1334     /* Check the parameters */
;;;1335     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1336     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1337   
;;;1338     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1339     {
;;;1340       RCC->AHB3RSTR |= RCC_AHB3Periph;
;;;1341     }
;;;1342     else
;;;1343     {
;;;1344       RCC->AHB3RSTR &= ~RCC_AHB3Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L9.12|
000008  4301              ORRS     r1,r1,r0              ;1340
00000a  e000              B        |L9.14|
                  |L9.12|
00000c  4381              BICS     r1,r1,r0
                  |L9.14|
00000e  6011              STR      r1,[r2,#0]            ;1340
;;;1345     }
;;;1346   }
000010  4770              BX       lr
;;;1347   
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40023818

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;1199     */
;;;1200   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L10.20|
;;;1201   {
;;;1202     /* Check the parameters */
;;;1203     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;1204     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1205   
;;;1206     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1207     {
;;;1208       RCC->APB1ENR |= RCC_APB1Periph;
;;;1209     }
;;;1210     else
;;;1211     {
;;;1212       RCC->APB1ENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L10.12|
000008  4301              ORRS     r1,r1,r0              ;1208
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4381              BICS     r1,r1,r0
                  |L10.14|
00000e  6011              STR      r1,[r2,#0]            ;1208
;;;1213     }
;;;1214   }
000010  4770              BX       lr
;;;1215   
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40023840

                          AREA ||i.RCC_APB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;1569     */
;;;1570   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L11.20|
;;;1571   {
;;;1572     /* Check the parameters */
;;;1573     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1574     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1575     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1576     {
;;;1577       RCC->APB1LPENR |= RCC_APB1Periph;
;;;1578     }
;;;1579     else
;;;1580     {
;;;1581       RCC->APB1LPENR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L11.12|
000008  4301              ORRS     r1,r1,r0              ;1577
00000a  e000              B        |L11.14|
                  |L11.12|
00000c  4381              BICS     r1,r1,r0
                  |L11.14|
00000e  6011              STR      r1,[r2,#0]            ;1577
;;;1582     }
;;;1583   }
000010  4770              BX       lr
;;;1584   
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40023860

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;1378     */
;;;1379   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L12.20|
;;;1380   {
;;;1381     /* Check the parameters */
;;;1382     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1383     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1384     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1385     {
;;;1386       RCC->APB1RSTR |= RCC_APB1Periph;
;;;1387     }
;;;1388     else
;;;1389     {
;;;1390       RCC->APB1RSTR &= ~RCC_APB1Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L12.12|
000008  4301              ORRS     r1,r1,r0              ;1386
00000a  e000              B        |L12.14|
                  |L12.12|
00000c  4381              BICS     r1,r1,r0
                  |L12.14|
00000e  6011              STR      r1,[r2,#0]            ;1386
;;;1391     }
;;;1392   }
000010  4770              BX       lr
;;;1393   
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      0x40023820

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;1239     */
;;;1240   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L13.20|
;;;1241   {
;;;1242     /* Check the parameters */
;;;1243     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1244     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1245   
;;;1246     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1247     {
;;;1248       RCC->APB2ENR |= RCC_APB2Periph;
;;;1249     }
;;;1250     else
;;;1251     {
;;;1252       RCC->APB2ENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L13.12|
000008  4301              ORRS     r1,r1,r0              ;1248
00000a  e000              B        |L13.14|
                  |L13.12|
00000c  4381              BICS     r1,r1,r0
                  |L13.14|
00000e  6011              STR      r1,[r2,#0]            ;1248
;;;1253     }
;;;1254   }
000010  4770              BX       lr
;;;1255   
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0x40023844

                          AREA ||i.RCC_APB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;1609     */
;;;1610   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L14.20|
;;;1611   {
;;;1612     /* Check the parameters */
;;;1613     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1614     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1615     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1616     {
;;;1617       RCC->APB2LPENR |= RCC_APB2Periph;
;;;1618     }
;;;1619     else
;;;1620     {
;;;1621       RCC->APB2LPENR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L14.12|
000008  4301              ORRS     r1,r1,r0              ;1617
00000a  e000              B        |L14.14|
                  |L14.12|
00000c  4381              BICS     r1,r1,r0
                  |L14.14|
00000e  6011              STR      r1,[r2,#0]            ;1617
;;;1622     }
;;;1623   }
000010  4770              BX       lr
;;;1624   
                          ENDP

000012  0000              DCW      0x0000
                  |L14.20|
                          DCD      0x40023864

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;1414     */
;;;1415   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  4a04              LDR      r2,|L15.20|
;;;1416   {
;;;1417     /* Check the parameters */
;;;1418     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;1419     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1420     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1421     {
;;;1422       RCC->APB2RSTR |= RCC_APB2Periph;
;;;1423     }
;;;1424     else
;;;1425     {
;;;1426       RCC->APB2RSTR &= ~RCC_APB2Periph;
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L15.12|
000008  4301              ORRS     r1,r1,r0              ;1422
00000a  e000              B        |L15.14|
                  |L15.12|
00000c  4381              BICS     r1,r1,r0
                  |L15.14|
00000e  6011              STR      r1,[r2,#0]            ;1422
;;;1427     }
;;;1428   }
000010  4770              BX       lr
;;;1429   
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      0x40023824

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;297      */
;;;298    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4903              LDR      r1,|L16.16|
;;;299    {
;;;300      uint32_t tmpreg = 0;
;;;301      /* Check the parameters */
;;;302      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;303    
;;;304      tmpreg = RCC->CR;
000002  680a              LDR      r2,[r1,#0]
;;;305    
;;;306      /* Clear HSITRIM[4:0] bits */
;;;307      tmpreg &= ~RCC_CR_HSITRIM;
000004  f02202f8          BIC      r2,r2,#0xf8
;;;308    
;;;309      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;310      tmpreg |= (uint32_t)HSICalibrationValue << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;311    
;;;312      /* Store the new value */
;;;313      RCC->CR = tmpreg;
00000c  6008              STR      r0,[r1,#0]
;;;314    }
00000e  4770              BX       lr
;;;315    
                          ENDP

                  |L16.16|
                          DCD      0x40023800

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1034     */
;;;1035   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L17.8|
;;;1036   {
;;;1037     /* Check the parameters */
;;;1038     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1039     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1040   }
000004  4770              BX       lr
;;;1041   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x42470e40

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;1735     */
;;;1736   void RCC_ClearFlag(void)
000000  4802              LDR      r0,|L18.12|
;;;1737   {
;;;1738     /* Set RMVF bit to clear the reset flags */
;;;1739     RCC->CSR |= RCC_CSR_RMVF;
000002  6801              LDR      r1,[r0,#0]
000004  f0417180          ORR      r1,r1,#0x1000000
000008  6001              STR      r1,[r0,#0]
;;;1740   }
00000a  4770              BX       lr
;;;1741   
                          ENDP

                  |L18.12|
                          DCD      0x40023874

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;1787     */
;;;1788   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L19.8|
;;;1789   {
;;;1790     /* Check the parameters */
;;;1791     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1792   
;;;1793     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1794        pending bits */
;;;1795     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7008              STRB     r0,[r1,#0]
;;;1796   }
000004  4770              BX       lr
;;;1797   
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x4002380e

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;523      */
;;;524    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L20.8|
;;;525    {
;;;526      /* Check the parameters */
;;;527      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;528      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;529    }
000004  4770              BX       lr
;;;530    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x42470000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;201      */
;;;202    void RCC_DeInit(void)
000000  480b              LDR      r0,|L21.48|
;;;203    {
;;;204      /* Set HSION bit */
;;;205      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;206    
;;;207      /* Reset CFGR register */
;;;208      RCC->CFGR = 0x00000000;
00000a  4a09              LDR      r2,|L21.48|
00000c  2100              MOVS     r1,#0
00000e  3208              ADDS     r2,r2,#8
000010  6011              STR      r1,[r2,#0]
;;;209    
;;;210      /* Reset HSEON, CSSON and PLLON bits */
;;;211      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6802              LDR      r2,[r0,#0]
000014  4b07              LDR      r3,|L21.52|
000016  401a              ANDS     r2,r2,r3
000018  6002              STR      r2,[r0,#0]
;;;212    
;;;213      /* Reset PLLCFGR register */
;;;214      RCC->PLLCFGR = 0x24003010;
00001a  1d03              ADDS     r3,r0,#4
00001c  4a06              LDR      r2,|L21.56|
00001e  601a              STR      r2,[r3,#0]
;;;215    
;;;216      /* Reset HSEBYP bit */
;;;217      RCC->CR &= (uint32_t)0xFFFBFFFF;
000020  6802              LDR      r2,[r0,#0]
000022  f4222280          BIC      r2,r2,#0x40000
000026  6002              STR      r2,[r0,#0]
;;;218    
;;;219      /* Disable all interrupts */
;;;220      RCC->CIR = 0x00000000;
000028  4801              LDR      r0,|L21.48|
00002a  300c              ADDS     r0,r0,#0xc
00002c  6001              STR      r1,[r0,#0]
;;;221    }
00002e  4770              BX       lr
;;;222    
                          ENDP

                  |L21.48|
                          DCD      0x40023800
                  |L21.52|
                          DCD      0xfef6ffff
                  |L21.56|
                          DCD      0x24003010

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;860      */
;;;861    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b530              PUSH     {r4,r5,lr}
;;;862    {
;;;863      uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;864    
;;;865      /* Get SYSCLK source -------------------------------------------------------*/
;;;866      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4b22              LDR      r3,|L22.140|
000004  6819              LDR      r1,[r3,#0]
;;;867    
;;;868      switch (tmp)
;;;869      {
;;;870        case 0x00:  /* HSI used as system clock source */
;;;871          RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000006  4a22              LDR      r2,|L22.144|
000008  f011010c          ANDS     r1,r1,#0xc            ;866
00000c  d004              BEQ      |L22.24|
;;;872          break;
;;;873        case 0x04:  /* HSE used as system clock  source */
;;;874          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
00000e  4d21              LDR      r5,|L22.148|
000010  2904              CMP      r1,#4                 ;868
000012  d003              BEQ      |L22.28|
000014  2908              CMP      r1,#8                 ;868
000016  d003              BEQ      |L22.32|
                  |L22.24|
000018  6002              STR      r2,[r0,#0]            ;872
00001a  e01d              B        |L22.88|
                  |L22.28|
;;;875          break;
00001c  6005              STR      r5,[r0,#0]
00001e  e01b              B        |L22.88|
                  |L22.32|
;;;876        case 0x08:  /* PLL used as system clock  source */
;;;877    
;;;878          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;879             SYSCLK = PLL_VCO / PLLP
;;;880             */    
;;;881          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000020  491a              LDR      r1,|L22.140|
000022  1f09              SUBS     r1,r1,#4
000024  680c              LDR      r4,[r1,#0]
000026  f3c45c80          UBFX     r12,r4,#22,#1
;;;882          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002a  680c              LDR      r4,[r1,#0]
;;;883          
;;;884          if (pllsource != 0)
00002c  f1bc0f00          CMP      r12,#0
000030  f004043f          AND      r4,r4,#0x3f           ;882
000034  d002              BEQ      |L22.60|
;;;885          {
;;;886            /* HSE used as PLL clock source */
;;;887            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000036  fbb5f2f4          UDIV     r2,r5,r4
00003a  e001              B        |L22.64|
                  |L22.60|
;;;888          }
;;;889          else
;;;890          {
;;;891            /* HSI used as PLL clock source */
;;;892            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003c  fbb2f2f4          UDIV     r2,r2,r4
                  |L22.64|
000040  680c              LDR      r4,[r1,#0]
;;;893          }
;;;894    
;;;895          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000042  6809              LDR      r1,[r1,#0]
000044  f3c41488          UBFX     r4,r4,#6,#9           ;892
000048  4362              MULS     r2,r4,r2              ;892
00004a  f3c14101          UBFX     r1,r1,#16,#2
00004e  1c49              ADDS     r1,r1,#1
000050  0049              LSLS     r1,r1,#1
;;;896          RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
000052  fbb2f1f1          UDIV     r1,r2,r1
000056  6001              STR      r1,[r0,#0]
                  |L22.88|
;;;897          break;
;;;898        default:
;;;899          RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
;;;900          break;
;;;901      }
;;;902      /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;903    
;;;904      /* Get HCLK prescaler */
;;;905      tmp = RCC->CFGR & RCC_CFGR_HPRE;
000058  6819              LDR      r1,[r3,#0]
;;;906      tmp = tmp >> 4;
;;;907      presc = APBAHBPrescTable[tmp];
00005a  4a0f              LDR      r2,|L22.152|
00005c  f00101f0          AND      r1,r1,#0xf0           ;905
000060  0909              LSRS     r1,r1,#4              ;906
000062  5c54              LDRB     r4,[r2,r1]
;;;908      /* HCLK clock frequency */
;;;909      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
000064  6801              LDR      r1,[r0,#0]
000066  40e1              LSRS     r1,r1,r4
;;;910    
;;;911      /* Get PCLK1 prescaler */
;;;912      tmp = RCC->CFGR & RCC_CFGR_PPRE1;
000068  6041              STR      r1,[r0,#4]
00006a  681c              LDR      r4,[r3,#0]
00006c  f40454e0          AND      r4,r4,#0x1c00
;;;913      tmp = tmp >> 10;
000070  0aa4              LSRS     r4,r4,#10
;;;914      presc = APBAHBPrescTable[tmp];
000072  5d14              LDRB     r4,[r2,r4]
;;;915      /* PCLK1 clock frequency */
;;;916      RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000074  fa21f404          LSR      r4,r1,r4
;;;917    
;;;918      /* Get PCLK2 prescaler */
;;;919      tmp = RCC->CFGR & RCC_CFGR_PPRE2;
000078  6084              STR      r4,[r0,#8]
00007a  681b              LDR      r3,[r3,#0]
00007c  f4034360          AND      r3,r3,#0xe000
;;;920      tmp = tmp >> 13;
000080  0b5b              LSRS     r3,r3,#13
;;;921      presc = APBAHBPrescTable[tmp];
000082  5cd2              LDRB     r2,[r2,r3]
;;;922      /* PCLK2 clock frequency */
;;;923      RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000084  40d1              LSRS     r1,r1,r2
000086  60c1              STR      r1,[r0,#0xc]
;;;924    }
000088  bd30              POP      {r4,r5,pc}
;;;925    
                          ENDP

00008a  0000              DCW      0x0000
                  |L22.140|
                          DCD      0x40023808
                  |L22.144|
                          DCD      0x00f42400
                  |L22.148|
                          DCD      0x017d7840
                  |L22.152|
                          DCD      ||.data||

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;1690     */
;;;1691   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  4602              MOV      r2,r0
;;;1692   {
;;;1693     uint32_t tmp = 0;
;;;1694     uint32_t statusreg = 0;
;;;1695     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1696   
;;;1697     /* Check the parameters */
;;;1698     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;1699   
;;;1700     /* Get the RCC register index */
;;;1701     tmp = RCC_FLAG >> 5;
000004  0951              LSRS     r1,r2,#5
;;;1702     if (tmp == 1)               /* The flag to check is in CR register */
000006  2901              CMP      r1,#1
000008  d00b              BEQ      |L23.34|
;;;1703     {
;;;1704       statusreg = RCC->CR;
;;;1705     }
;;;1706     else if (tmp == 2)          /* The flag to check is in BDCR register */
00000a  2902              CMP      r1,#2
00000c  d00c              BEQ      |L23.40|
;;;1707     {
;;;1708       statusreg = RCC->BDCR;
;;;1709     }
;;;1710     else                       /* The flag to check is in CSR register */
;;;1711     {
;;;1712       statusreg = RCC->CSR;
00000e  4908              LDR      r1,|L23.48|
                  |L23.16|
000010  6809              LDR      r1,[r1,#0]            ;1708
;;;1713     }
;;;1714   
;;;1715     /* Get the flag position */
;;;1716     tmp = RCC_FLAG & FLAG_MASK;
000012  f002021f          AND      r2,r2,#0x1f
;;;1717     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000016  2301              MOVS     r3,#1
000018  4093              LSLS     r3,r3,r2
00001a  420b              TST      r3,r1
00001c  d000              BEQ      |L23.32|
;;;1718     {
;;;1719       bitstatus = SET;
00001e  2001              MOVS     r0,#1
                  |L23.32|
;;;1720     }
;;;1721     else
;;;1722     {
;;;1723       bitstatus = RESET;
;;;1724     }
;;;1725     /* Return the flag status */
;;;1726     return bitstatus;
;;;1727   }
000020  4770              BX       lr
                  |L23.34|
000022  4903              LDR      r1,|L23.48|
000024  3974              SUBS     r1,r1,#0x74           ;1704
000026  e7f3              B        |L23.16|
                  |L23.40|
000028  4901              LDR      r1,|L23.48|
00002a  1f09              SUBS     r1,r1,#4              ;1708
00002c  e7f0              B        |L23.16|
;;;1728   
                          ENDP

00002e  0000              DCW      0x0000
                  |L23.48|
                          DCD      0x40023874

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;1754     */
;;;1755   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4a03              LDR      r2,|L24.16|
;;;1756   {
000002  4601              MOV      r1,r0
;;;1757     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1758   
;;;1759     /* Check the parameters */
;;;1760     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;1761   
;;;1762     /* Check the status of the specified RCC interrupt */
;;;1763     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L24.14|
;;;1764     {
;;;1765       bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L24.14|
;;;1766     }
;;;1767     else
;;;1768     {
;;;1769       bitstatus = RESET;
;;;1770     }
;;;1771     /* Return the RCC_IT status */
;;;1772     return  bitstatus;
;;;1773   }
00000e  4770              BX       lr
;;;1774   
                          ENDP

                  |L24.16|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;720      */
;;;721    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L25.12|
;;;722    {
;;;723      return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;724    }
000008  4770              BX       lr
;;;725    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x40023808

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;745      */
;;;746    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4a03              LDR      r2,|L26.16|
;;;747    {
;;;748      uint32_t tmpreg = 0;
;;;749      
;;;750      /* Check the parameters */
;;;751      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;752    
;;;753      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;754    
;;;755      /* Clear HPRE[3:0] bits */
;;;756      tmpreg &= ~RCC_CFGR_HPRE;
000004  f02101f0          BIC      r1,r1,#0xf0
;;;757    
;;;758      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;759      tmpreg |= RCC_SYSCLK;
000008  4301              ORRS     r1,r1,r0
;;;760    
;;;761      /* Store the new value */
;;;762      RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;763    }
00000c  4770              BX       lr
;;;764    
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      0x40023808

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;242      */
;;;243    void RCC_HSEConfig(uint8_t RCC_HSE)
000000  4902              LDR      r1,|L27.12|
;;;244    {
;;;245      /* Check the parameters */
;;;246      assert_param(IS_RCC_HSE(RCC_HSE));
;;;247    
;;;248      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;249      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;250    
;;;251      /* Set the new HSE configuration -------------------------------------------*/
;;;252      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
000006  7008              STRB     r0,[r1,#0]
;;;253    }
000008  4770              BX       lr
;;;254    
                          ENDP

00000a  0000              DCW      0x0000
                  |L27.12|
                          DCD      0x40023802

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;333      */
;;;334    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;338    
;;;339      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;340    }
000004  4770              BX       lr
;;;341    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x42470000

                          AREA ||i.RCC_I2SCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_I2SCLKConfig PROC
;;;1051     */
;;;1052   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000000  4901              LDR      r1,|L29.8|
;;;1053   {
;;;1054     /* Check the parameters */
;;;1055     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1056   
;;;1057     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;1058   }
000004  4770              BX       lr
;;;1059   
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      0x4247015c

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;1654     */
;;;1655   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  4a04              LDR      r2,|L30.20|
;;;1656   {
;;;1657     /* Check the parameters */
;;;1658     assert_param(IS_RCC_IT(RCC_IT));
;;;1659     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1660     if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;1661     {
;;;1662       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;1663       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
;;;1664     }
;;;1665     else
;;;1666     {
;;;1667       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;1668       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000004  7811              LDRB     r1,[r2,#0]
000006  d001              BEQ      |L30.12|
000008  4301              ORRS     r1,r1,r0              ;1663
00000a  e000              B        |L30.14|
                  |L30.12|
00000c  4381              BICS     r1,r1,r0
                  |L30.14|
00000e  7011              STRB     r1,[r2,#0]            ;1663
;;;1669     }
;;;1670   }
000010  4770              BX       lr
;;;1671   
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0x4002380d

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;358      */
;;;359    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  4905              LDR      r1,|L31.24|
;;;360    {
;;;361      /* Check the parameters */
;;;362      assert_param(IS_RCC_LSE(RCC_LSE));
;;;363    
;;;364      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;365      /* Reset LSEON bit */
;;;366      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  2200              MOVS     r2,#0
000004  700a              STRB     r2,[r1,#0]
;;;367    
;;;368      /* Reset LSEBYP bit */
;;;369      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  700a              STRB     r2,[r1,#0]
;;;370    
;;;371      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;372      switch (RCC_LSE)
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L31.18|
00000c  2804              CMP      r0,#4
00000e  d101              BNE      |L31.20|
;;;373      {
;;;374        case RCC_LSE_ON:
;;;375          /* Set LSEON bit */
;;;376          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
;;;377          break;
;;;378        case RCC_LSE_Bypass:
;;;379          /* Set LSEBYP and LSEON bits */
;;;380          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
000010  2005              MOVS     r0,#5
                  |L31.18|
000012  7008              STRB     r0,[r1,#0]
                  |L31.20|
;;;381          break;
;;;382        default:
;;;383          break;
;;;384      }
;;;385    }
000014  4770              BX       lr
;;;386    
                          ENDP

000016  0000              DCW      0x0000
                  |L31.24|
                          DCD      0x40023870

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;398      */
;;;399    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L32.8|
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;403    
;;;404      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;405    }
000004  4770              BX       lr
;;;406    
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      0x42470e80

                          AREA ||i.RCC_MCO1Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO1Config PROC
;;;548      */
;;;549    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000000  4a03              LDR      r2,|L33.16|
;;;550    {
;;;551      uint32_t tmpreg = 0;
;;;552      
;;;553      /* Check the parameters */
;;;554      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;555      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;556    
;;;557      tmpreg = RCC->CFGR;
000002  6813              LDR      r3,[r2,#0]
;;;558    
;;;559      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;560      tmpreg &= CFGR_MCO1_RESET_MASK;
;;;561    
;;;562      /* Select MCO1 clock source and prescaler */
;;;563      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
000004  4308              ORRS     r0,r0,r1
000006  f02363ec          BIC      r3,r3,#0x7600000      ;560
00000a  4318              ORRS     r0,r0,r3
;;;564    
;;;565      /* Store the new value */
;;;566      RCC->CFGR = tmpreg;  
00000c  6010              STR      r0,[r2,#0]
;;;567    }
00000e  4770              BX       lr
;;;568    
                          ENDP

                  |L33.16|
                          DCD      0x40023808

                          AREA ||i.RCC_MCO2Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO2Config PROC
;;;586      */
;;;587    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000000  4a03              LDR      r2,|L34.16|
;;;588    {
;;;589      uint32_t tmpreg = 0;
;;;590      
;;;591      /* Check the parameters */
;;;592      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;593      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;594      
;;;595      tmpreg = RCC->CFGR;
000002  6813              LDR      r3,[r2,#0]
;;;596      
;;;597      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;598      tmpreg &= CFGR_MCO2_RESET_MASK;
;;;599    
;;;600      /* Select MCO2 clock source and prescaler */
;;;601      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
000004  4308              ORRS     r0,r0,r1
000006  f0234378          BIC      r3,r3,#0xf8000000     ;598
00000a  4318              ORRS     r0,r0,r3
;;;602    
;;;603      /* Store the new value */
;;;604      RCC->CFGR = tmpreg;  
00000c  6010              STR      r0,[r2,#0]
;;;605    }
00000e  4770              BX       lr
;;;606    
                          ENDP

                  |L34.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;777      */
;;;778    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4a03              LDR      r2,|L35.16|
;;;779    {
;;;780      uint32_t tmpreg = 0;
;;;781    
;;;782      /* Check the parameters */
;;;783      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;784    
;;;785      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;786    
;;;787      /* Clear PPRE1[2:0] bits */
;;;788      tmpreg &= ~RCC_CFGR_PPRE1;
000004  f42151e0          BIC      r1,r1,#0x1c00
;;;789    
;;;790      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;791      tmpreg |= RCC_HCLK;
000008  4301              ORRS     r1,r1,r0
;;;792    
;;;793      /* Store the new value */
;;;794      RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;795    }
00000c  4770              BX       lr
;;;796    
                          ENDP

00000e  0000              DCW      0x0000
                  |L35.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;808      */
;;;809    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4903              LDR      r1,|L36.16|
;;;810    {
;;;811      uint32_t tmpreg = 0;
;;;812    
;;;813      /* Check the parameters */
;;;814      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;815    
;;;816      tmpreg = RCC->CFGR;
000002  680a              LDR      r2,[r1,#0]
;;;817    
;;;818      /* Clear PPRE2[2:0] bits */
;;;819      tmpreg &= ~RCC_CFGR_PPRE2;
000004  f4224260          BIC      r2,r2,#0xe000
;;;820    
;;;821      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;822      tmpreg |= RCC_HCLK << 3;
000008  ea4200c0          ORR      r0,r2,r0,LSL #3
;;;823    
;;;824      /* Store the new value */
;;;825      RCC->CFGR = tmpreg;
00000c  6008              STR      r0,[r1,#0]
;;;826    }
00000e  4770              BX       lr
;;;827    
                          ENDP

                  |L36.16|
                          DCD      0x40023808

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;464      */
;;;465    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L37.8|
;;;466    {
;;;467      /* Check the parameters */
;;;468      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;469      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;470    }
000004  4770              BX       lr
;;;471    
                          ENDP

000006  0000              DCW      0x0000
                  |L37.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;441      */
;;;442    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
000000  ea411182          ORR      r1,r1,r2,LSL #6
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;446      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;447      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;448      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;449      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;450    
;;;451      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
000004  085a              LSRS     r2,r3,#1
000006  4b06              LDR      r3,|L38.32|
000008  f8ddc000          LDR      r12,[sp,#0]
00000c  eb034202          ADD      r2,r3,r2,LSL #16
000010  4311              ORRS     r1,r1,r2
000012  4301              ORRS     r1,r1,r0
000014  ea41600c          ORR      r0,r1,r12,LSL #24
000018  4902              LDR      r1,|L38.36|
00001a  6008              STR      r0,[r1,#0]
;;;452                     (PLLQ << 24);
;;;453    }
00001c  4770              BX       lr
;;;454    
                          ENDP

00001e  0000              DCW      0x0000
                  |L38.32|
                          DCD      0xffff0000
                  |L38.36|
                          DCD      0x40023804

                          AREA ||i.RCC_PLLI2SCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SCmd PROC
;;;505      */
;;;506    void RCC_PLLI2SCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L39.8|
;;;507    {
;;;508      /* Check the parameters */
;;;509      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;510      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000002  6688              STR      r0,[r1,#0x68]
;;;511    }
000004  4770              BX       lr
;;;512    
                          ENDP

000006  0000              DCW      0x0000
                  |L39.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLI2SConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SConfig PROC
;;;490      */
;;;491    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
000000  0180              LSLS     r0,r0,#6
;;;492    {
;;;493      /* Check the parameters */
;;;494      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;495      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;496    
;;;497      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
000002  ea407001          ORR      r0,r0,r1,LSL #28
000006  4901              LDR      r1,|L40.12|
000008  6008              STR      r0,[r1,#0]
;;;498    }
00000a  4770              BX       lr
;;;499    
                          ENDP

                  |L40.12|
                          DCD      0x40023884

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;1017     */
;;;1018   void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L41.8|
;;;1019   {
;;;1020     /* Check the parameters */
;;;1021     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1022   
;;;1023     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1024   }
000004  4770              BX       lr
;;;1025   
                          ENDP

000006  0000              DCW      0x0000
                  |L41.8|
                          DCD      0x42470e3c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;985      */
;;;986    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  f3c02101          UBFX     r1,r0,#8,#2
;;;987    {
;;;988      uint32_t tmpreg = 0;
;;;989    
;;;990      /* Check the parameters */
;;;991      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;992    
;;;993      if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000004  2903              CMP      r1,#3
000006  d107              BNE      |L42.24|
;;;994      { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;995        tmpreg = RCC->CFGR;
000008  4a07              LDR      r2,|L42.40|
00000a  6811              LDR      r1,[r2,#0]
;;;996    
;;;997        /* Clear RTCPRE[4:0] bits */
;;;998        tmpreg &= ~RCC_CFGR_RTCPRE;
00000c  f42113f8          BIC      r3,r1,#0x1f0000
;;;999    
;;;1000       /* Configure HSE division factor for RTC clock */
;;;1001       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
000010  4906              LDR      r1,|L42.44|
000012  4001              ANDS     r1,r1,r0
000014  4319              ORRS     r1,r1,r3
;;;1002   
;;;1003       /* Store the new value */
;;;1004       RCC->CFGR = tmpreg;
000016  6011              STR      r1,[r2,#0]
                  |L42.24|
;;;1005     }
;;;1006       
;;;1007     /* Select the RTC clock source */
;;;1008     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
000018  4903              LDR      r1,|L42.40|
00001a  3168              ADDS     r1,r1,#0x68
00001c  680a              LDR      r2,[r1,#0]
00001e  f3c0000b          UBFX     r0,r0,#0,#12
000022  4302              ORRS     r2,r2,r0
000024  600a              STR      r2,[r1,#0]
;;;1009   }
000026  4770              BX       lr
;;;1010   
                          ENDP

                  |L42.40|
                          DCD      0x40023808
                  |L42.44|
                          DCD      0x0ffffcff

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;692      */
;;;693    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4a03              LDR      r2,|L43.16|
;;;694    {
;;;695      uint32_t tmpreg = 0;
;;;696    
;;;697      /* Check the parameters */
;;;698      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;699    
;;;700      tmpreg = RCC->CFGR;
000002  6811              LDR      r1,[r2,#0]
;;;701    
;;;702      /* Clear SW[1:0] bits */
;;;703      tmpreg &= ~RCC_CFGR_SW;
000004  f0210103          BIC      r1,r1,#3
;;;704    
;;;705      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;706      tmpreg |= RCC_SYSCLKSource;
000008  4301              ORRS     r1,r1,r0
;;;707    
;;;708      /* Store the new value */
;;;709      RCC->CFGR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;710    }
00000c  4770              BX       lr
;;;711    
                          ENDP

00000e  0000              DCW      0x0000
                  |L43.16|
                          DCD      0x40023808

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;266      */
;;;267    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b530              PUSH     {r4,r5,lr}
;;;268    {
;;;269      __IO uint32_t startupcounter = 0;
000002  2400              MOVS     r4,#0
;;;270      ErrorStatus status = ERROR;
;;;271      FlagStatus hsestatus = RESET;
;;;272      /* Wait till HSE is ready and if Time out is reached exit */
;;;273      do
;;;274      {
;;;275        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
;;;276        startupcounter++;
;;;277      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
000004  f44f65a0          MOV      r5,#0x500
                  |L44.8|
000008  2031              MOVS     r0,#0x31              ;275
00000a  f7fffffe          BL       RCC_GetFlagStatus
00000e  1c64              ADDS     r4,r4,#1              ;276
000010  42ac              CMP      r4,r5
000012  d001              BEQ      |L44.24|
000014  2800              CMP      r0,#0
000016  d0f7              BEQ      |L44.8|
                  |L44.24|
;;;278    
;;;279      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000018  2031              MOVS     r0,#0x31
00001a  f7fffffe          BL       RCC_GetFlagStatus
00001e  2800              CMP      r0,#0
000020  d000              BEQ      |L44.36|
;;;280      {
;;;281        status = SUCCESS;
000022  2001              MOVS     r0,#1
                  |L44.36|
;;;282      }
;;;283      else
;;;284      {
;;;285        status = ERROR;
;;;286      }
;;;287      return (status);
;;;288    }
000024  bd30              POP      {r4,r5,pc}
;;;289    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\Libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 114 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 128
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
